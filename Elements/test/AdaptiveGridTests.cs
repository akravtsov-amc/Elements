using Elements.Geometry;
using Elements.Serialization.glTF;
using Elements.Spatial.AdaptiveGrid;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using Xunit;

namespace Elements.Tests
{
    public class AdaptiveGridTests : ModelTest
    {
        [Fact]
        public void Dictionary3dTest()
        {
            var tree = new AdaptiveGrid.Dictionary3d();
            ulong id;

            // Step 1
            tree.Insert(10.000000000000000, 3.000000000000000, 9.000000000000000, 1);
            tree.Erase(3.000000000000000, 3.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(5.665417755480634, 6.034071720888596, 7.742584046349047, 9.629447866662256, 8.768938716272300, 9.731458485607606, out id));
            // Step 2
            tree.Erase(10.000000000000000, 3.000000000000000, 9.000000000000000);
            tree.Erase(4.000000000000000, 6.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(3.632164567616905, 8.341702966279080, 4.025982958446958, 8.241413587897270, 2.001903873662214, 5.696821052274863, out id));
            // Step 3
            tree.Insert(1.000000000000000, 9.000000000000000, 9.000000000000000, 2);
            tree.Erase(8.000000000000000, 10.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(0.762865299588348, 4.938180507289443, 6.068880881493037, 6.178265718888737, 5.926916704413545, 9.844210911838786, out id));
            // Step 4
            tree.Insert(6.000000000000000, 5.000000000000000, 7.000000000000000, 3);
            tree.Erase(4.000000000000000, 5.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(2.078907794364654, 2.853017841995236, 1.365741828651300, 8.289349590334504, 2.982741287438363, 8.290008667720018, out id));
            // Step 5
            tree.Insert(2.000000000000000, 0.000000000000000, 1.000000000000000, 4);
            tree.Erase(7.000000000000000, 0.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(6.021189346240058, 9.420310533063425, 2.492876357067710, 2.899456023442339, 2.630830489276081, 3.113931276922040, out id));
            // Step 6
            tree.Erase(6.000000000000000, 5.000000000000000, 7.000000000000000);
            tree.Erase(4.000000000000000, 4.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(3.095439532134350, 6.622395637737052, 4.805246885663691, 7.822439890136481, 0.938639112644708, 9.024945004902921, out id));
            // Step 7
            tree.Insert(4.000000000000000, 5.000000000000000, 1.000000000000000, 5);
            tree.Erase(10.000000000000000, 4.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(1.969067000823932, 9.778862801144165, 2.742329082468315, 5.222319032555384, 1.374331173992909, 6.056493215269883, out id));
            // Step 8
            tree.Insert(7.000000000000000, 3.000000000000000, 3.000000000000000, 6);
            tree.Erase(7.000000000000000, 9.000000000000000, 7.000000000000000);
            Assert.True(tree.Find(1.616437590341160, 8.073918819139909, 1.648774114241165, 7.034354872769365, 2.298953014925337, 4.542821006542316, out id));
            Assert.True((new List<ulong> { 6 }).Contains(id));
            // Step 9
            tree.Insert(2.000000000000000, 5.000000000000000, 7.000000000000000, 7);
            tree.Erase(0.000000000000000, 5.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(1.325120675284264, 7.012420344982812, 0.903594174521473, 2.330853197954266, 2.076376710169074, 9.930135257194602, out id));
            // Step 10
            tree.Insert(2.000000000000000, 4.000000000000000, 6.000000000000000, 8);
            tree.Erase(4.000000000000000, 9.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(3.670932225271550, 6.030276463581966, 1.092958058488909, 5.929869652347408, 2.152049414735658, 3.880131694115768, out id));
            // Step 11
            tree.Erase(2.000000000000000, 4.000000000000000, 6.000000000000000);
            tree.Erase(10.000000000000000, 7.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(3.903184185154517, 6.121891714883281, 4.998944842908454, 9.058447807217560, 1.540731077809095, 4.769702889712586, out id));
            // Step 12
            tree.Insert(0.000000000000000, 10.000000000000000, 7.000000000000000, 9);
            tree.Erase(10.000000000000000, 9.000000000000000, 10.000000000000000);
            Assert.True(tree.Find(0.267070195329513, 3.050033549150547, 0.118232673932688, 7.850790228088481, 2.016155301222059, 8.787212565356924, out id));
            Assert.True((new List<ulong> { 7 }).Contains(id));
            // Step 13
            tree.Erase(2.000000000000000, 0.000000000000000, 1.000000000000000);
            tree.Erase(10.000000000000000, 5.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(7.900347734653169, 8.120370687494500, 5.950404832201340, 8.948919993630115, 0.004322897392013, 7.078215163257047, out id));
            // Step 14
            tree.Erase(7.000000000000000, 3.000000000000000, 3.000000000000000);
            tree.Erase(6.000000000000000, 5.000000000000000, 2.000000000000000);
            Assert.True(tree.Find(0.208361807853376, 3.195748794649995, 2.034261232502329, 8.632686898443419, 5.830095926886979, 7.374903127889035, out id));
            Assert.True((new List<ulong> { 7 }).Contains(id));
            // Step 15
            tree.Insert(0.000000000000000, 3.000000000000000, 0.000000000000000, 10);
            tree.Erase(1.000000000000000, 10.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(5.084117705762269, 6.643480177967199, 0.819686680149867, 9.716866227349101, 3.715268800760390, 5.759893504717963, out id));
            // Step 16
            tree.Insert(6.000000000000000, 5.000000000000000, 9.000000000000000, 11);
            tree.Erase(1.000000000000000, 9.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(3.454882309042320, 6.082866621761058, 0.155738483597055, 9.976989289100262, 3.995207181221252, 5.072610612063295, out id));
            // Step 17
            tree.Insert(4.000000000000000, 6.000000000000000, 6.000000000000000, 12);
            tree.Erase(3.000000000000000, 1.000000000000000, 2.000000000000000);
            Assert.True(tree.Find(3.484728419830667, 4.436835462185763, 5.514540959669993, 7.519752438253126, 2.917570595206635, 6.291099069900098, out id));
            Assert.True((new List<ulong> { 12 }).Contains(id));
            // Step 18
            tree.Insert(0.000000000000000, 2.000000000000000, 6.000000000000000, 13);
            tree.Erase(6.000000000000000, 9.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(2.042888121142756, 7.248994055260925, 3.718235144832952, 6.869341172753709, 3.474836950765391, 8.496110061518253, out id));
            Assert.True((new List<ulong> { 12 }).Contains(id));
            // Step 19
            tree.Erase(0.000000000000000, 2.000000000000000, 6.000000000000000);
            tree.Erase(9.000000000000000, 9.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(0.644938681469235, 8.572355393829952, 2.911058736027841, 4.709970546740384, 4.477012352032425, 9.802164582572125, out id));
            // Step 20
            tree.Insert(5.000000000000000, 8.000000000000000, 6.000000000000000, 14);
            tree.Erase(6.000000000000000, 0.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(3.640796052835728, 3.976674197967540, 0.475401156298952, 1.704453316656015, 2.617097941224340, 4.637364386828734, out id));
            // Step 21
            tree.Erase(6.000000000000000, 5.000000000000000, 9.000000000000000);
            tree.Erase(8.000000000000000, 1.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(2.562100279841427, 3.861303373416947, 5.204210759254617, 6.049749772649118, 4.119588908608728, 6.076137471172993, out id));
            // Step 22
            tree.Erase(4.000000000000000, 5.000000000000000, 1.000000000000000);
            tree.Erase(1.000000000000000, 6.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(4.337715973225658, 9.758712452824197, 1.285267027921783, 5.880835919371274, 3.001200124619023, 8.074625982748380, out id));
            // Step 23
            tree.Insert(3.000000000000000, 3.000000000000000, 8.000000000000000, 15);
            tree.Erase(7.000000000000000, 0.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(2.579269209225466, 8.983874929566353, 2.823226966719474, 6.883309406625488, 4.681122660491912, 4.849231428610175, out id));
            // Step 24
            tree.Erase(2.000000000000000, 5.000000000000000, 7.000000000000000);
            tree.Erase(2.000000000000000, 6.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(8.936287620032276, 9.053461222997793, 5.004058510269481, 8.747932699252701, 4.204920146733961, 9.316684190519153, out id));
            // Step 25
            tree.Erase(0.000000000000000, 3.000000000000000, 0.000000000000000);
            tree.Erase(7.000000000000000, 6.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(3.267530872881628, 3.484821810954120, 1.396815420447888, 3.207284081769279, 0.647387259389705, 7.413424542866482, out id));
            // Step 26
            tree.Insert(7.000000000000000, 9.000000000000000, 10.000000000000000, 16);
            tree.Erase(9.000000000000000, 6.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(1.226765278776628, 9.431949209047271, 5.519881881735288, 9.232268518501494, 2.964180050645732, 7.840228682246537, out id));
            Assert.True((new List<ulong> { 12, 14 }).Contains(id));
            // Step 27
            tree.Erase(7.000000000000000, 9.000000000000000, 10.000000000000000);
            tree.Erase(5.000000000000000, 1.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(4.832282512156846, 6.235865884729032, 3.384182403500597, 9.339168350851267, 0.280807481088807, 1.520633951622029, out id));
            // Step 28
            tree.Insert(2.000000000000000, 6.000000000000000, 0.000000000000000, 17);
            tree.Erase(6.000000000000000, 5.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(6.792875169951953, 9.030668223537525, 2.622419136117818, 4.289678698546302, 1.853601187092236, 4.036273378829510, out id));
            // Step 29
            tree.Insert(1.000000000000000, 8.000000000000000, 3.000000000000000, 18);
            tree.Erase(1.000000000000000, 10.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(4.063519609265503, 4.540837889401734, 5.566414688202053, 6.087680720300838, 2.019936390738004, 2.367959490981573, out id));
            // Step 30
            tree.Insert(0.000000000000000, 4.000000000000000, 4.000000000000000, 19);
            tree.Erase(6.000000000000000, 6.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(6.296962715259598, 6.716904703311547, 1.716631420109296, 3.353972203052669, 1.790037515774093, 9.673740453089763, out id));
            // Step 31
            tree.Erase(5.000000000000000, 8.000000000000000, 6.000000000000000);
            tree.Erase(7.000000000000000, 9.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(3.738467109948684, 4.497352141812170, 0.013428166688356, 0.331153458032128, 3.202897743374026, 6.563668939988832, out id));
            // Step 32
            tree.Erase(4.000000000000000, 6.000000000000000, 6.000000000000000);
            tree.Erase(7.000000000000000, 6.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(8.079430509173189, 9.462674906473856, 3.627392642321798, 7.902792083608033, 1.269398173049526, 3.132598660681736, out id));
            // Step 33
            tree.Insert(2.000000000000000, 3.000000000000000, 5.000000000000000, 20);
            tree.Erase(5.000000000000000, 2.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(0.260778483303967, 3.142104240681891, 3.177970799973523, 5.155922182568805, 9.469950008391162, 9.494251065777760, out id));
            // Step 34
            tree.Erase(1.000000000000000, 9.000000000000000, 9.000000000000000);
            tree.Erase(7.000000000000000, 2.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(0.555853279166352, 4.449923815419126, 1.731341230378000, 9.666772644359963, 6.789544249694037, 7.851430687188213, out id));
            // Step 35
            tree.Insert(10.000000000000000, 6.000000000000000, 2.000000000000000, 21);
            tree.Erase(9.000000000000000, 2.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(1.488083958002382, 9.194550465290801, 2.906129149301424, 3.083679344620267, 6.793535554205023, 7.148198917126852, out id));
            // Step 36
            tree.Insert(10.000000000000000, 4.000000000000000, 7.000000000000000, 22);
            tree.Erase(10.000000000000000, 1.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(3.327951256274390, 9.782753398120915, 2.662276277255975, 9.320177482110935, 8.025929020501007, 8.833437804876990, out id));
            // Step 37
            tree.Erase(10.000000000000000, 6.000000000000000, 2.000000000000000);
            tree.Erase(9.000000000000000, 6.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(3.321895909551343, 5.739626726607543, 8.893171748997805, 9.827221690690152, 1.884254572446965, 8.037234664564240, out id));
            // Step 38
            tree.Insert(6.000000000000000, 8.000000000000000, 10.000000000000000, 23);
            tree.Erase(9.000000000000000, 2.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(4.651639114390992, 7.819368919632154, 3.769134166082295, 8.001916499676270, 0.678189550540323, 8.810895334591354, out id));
            // Step 39
            tree.Erase(3.000000000000000, 3.000000000000000, 8.000000000000000);
            tree.Erase(8.000000000000000, 1.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(4.534401397845148, 8.582238339269953, 5.817039863865180, 9.196561764264056, 0.565331930445530, 9.840889922778992, out id));
            // Step 40
            tree.Erase(2.000000000000000, 6.000000000000000, 0.000000000000000);
            tree.Erase(2.000000000000000, 3.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(0.645480852203911, 2.425881577023371, 5.698721331448475, 8.690239711632374, 6.888525713385505, 9.853462282799750, out id));
            // Step 41
            tree.Insert(5.000000000000000, 5.000000000000000, 9.000000000000000, 24);
            tree.Erase(7.000000000000000, 1.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(4.432782261762717, 5.044127102794457, 0.765681287459286, 2.632587812739555, 1.204341668714374, 9.196038171565867, out id));
            // Step 42
            tree.Erase(5.000000000000000, 5.000000000000000, 9.000000000000000);
            tree.Erase(3.000000000000000, 8.000000000000000, 4.000000000000000);
            Assert.True(tree.Find(1.779950452312831, 2.291387798975952, 1.424147071941039, 7.239199281787708, 2.301391416306529, 9.662268009973031, out id));
            Assert.True((new List<ulong> { 20 }).Contains(id));
            // Step 43
            tree.Erase(1.000000000000000, 8.000000000000000, 3.000000000000000);
            tree.Erase(2.000000000000000, 8.000000000000000, 5.000000000000000);
            Assert.True(tree.Find(1.547253302839726, 9.332053223539610, 1.330324288811163, 9.508650933036588, 3.659897717250949, 8.098493307476886, out id));
            Assert.True((new List<ulong> { 20 }).Contains(id));
            // Step 44
            tree.Erase(10.000000000000000, 4.000000000000000, 7.000000000000000);
            tree.Erase(3.000000000000000, 3.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(0.935402246916516, 5.340211423855462, 0.747846892774356, 8.999811730238239, 6.044014228991595, 9.214970242247993, out id));
            // Step 45
            tree.Insert(0.000000000000000, 5.000000000000000, 9.000000000000000, 25);
            tree.Erase(6.000000000000000, 7.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(3.408959481864777, 4.097624594668341, 5.240213695492679, 6.732717109152432, 9.583921177729401, 9.606131702923429, out id));
            // Step 46
            tree.Insert(5.000000000000000, 6.000000000000000, 3.000000000000000, 26);
            tree.Erase(8.000000000000000, 1.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(3.640985770941123, 9.699698064600380, 2.754294449959800, 8.155493437240187, 8.487637502950244, 8.917994801626799, out id));
            // Step 47
            tree.Erase(6.000000000000000, 8.000000000000000, 10.000000000000000);
            tree.Erase(2.000000000000000, 9.000000000000000, 8.000000000000000);
            Assert.True(tree.Find(0.399068587267847, 6.715189315161004, 4.832827434919166, 9.916540177393466, 2.331258906336863, 8.640205264910328, out id));
            Assert.True((new List<ulong> { 26 }).Contains(id));
            // Step 48
            tree.Insert(10.000000000000000, 3.000000000000000, 2.000000000000000, 27);
            tree.Erase(0.000000000000000, 1.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(1.157008002966278, 2.804803529803995, 3.061169984487263, 5.174105121793517, 1.573519938628525, 6.704773301222665, out id));
            // Step 49
            tree.Insert(5.000000000000000, 3.000000000000000, 0.000000000000000, 28);
            tree.Erase(10.000000000000000, 0.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(8.359803996622244, 9.971482708322233, 0.223091752651067, 6.613786628505048, 3.077897328547082, 3.364329584830096, out id));
            // Step 50
            tree.Erase(2.000000000000000, 3.000000000000000, 5.000000000000000);
            tree.Erase(3.000000000000000, 3.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(1.057531330471749, 5.270675602797922, 4.568045162184029, 8.337739898514432, 6.002307755104045, 6.314694883937135, out id));
            // Step 51
            tree.Insert(1.000000000000000, 9.000000000000000, 3.000000000000000, 29);
            tree.Erase(5.000000000000000, 0.000000000000000, 4.000000000000000);
            Assert.True(tree.Find(3.793544851967306, 8.697534894879221, 1.680661656118991, 9.968484962119259, 1.544427975047159, 3.168783109519748, out id));
            Assert.True((new List<ulong> { 26 }).Contains(id));
            // Step 52
            tree.Insert(5.000000000000000, 3.000000000000000, 2.000000000000000, 30);
            tree.Erase(6.000000000000000, 0.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(8.140828305109746, 9.485405944321025, 1.431275357366326, 1.817274684603434, 1.398943045049219, 2.388263217401304, out id));
            // Step 53
            tree.Erase(1.000000000000000, 9.000000000000000, 3.000000000000000);
            tree.Erase(5.000000000000000, 6.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(0.744876958044668, 8.793709239158785, 6.449224674842809, 8.227683679446452, 6.150304196664237, 9.795510819680915, out id));
            // Step 54
            tree.Insert(1.000000000000000, 8.000000000000000, 8.000000000000000, 31);
            tree.Erase(3.000000000000000, 2.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(3.439781305406661, 8.677937468922515, 0.293318269015770, 5.954938174631805, 4.242750157512949, 6.599058713194958, out id));
            // Step 55
            tree.Erase(5.000000000000000, 3.000000000000000, 2.000000000000000);
            tree.Erase(9.000000000000000, 0.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(3.873819595797863, 4.276598487559575, 2.149256672778346, 4.460130036781795, 3.121662253396012, 9.398382637801587, out id));
            // Step 56
            tree.Erase(0.000000000000000, 10.000000000000000, 7.000000000000000);
            tree.Erase(3.000000000000000, 4.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(3.046084287348969, 9.953180145726115, 0.491130430963542, 2.529139566152670, 9.366187800516700, 9.796755460397137, out id));
            // Step 57
            tree.Insert(10.000000000000000, 1.000000000000000, 8.000000000000000, 32);
            tree.Erase(2.000000000000000, 6.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(0.036507380983950, 8.653052290826375, 3.363136770758425, 4.474106760314704, 9.191698395746881, 9.471656134637850, out id));
            // Step 58
            tree.Insert(7.000000000000000, 9.000000000000000, 5.000000000000000, 33);
            tree.Erase(0.000000000000000, 1.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(2.611987727956845, 3.695848312339034, 0.185165901258540, 2.306591934546057, 4.813903328882142, 5.784033649113290, out id));
            // Step 59
            tree.Erase(5.000000000000000, 6.000000000000000, 3.000000000000000);
            tree.Erase(8.000000000000000, 6.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(0.336825344326916, 1.265033142375732, 7.890446788387844, 8.808178539876421, 0.564750874766790, 2.290094651427882, out id));
            // Step 60
            tree.Insert(1.000000000000000, 1.000000000000000, 6.000000000000000, 34);
            tree.Erase(9.000000000000000, 3.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(0.746471858193180, 4.941470256722418, 3.892789136925527, 7.602402433856682, 2.314554434005128, 5.379258901405619, out id));
            // Step 61
            tree.Erase(1.000000000000000, 8.000000000000000, 8.000000000000000);
            tree.Erase(4.000000000000000, 5.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(5.760803596664431, 9.501598642653379, 3.962589751604849, 4.246470581582190, 2.554422132494611, 5.728784925666492, out id));
            // Step 62
            tree.Insert(5.000000000000000, 1.000000000000000, 0.000000000000000, 35);
            tree.Erase(7.000000000000000, 4.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(0.720061721442931, 7.056115880393872, 6.140843587281942, 9.904432039182344, 6.557812966194607, 9.278040624668245, out id));
            // Step 63
            tree.Insert(1.000000000000000, 7.000000000000000, 10.000000000000000, 36);
            tree.Erase(3.000000000000000, 7.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(4.633729947932159, 8.160751150823868, 0.372971973876935, 7.942360078110707, 5.066865550027701, 7.442725817628926, out id));
            // Step 64
            tree.Erase(5.000000000000000, 1.000000000000000, 0.000000000000000);
            tree.Erase(9.000000000000000, 1.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(1.986020092923901, 3.335153296604530, 3.745046055460747, 4.261169096901655, 4.124356434083211, 4.426477950686230, out id));
            // Step 65
            tree.Insert(8.000000000000000, 9.000000000000000, 8.000000000000000, 37);
            tree.Erase(9.000000000000000, 2.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(2.868838297258069, 6.551102169138543, 0.946136536370805, 7.562424800346258, 4.542128051725841, 8.736083258637436, out id));
            // Step 66
            tree.Insert(4.000000000000000, 8.000000000000000, 10.000000000000000, 38);
            tree.Erase(2.000000000000000, 6.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(4.322268269494938, 7.583982178740158, 0.701724113759824, 3.600558124115292, 4.771391150273584, 7.640596017577929, out id));
            // Step 67
            tree.Insert(8.000000000000000, 4.000000000000000, 4.000000000000000, 39);
            tree.Erase(8.000000000000000, 1.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(9.339788399715843, 9.435164278730257, 4.349969953644165, 4.658250179968989, 1.905590421507791, 9.534222800804177, out id));
            // Step 68
            tree.Erase(1.000000000000000, 1.000000000000000, 6.000000000000000);
            tree.Erase(9.000000000000000, 8.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(3.473605103999071, 8.193257162337487, 7.414028927004877, 9.795061249563886, 0.947763847441445, 1.520480970870762, out id));
            // Step 69
            tree.Insert(8.000000000000000, 7.000000000000000, 7.000000000000000, 40);
            tree.Erase(1.000000000000000, 6.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(3.122766618352863, 5.872657613294666, 1.582838359869918, 6.210633359495157, 0.342701516888629, 2.100767258846327, out id));
            // Step 70
            tree.Erase(5.000000000000000, 3.000000000000000, 0.000000000000000);
            tree.Erase(8.000000000000000, 5.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(1.257190712360756, 7.926409406578707, 4.619548304152676, 8.073170379487136, 1.873576321704851, 8.910952121469544, out id));
            // Step 71
            tree.Erase(0.000000000000000, 5.000000000000000, 9.000000000000000);
            tree.Erase(4.000000000000000, 5.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(5.662940996688440, 6.153929431202503, 1.936209479702692, 9.810636052660399, 8.625841770884076, 8.952720904218751, out id));
            // Step 72
            tree.Erase(8.000000000000000, 4.000000000000000, 4.000000000000000);
            tree.Erase(6.000000000000000, 0.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(0.716545258094387, 5.298878076918106, 0.980325345980282, 1.178717063965558, 5.688779164913994, 7.533570228276335, out id));
            // Step 73
            tree.Insert(7.000000000000000, 5.000000000000000, 6.000000000000000, 41);
            tree.Erase(6.000000000000000, 5.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(8.282837509052690, 9.083420768461135, 4.224988548987288, 5.780982131001874, 5.712495262599830, 7.414479501356407, out id));
            // Step 74
            tree.Insert(1.000000000000000, 3.000000000000000, 5.000000000000000, 42);
            tree.Erase(9.000000000000000, 4.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(0.268776748974875, 1.369044456431340, 3.016650938234218, 6.077324598671437, 2.427842490466317, 4.932546494323457, out id));
            // Step 75
            tree.Erase(8.000000000000000, 7.000000000000000, 7.000000000000000);
            tree.Erase(1.000000000000000, 1.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(3.194034307282813, 6.823585405842132, 3.870449552841256, 6.515434033695314, 0.853438228158526, 4.937551985304928, out id));
            // Step 76
            tree.Erase(7.000000000000000, 9.000000000000000, 5.000000000000000);
            tree.Erase(4.000000000000000, 3.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(0.416131495547050, 2.593177137801011, 4.379843085752432, 5.645868240225661, 2.157278021880535, 7.191902317083786, out id));
            // Step 77
            tree.Insert(2.000000000000000, 9.000000000000000, 5.000000000000000, 43);
            tree.Erase(8.000000000000000, 9.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(3.895935853002359, 9.916532983676358, 3.372181380750967, 9.620237042611562, 3.825279066741243, 6.194363070882003, out id));
            Assert.True((new List<ulong> { 41 }).Contains(id));
            // Step 78
            tree.Erase(8.000000000000000, 9.000000000000000, 8.000000000000000);
            tree.Erase(6.000000000000000, 0.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(0.000007946516253, 3.071454770898421, 2.255695403683780, 4.331339625772339, 1.159717562190917, 3.751939164183855, out id));
            // Step 79
            tree.Insert(5.000000000000000, 5.000000000000000, 0.000000000000000, 44);
            tree.Erase(2.000000000000000, 0.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(2.445301686439919, 8.621045230560815, 6.033946760656109, 8.851936522847852, 1.441122340571588, 5.236488410099403, out id));
            // Step 80
            tree.Insert(0.000000000000000, 8.000000000000000, 7.000000000000000, 45);
            tree.Erase(9.000000000000000, 5.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(0.240819909981644, 2.626134474179662, 1.056670168735959, 6.725154160429980, 9.370181876214202, 9.720360981281933, out id));
            // Step 81
            tree.Erase(0.000000000000000, 4.000000000000000, 4.000000000000000);
            tree.Erase(3.000000000000000, 2.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(7.681819257403840, 7.824545186810404, 0.561127858764588, 8.527357617649692, 6.637937757460510, 7.479575990998781, out id));
            // Step 82
            tree.Erase(10.000000000000000, 1.000000000000000, 8.000000000000000);
            tree.Erase(1.000000000000000, 1.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(3.180792818228160, 8.933446464733480, 3.423062722548478, 8.228408054035439, 2.343046424004634, 5.810724748656652, out id));
            // Step 83
            tree.Insert(9.000000000000000, 10.000000000000000, 10.000000000000000, 46);
            tree.Erase(5.000000000000000, 3.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(0.467513631099472, 2.775583287261507, 2.119600664398580, 5.628582531608910, 3.169848788024214, 9.049044700984361, out id));
            Assert.True((new List<ulong> { 42 }).Contains(id));
            // Step 84
            tree.Erase(10.000000000000000, 3.000000000000000, 2.000000000000000);
            tree.Erase(1.000000000000000, 9.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(2.296143327677428, 4.308062732548267, 4.139192154672180, 5.611062663889367, 2.441103713464225, 4.252427872704593, out id));
            // Step 85
            tree.Insert(1.000000000000000, 7.000000000000000, 4.000000000000000, 47);
            tree.Erase(4.000000000000000, 8.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(9.129309355380697, 9.162350127523144, 0.775516862979975, 3.175934678113751, 1.251236436822561, 7.649904985007260, out id));
            // Step 86
            tree.Erase(4.000000000000000, 8.000000000000000, 10.000000000000000);
            tree.Erase(0.000000000000000, 1.000000000000000, 8.000000000000000);
            Assert.True(tree.Find(1.810370367429639, 2.134071469284295, 4.557143997099267, 9.295454644039715, 2.452632079518172, 7.204152316031776, out id));
            Assert.True((new List<ulong> { 43 }).Contains(id));
            // Step 87
            tree.Erase(0.000000000000000, 8.000000000000000, 7.000000000000000);
            tree.Erase(7.000000000000000, 7.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(0.542916954247046, 2.851515085076448, 2.823465872921689, 9.933536694371055, 0.188742043386161, 7.076420139869311, out id));
            Assert.True((new List<ulong> { 42, 43, 47 }).Contains(id));
            // Step 88
            tree.Insert(1.000000000000000, 0.000000000000000, 1.000000000000000, 48);
            tree.Erase(1.000000000000000, 2.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(7.785991231540833, 9.004682450882456, 4.090869466823682, 5.583284093920550, 3.058378614592431, 3.479245721170988, out id));
            // Step 89
            tree.Insert(4.000000000000000, 5.000000000000000, 5.000000000000000, 49);
            tree.Erase(2.000000000000000, 6.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(3.433081593026985, 7.233608853982898, 2.636445040812097, 5.316519513182794, 1.046416261612558, 1.093093576311881, out id));
            // Step 90
            tree.Insert(4.000000000000000, 3.000000000000000, 8.000000000000000, 50);
            tree.Erase(3.000000000000000, 7.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(0.351541765752064, 9.440642730552316, 0.671251382290016, 4.272294645328082, 2.142911706584698, 2.453100266028999, out id));
            // Step 91
            tree.Insert(6.000000000000000, 4.000000000000000, 6.000000000000000, 51);
            tree.Erase(4.000000000000000, 8.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(5.485559701274035, 8.400928974365332, 4.397026335335399, 4.840842569632898, 1.767306406597299, 4.950087159360653, out id));
            // Step 92
            tree.Erase(1.000000000000000, 0.000000000000000, 1.000000000000000);
            tree.Erase(5.000000000000000, 3.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(0.302377412120470, 3.741422518714258, 0.449538961999741, 4.624473116430730, 4.084949160631643, 5.312718517188818, out id));
            Assert.True((new List<ulong> { 42 }).Contains(id));
            // Step 93
            tree.Insert(0.000000000000000, 9.000000000000000, 8.000000000000000, 52);
            tree.Erase(2.000000000000000, 7.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(6.244306305394649, 7.176055033501977, 1.853324837292574, 4.722908033851397, 3.037999559928267, 8.056694711377954, out id));
            // Step 94
            tree.Insert(7.000000000000000, 7.000000000000000, 8.000000000000000, 53);
            tree.Erase(0.000000000000000, 4.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(0.822640728010879, 7.782238612445039, 7.143520796415643, 7.258162823381779, 7.791707053034483, 9.759134777464539, out id));
            // Step 95
            tree.Erase(1.000000000000000, 3.000000000000000, 5.000000000000000);
            tree.Erase(2.000000000000000, 0.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(7.332643335466043, 9.549516243685620, 2.415144000656533, 3.663715601215534, 5.460175222266300, 9.550205192833847, out id));
            // Step 96
            tree.Insert(8.000000000000000, 0.000000000000000, 0.000000000000000, 54);
            tree.Erase(3.000000000000000, 6.000000000000000, 2.000000000000000);
            Assert.True(tree.Find(1.078324649908912, 5.322349734129795, 6.597142988429456, 9.232502440267062, 3.546612428162177, 8.697341623392470, out id));
            Assert.True((new List<ulong> { 43 }).Contains(id));
            // Step 97
            tree.Insert(10.000000000000000, 3.000000000000000, 9.000000000000000, 55);
            tree.Erase(7.000000000000000, 9.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(4.911387232899448, 6.150116619773548, 4.696729288509615, 8.346585883490903, 7.787999340496203, 8.346846155428356, out id));
            // Step 98
            tree.Erase(5.000000000000000, 5.000000000000000, 0.000000000000000);
            tree.Erase(4.000000000000000, 0.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(4.440228652860162, 5.929573586539560, 2.928222724414623, 7.971996201231656, 0.038653281984579, 2.741989481102979, out id));
            // Step 99
            tree.Erase(0.000000000000000, 9.000000000000000, 8.000000000000000);
            tree.Erase(8.000000000000000, 6.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(3.321920210735417, 7.350317166215254, 0.605544735109450, 5.845082165630399, 2.987178517462172, 9.211763733703901, out id));
            Assert.True((new List<ulong> { 41, 49, 50, 51 }).Contains(id));
            // Step 100
            tree.Erase(9.000000000000000, 10.000000000000000, 10.000000000000000);
            tree.Erase(0.000000000000000, 8.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(4.282777837378169, 7.649181998827936, 0.189901503622525, 2.015497638912633, 4.418666904820794, 9.542870438941190, out id));
            // Step 101
            tree.Erase(1.000000000000000, 7.000000000000000, 4.000000000000000);
            tree.Erase(0.000000000000000, 5.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(1.881694763911494, 8.597554278857034, 5.340731059433916, 6.047180625392485, 4.145863803025316, 8.016794400140920, out id));
            // Step 102
            tree.Insert(9.000000000000000, 1.000000000000000, 7.000000000000000, 56);
            tree.Erase(0.000000000000000, 1.000000000000000, 10.000000000000000);
            Assert.True(tree.Find(5.956866057375354, 6.942690495710382, 1.359317847008306, 7.454322191923840, 4.402352535026295, 8.953601706426202, out id));
            Assert.True((new List<ulong> { 51 }).Contains(id));
            // Step 103
            tree.Insert(2.000000000000000, 9.000000000000000, 6.000000000000000, 57);
            tree.Erase(0.000000000000000, 4.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(1.534230817546901, 3.855441049614596, 0.978319207421947, 2.408439837922263, 0.223369555044552, 9.219672867080998, out id));
            // Step 104
            tree.Erase(4.000000000000000, 3.000000000000000, 8.000000000000000);
            tree.Erase(1.000000000000000, 3.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(4.495842820469194, 5.451265489763161, 2.361969222720694, 7.929480940302628, 3.810982376463548, 7.718136514053020, out id));
            // Step 105
            tree.Erase(2.000000000000000, 9.000000000000000, 5.000000000000000);
            tree.Erase(8.000000000000000, 10.000000000000000, 8.000000000000000);
            Assert.True(tree.Find(6.251173545357242, 8.570654450056127, 2.733696563765926, 9.874329024525924, 3.963273733337821, 7.614909543951081, out id));
            Assert.True((new List<ulong> { 41 }).Contains(id));
            // Step 106
            tree.Insert(6.000000000000000, 2.000000000000000, 4.000000000000000, 58);
            tree.Erase(2.000000000000000, 3.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(4.367091584199868, 5.913615152356876, 5.218476238479175, 9.044580192691537, 1.889582467096310, 3.317735688243508, out id));
            // Step 107
            tree.Erase(7.000000000000000, 5.000000000000000, 6.000000000000000);
            tree.Erase(8.000000000000000, 9.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(3.981124336222170, 7.614181430305092, 1.927435922866547, 5.282938191981281, 1.731242351348085, 3.844988624560062, out id));
            // Step 108
            tree.Insert(2.000000000000000, 8.000000000000000, 5.000000000000000, 59);
            tree.Erase(3.000000000000000, 6.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(2.853024220256775, 9.746918899230442, 8.783821983714880, 9.512192573780759, 4.189206219826557, 8.369556283907722, out id));
            // Step 109
            tree.Erase(6.000000000000000, 4.000000000000000, 6.000000000000000);
            tree.Erase(1.000000000000000, 9.000000000000000, 2.000000000000000);
            Assert.True(tree.Find(1.275164490291621, 5.671638885750859, 4.924428388227842, 8.515023981891128, 1.923960991728334, 6.069194440956858, out id));
            Assert.True((new List<ulong> { 49, 59 }).Contains(id));
            // Step 110
            tree.Insert(5.000000000000000, 3.000000000000000, 10.000000000000000, 60);
            tree.Erase(8.000000000000000, 0.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(4.176131991977648, 7.234094564573458, 7.313792538938646, 8.948297290333709, 1.928950294587108, 4.887775066166840, out id));
            // Step 111
            tree.Insert(7.000000000000000, 5.000000000000000, 3.000000000000000, 61);
            tree.Erase(10.000000000000000, 9.000000000000000, 8.000000000000000);
            Assert.True(tree.Find(6.230640345818559, 9.522784465581104, 2.243203073164818, 7.315721726535744, 7.449798258676088, 9.726278525957119, out id));
            Assert.True((new List<ulong> { 53 }).Contains(id));
            // Step 112
            tree.Erase(4.000000000000000, 5.000000000000000, 5.000000000000000);
            tree.Erase(7.000000000000000, 0.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(0.039650408337357, 2.870797012108235, 2.101095175491590, 3.621450374249386, 3.748748018541739, 8.069290504900614, out id));
            // Step 113
            tree.Erase(5.000000000000000, 3.000000000000000, 10.000000000000000);
            tree.Erase(5.000000000000000, 6.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(5.872391189300437, 6.456130799039805, 0.492996183693297, 4.465669702974776, 1.492281454406810, 3.267875533591268, out id));
            // Step 114
            tree.Insert(3.000000000000000, 10.000000000000000, 3.000000000000000, 62);
            tree.Erase(6.000000000000000, 8.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(8.363875510753115, 8.744592343544777, 4.378388753148262, 6.341282232497056, 3.450091910295518, 9.403879404650366, out id));
            // Step 115
            tree.Erase(8.000000000000000, 0.000000000000000, 0.000000000000000);
            tree.Erase(0.000000000000000, 10.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(7.209193770138801, 9.599193243548703, 4.335642391710580, 7.699630292184578, 8.929554113834495, 9.123079951117621, out id));
            // Step 116
            tree.Insert(3.000000000000000, 10.000000000000000, 7.000000000000000, 63);
            tree.Erase(2.000000000000000, 10.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(2.263321265457666, 6.725178003189298, 0.269116622146429, 6.989376770178357, 3.667250191722990, 9.208465569840156, out id));
            Assert.True((new List<ulong> { 58 }).Contains(id));
            // Step 117
            tree.Insert(0.000000000000000, 7.000000000000000, 4.000000000000000, 64);
            tree.Erase(7.000000000000000, 8.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(2.669484627588262, 9.050532753761876, 1.390213818496596, 9.916452436663217, 3.913787675509115, 7.550281403023203, out id));
            Assert.True((new List<ulong> { 58 }).Contains(id));
            // Step 118
            tree.Insert(0.000000000000000, 3.000000000000000, 2.000000000000000, 65);
            tree.Erase(1.000000000000000, 10.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(3.594832808456816, 7.943988408213150, 4.806850189315846, 9.899116479696524, 0.649227412500785, 1.745544069186297, out id));
            // Step 119
            tree.Erase(9.000000000000000, 1.000000000000000, 7.000000000000000);
            tree.Erase(1.000000000000000, 2.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(3.364094192550190, 9.015776545057633, 3.714434703199865, 5.446951709268669, 4.303826119573896, 6.755406417063238, out id));
            // Step 120
            tree.Insert(2.000000000000000, 5.000000000000000, 3.000000000000000, 66);
            tree.Erase(8.000000000000000, 0.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(7.370173230257523, 9.434643423090275, 3.560321490179571, 4.137218895419296, 4.033866756364310, 4.374233087208397, out id));
            // Step 121
            tree.Insert(7.000000000000000, 3.000000000000000, 7.000000000000000, 67);
            tree.Erase(9.000000000000000, 10.000000000000000, 6.000000000000000);
            Assert.True(tree.Find(2.439575660840866, 9.676932653550603, 4.722269320705180, 7.283685278865455, 1.279459815130487, 4.527614351969687, out id));
            Assert.True((new List<ulong> { 61 }).Contains(id));
            // Step 122
            tree.Insert(8.000000000000000, 6.000000000000000, 8.000000000000000, 68);
            tree.Erase(9.000000000000000, 0.000000000000000, 7.000000000000000);
            Assert.True(tree.Find(3.613672752373973, 8.416350964821030, 1.384477148818735, 3.685546482307772, 2.517462701851945, 9.598212245183479, out id));
            Assert.True((new List<ulong> { 58, 67 }).Contains(id));
            // Step 123
            tree.Insert(10.000000000000000, 4.000000000000000, 10.000000000000000, 69);
            tree.Erase(3.000000000000000, 10.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(2.614470947066589, 9.141157511286440, 5.620195347192976, 6.769212500397447, 5.925217399294889, 7.022015512275751, out id));
            // Step 124
            tree.Insert(1.000000000000000, 9.000000000000000, 2.000000000000000, 70);
            tree.Erase(6.000000000000000, 6.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(4.761017061509401, 7.705464259280044, 3.540741421931481, 4.956281058289255, 4.192528136829888, 4.585078427493907, out id));
            // Step 125
            tree.Insert(3.000000000000000, 3.000000000000000, 0.000000000000000, 71);
            tree.Erase(3.000000000000000, 1.000000000000000, 8.000000000000000);
            Assert.True(tree.Find(6.632541481609360, 7.055240209723657, 4.866589383978165, 6.284243948232511, 0.424356492261461, 9.018527725868260, out id));
            Assert.True((new List<ulong> { 61 }).Contains(id));
            // Step 126
            tree.Insert(5.000000000000000, 9.000000000000000, 0.000000000000000, 72);
            tree.Erase(1.000000000000000, 10.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(0.929679066670994, 9.860182582695970, 2.960219212486037, 8.801148880093198, 2.161961792177362, 8.508284148289205, out id));
            Assert.True((new List<ulong> { 53, 59, 61, 66, 67, 68 }).Contains(id));
            // Step 127
            tree.Erase(7.000000000000000, 5.000000000000000, 3.000000000000000);
            tree.Erase(8.000000000000000, 0.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(2.351150600958183, 6.690651084870409, 3.458318786511779, 5.650363727051738, 4.460138179636570, 8.814436394792073, out id));
            // Step 128
            tree.Erase(5.000000000000000, 9.000000000000000, 0.000000000000000);
            tree.Erase(4.000000000000000, 10.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(3.440833433624327, 7.800247233479787, 2.238252589419617, 5.629167491393392, 4.476029756523352, 5.086391462105669, out id));
            // Step 129
            tree.Erase(3.000000000000000, 3.000000000000000, 0.000000000000000);
            tree.Erase(4.000000000000000, 2.000000000000000, 8.000000000000000);
            Assert.True(tree.Find(0.091231977036235, 9.188536830412664, 0.412324234672377, 9.276861265753601, 5.685152959331373, 6.459346718171086, out id));
            Assert.True((new List<ulong> { 57 }).Contains(id));
            // Step 130
            tree.Erase(1.000000000000000, 7.000000000000000, 10.000000000000000);
            tree.Erase(9.000000000000000, 5.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(5.895061810153416, 6.312410585700881, 1.278700076917069, 8.106156545076702, 4.704528917286169, 7.672926359414067, out id));
            // Step 131
            tree.Insert(7.000000000000000, 5.000000000000000, 5.000000000000000, 73);
            tree.Erase(7.000000000000000, 3.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(3.013259564522544, 5.171113790539121, 5.461113496843416, 5.856227423818652, 5.902076924779661, 9.524056309633743, out id));
            // Step 132
            tree.Insert(5.000000000000000, 10.000000000000000, 4.000000000000000, 74);
            tree.Erase(5.000000000000000, 5.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(0.273215259629498, 0.569388695645882, 1.596648792936862, 4.428592218952848, 5.909337635549572, 6.631187708602853, out id));
            // Step 133
            tree.Erase(10.000000000000000, 3.000000000000000, 9.000000000000000);
            tree.Erase(1.000000000000000, 2.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(4.740431161225458, 7.070783666992297, 0.742867542817893, 8.607668445127297, 0.344720075244321, 7.978016685212886, out id));
            Assert.True((new List<ulong> { 58, 67, 73 }).Contains(id));
            // Step 134
            tree.Erase(2.000000000000000, 5.000000000000000, 3.000000000000000);
            tree.Erase(1.000000000000000, 6.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(1.408851507490271, 4.658188490681015, 0.115827449659573, 5.162662082293786, 2.024446627974295, 3.746890891808445, out id));
            // Step 135
            tree.Erase(2.000000000000000, 9.000000000000000, 6.000000000000000);
            tree.Erase(4.000000000000000, 7.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(9.151876917878637, 9.618222785760613, 3.734412445813440, 5.906159018765781, 4.012651931280522, 5.050126481041049, out id));
            // Step 136
            tree.Erase(7.000000000000000, 7.000000000000000, 8.000000000000000);
            tree.Erase(2.000000000000000, 10.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(8.515741711966513, 9.696926306130440, 4.679654979325234, 6.590213084650869, 0.274294534232196, 5.280592532925667, out id));
            // Step 137
            tree.Insert(7.000000000000000, 10.000000000000000, 1.000000000000000, 75);
            tree.Erase(3.000000000000000, 1.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(2.184124820360049, 5.455650747251278, 4.609101680534082, 5.389426542998916, 1.845214391090279, 5.612713241184522, out id));
            // Step 138
            tree.Erase(0.000000000000000, 7.000000000000000, 4.000000000000000);
            tree.Erase(3.000000000000000, 9.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(4.466300405909173, 7.301739012025614, 5.177731491010001, 7.748307059486381, 7.110466391065850, 9.402844784846099, out id));
            // Step 139
            tree.Erase(6.000000000000000, 2.000000000000000, 4.000000000000000);
            tree.Erase(7.000000000000000, 4.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(1.392662875218191, 3.888947312967991, 2.025634440748489, 8.581206105934710, 7.601406967888949, 9.050053316720795, out id));
            // Step 140
            tree.Insert(5.000000000000000, 6.000000000000000, 5.000000000000000, 76);
            tree.Erase(6.000000000000000, 6.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(2.756881961760316, 4.772660569427529, 2.350586205414431, 7.662057681336191, 1.582852206723063, 5.056414059926918, out id));
            // Step 141
            tree.Erase(7.000000000000000, 3.000000000000000, 7.000000000000000);
            tree.Erase(7.000000000000000, 3.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(2.362028105629403, 8.740837156732255, 1.433220988566930, 8.492861501752330, 3.108614975228352, 9.770450208642597, out id));
            Assert.True((new List<ulong> { 68, 73, 76 }).Contains(id));
            // Step 142
            tree.Insert(5.000000000000000, 5.000000000000000, 7.000000000000000, 77);
            tree.Erase(1.000000000000000, 5.000000000000000, 7.000000000000000);
            Assert.True(tree.Find(7.235586491191663, 9.186804127299874, 1.767436314339919, 6.544400901611224, 0.102683100924457, 9.036373839733766, out id));
            Assert.True((new List<ulong> { 68 }).Contains(id));
            // Step 143
            tree.Insert(1.000000000000000, 5.000000000000000, 3.000000000000000, 78);
            tree.Erase(10.000000000000000, 4.000000000000000, 1.000000000000000);
            Assert.True(tree.Find(0.230678764671886, 8.099844368638102, 2.234307668909095, 5.132465842032857, 1.971223754382458, 4.592882916377431, out id));
            Assert.True((new List<ulong> { 78 }).Contains(id));
            // Step 144
            tree.Insert(5.000000000000000, 8.000000000000000, 2.000000000000000, 79);
            tree.Erase(5.000000000000000, 9.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(5.552646283409634, 9.833296178332077, 1.788338941711054, 7.927398852243288, 4.369400580089463, 6.899678378827118, out id));
            Assert.True((new List<ulong> { 73 }).Contains(id));
            // Step 145
            tree.Insert(9.000000000000000, 2.000000000000000, 9.000000000000000, 80);
            tree.Erase(3.000000000000000, 2.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(2.848204687241155, 6.578431999099873, 5.870597715968247, 9.754700639003900, 0.827330323267740, 3.444241600710699, out id));
            Assert.True((new List<ulong> { 79 }).Contains(id));
            // Step 146
            tree.Insert(8.000000000000000, 3.000000000000000, 2.000000000000000, 81);
            tree.Erase(9.000000000000000, 3.000000000000000, 1.000000000000000);
            Assert.True(tree.Find(2.061182610922598, 6.848084578396604, 1.594765938925778, 6.445777803173317, 6.104770087462471, 7.495890431932163, out id));
            Assert.True((new List<ulong> { 77 }).Contains(id));
            // Step 147
            tree.Insert(2.000000000000000, 4.000000000000000, 0.000000000000000, 82);
            tree.Erase(7.000000000000000, 2.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(5.508549997168172, 9.441714960943834, 3.814671615369552, 4.039312801570434, 5.560086063906709, 8.679890277885063, out id));
            // Step 148
            tree.Erase(7.000000000000000, 5.000000000000000, 5.000000000000000);
            tree.Erase(2.000000000000000, 7.000000000000000, 8.000000000000000);
            Assert.True(tree.Find(4.462833960829407, 9.103251587913155, 2.352084983635752, 5.356801199641314, 3.106990527999967, 7.601704796388180, out id));
            Assert.True((new List<ulong> { 77 }).Contains(id));
            // Step 149
            tree.Insert(10.000000000000000, 1.000000000000000, 9.000000000000000, 83);
            tree.Erase(8.000000000000000, 9.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(3.822716497675538, 6.705587732957627, 8.258772206817635, 8.620046354302605, 1.220031295788241, 8.831617686897532, out id));
            // Step 150
            tree.Erase(8.000000000000000, 3.000000000000000, 2.000000000000000);
            tree.Erase(9.000000000000000, 3.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(2.815967572541481, 6.942401372107366, 5.515166844019845, 7.185441178772756, 3.244920019592143, 5.956587452164755, out id));
            Assert.True((new List<ulong> { 76 }).Contains(id));
            // Step 151
            tree.Insert(9.000000000000000, 5.000000000000000, 1.000000000000000, 84);
            tree.Erase(7.000000000000000, 1.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(5.083065758114868, 9.799095707770677, 1.469027892066559, 2.525770998377310, 5.688481908057273, 7.654521745728230, out id));
            // Step 152
            tree.Erase(5.000000000000000, 8.000000000000000, 2.000000000000000);
            tree.Erase(8.000000000000000, 6.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(1.352674450512394, 9.642208346995734, 0.772674425828080, 4.890980563084963, 0.618318867242377, 2.119728326111079, out id));
            // Step 153
            tree.Erase(10.000000000000000, 1.000000000000000, 9.000000000000000);
            tree.Erase(9.000000000000000, 9.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(2.660743867024873, 2.805090288786784, 5.920687482473682, 6.930619310363031, 6.784340250939404, 9.413642152339326, out id));
            // Step 154
            tree.Erase(5.000000000000000, 10.000000000000000, 4.000000000000000);
            tree.Erase(9.000000000000000, 4.000000000000000, 7.000000000000000);
            Assert.True(tree.Find(0.867632409411639, 7.152793634665599, 0.842133612157566, 5.516182839205350, 5.843904823213003, 8.767506364614237, out id));
            Assert.True((new List<ulong> { 77 }).Contains(id));
            // Step 155
            tree.Erase(2.000000000000000, 4.000000000000000, 0.000000000000000);
            tree.Erase(0.000000000000000, 7.000000000000000, 0.000000000000000);
            Assert.True(tree.Find(4.940473198532210, 9.009426334779320, 1.791637977260909, 5.814595820769165, 0.408315880082478, 1.739353777130352, out id));
            Assert.True((new List<ulong> { 84 }).Contains(id));
            // Step 156
            tree.Erase(3.000000000000000, 10.000000000000000, 7.000000000000000);
            tree.Erase(5.000000000000000, 3.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(3.327850034996026, 5.413919356018252, 7.998108255553420, 9.631658158104576, 4.343869507226876, 8.729884906517903, out id));
            // Step 157
            tree.Erase(9.000000000000000, 5.000000000000000, 1.000000000000000);
            tree.Erase(6.000000000000000, 4.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(0.460507695947994, 5.492648382541039, 6.000954736919208, 6.688473581146694, 1.025918549746518, 8.984093429130111, out id));
            // Step 158
            tree.Insert(7.000000000000000, 0.000000000000000, 9.000000000000000, 85);
            tree.Erase(4.000000000000000, 6.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(5.636148993166426, 8.670572858484606, 7.386409594358238, 9.663832298867748, 5.565427368568080, 5.850381851101999, out id));
            // Step 159
            tree.Insert(9.000000000000000, 8.000000000000000, 5.000000000000000, 86);
            tree.Erase(8.000000000000000, 8.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(6.250414080906390, 7.265685610663869, 2.456451393252840, 8.355477759079058, 0.135287998966853, 4.621829150951294, out id));
            // Step 160
            tree.Erase(5.000000000000000, 5.000000000000000, 7.000000000000000);
            tree.Erase(2.000000000000000, 7.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(7.520544885070183, 7.616393867338943, 2.206200412382159, 4.257262224051201, 2.405177882877764, 3.606017616275695, out id));
            // Step 161
            tree.Insert(8.000000000000000, 2.000000000000000, 8.000000000000000, 87);
            tree.Erase(1.000000000000000, 8.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(3.804470774703669, 5.769448353281383, 2.742861560411858, 3.808972576489980, 0.471750626747195, 1.695291637370144, out id));
            // Step 162
            tree.Insert(8.000000000000000, 1.000000000000000, 2.000000000000000, 88);
            tree.Erase(0.000000000000000, 8.000000000000000, 4.000000000000000);
            Assert.True(tree.Find(3.315581819030911, 7.794211208865071, 5.805961943178964, 8.816245527502762, 4.880346255797084, 5.445685475572092, out id));
            Assert.True((new List<ulong> { 76 }).Contains(id));
            // Step 163
            tree.Insert(4.000000000000000, 2.000000000000000, 5.000000000000000, 89);
            tree.Erase(9.000000000000000, 9.000000000000000, 1.000000000000000);
            Assert.True(tree.Find(4.500552012377874, 6.785802153459670, 0.073923578006807, 9.874480695645200, 1.859979926353809, 7.791330367324517, out id));
            Assert.True((new List<ulong> { 76 }).Contains(id));
            // Step 164
            tree.Insert(2.000000000000000, 5.000000000000000, 8.000000000000000, 90);
            tree.Erase(5.000000000000000, 4.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(2.140958860027191, 3.875943980677373, 3.925291760443045, 9.311512854627710, 6.618077535372608, 9.851839661099728, out id));
            // Step 165
            tree.Erase(1.000000000000000, 5.000000000000000, 3.000000000000000);
            tree.Erase(0.000000000000000, 0.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(0.247090623698727, 9.593615347722505, 2.721677052063826, 9.907958480388009, 8.556620255198311, 9.393448571861974, out id));
            // Step 166
            tree.Insert(6.000000000000000, 1.000000000000000, 4.000000000000000, 91);
            tree.Erase(3.000000000000000, 0.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(7.508623093834269, 9.186762155110159, 3.698485938583898, 9.282310409574752, 2.013898853196171, 9.909009576253812, out id));
            Assert.True((new List<ulong> { 68, 86 }).Contains(id));
            // Step 167
            tree.Erase(8.000000000000000, 6.000000000000000, 8.000000000000000);
            tree.Erase(8.000000000000000, 9.000000000000000, 10.000000000000000);
            Assert.True(tree.Find(1.426200144734208, 9.983677251534912, 0.217197715213626, 4.490170444958896, 0.934890381042304, 7.162035568903768, out id));
            Assert.True((new List<ulong> { 88, 89, 91 }).Contains(id));
            // Step 168
            tree.Erase(8.000000000000000, 2.000000000000000, 8.000000000000000);
            tree.Erase(0.000000000000000, 10.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(4.008745327748118, 4.806264307607774, 0.648004627476073, 1.589814179306399, 6.119801577965129, 6.241547521099456, out id));
            // Step 169
            tree.Insert(9.000000000000000, 7.000000000000000, 4.000000000000000, 92);
            tree.Erase(4.000000000000000, 8.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(6.615982010909697, 7.892244909898664, 1.413334037087095, 5.281283872797404, 0.790446148591465, 9.810181992184704, out id));
            // Step 170
            tree.Erase(9.000000000000000, 8.000000000000000, 5.000000000000000);
            tree.Erase(5.000000000000000, 6.000000000000000, 7.000000000000000);
            Assert.True(tree.Find(0.327396023479561, 2.921222477779211, 4.820858734550905, 8.338502973415675, 5.714288543399821, 9.240495673329995, out id));
            Assert.True((new List<ulong> { 90 }).Contains(id));
            // Step 171
            tree.Insert(10.000000000000000, 1.000000000000000, 4.000000000000000, 93);
            tree.Erase(0.000000000000000, 2.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(4.074467131963322, 5.043711709278424, 3.090876213875191, 8.651187217143951, 1.833751940533781, 8.525752295539780, out id));
            Assert.True((new List<ulong> { 76 }).Contains(id));
            // Step 172
            tree.Insert(9.000000000000000, 3.000000000000000, 4.000000000000000, 94);
            tree.Erase(1.000000000000000, 4.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(2.249486590334437, 3.859727518710660, 1.550033526292793, 5.397586687542068, 0.083005104434480, 0.798753757149954, out id));
            // Step 173
            tree.Erase(2.000000000000000, 8.000000000000000, 5.000000000000000);
            tree.Erase(5.000000000000000, 6.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(4.885543550785875, 7.020169237256280, 0.389346958655653, 7.106194959186908, 0.179567005253731, 6.720852047716944, out id));
            Assert.True((new List<ulong> { 76, 91 }).Contains(id));
            // Step 174
            tree.Insert(0.000000000000000, 7.000000000000000, 4.000000000000000, 95);
            tree.Erase(9.000000000000000, 2.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(2.551737438259495, 3.038289946693491, 7.827099887736509, 8.849429324510188, 7.743327175017189, 8.351513183286436, out id));
            // Step 175
            tree.Insert(8.000000000000000, 9.000000000000000, 7.000000000000000, 96);
            tree.Erase(10.000000000000000, 7.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(1.407054595645627, 5.767772964110308, 3.329851307753505, 9.865883473381240, 5.050278668819937, 5.375310204739519, out id));
            // Step 176
            tree.Erase(0.000000000000000, 3.000000000000000, 2.000000000000000);
            tree.Erase(10.000000000000000, 1.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(6.301608493832330, 7.592210658267157, 1.667590039818713, 6.413805390292414, 5.642321720438459, 5.763945881492385, out id));
            // Step 177
            tree.Insert(2.000000000000000, 2.000000000000000, 1.000000000000000, 97);
            tree.Erase(6.000000000000000, 7.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(1.382026141813586, 2.216954890273489, 5.127937927273242, 5.946408837354475, 1.951711759970900, 4.884262815066686, out id));
            // Step 178
            tree.Insert(7.000000000000000, 3.000000000000000, 2.000000000000000, 98);
            tree.Erase(3.000000000000000, 5.000000000000000, 8.000000000000000);
            Assert.True(tree.Find(2.381767110462649, 9.807404871943881, 2.480895337277475, 9.441306515807749, 2.166967052077677, 6.717700503347896, out id));
            Assert.True((new List<ulong> { 76, 92, 94 }).Contains(id));
            // Step 179
            tree.Erase(3.000000000000000, 10.000000000000000, 3.000000000000000);
            tree.Erase(0.000000000000000, 0.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(0.577761473016990, 1.085039646782749, 4.053893701311973, 4.713634737112100, 2.589544728790358, 6.040908863716036, out id));
            // Step 180
            tree.Erase(7.000000000000000, 3.000000000000000, 2.000000000000000);
            tree.Erase(8.000000000000000, 3.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(1.035223048426503, 1.161995648988204, 2.038956590448702, 3.312177491192900, 3.955884517089274, 7.567059396408869, out id));
            // Step 181
            tree.Erase(1.000000000000000, 9.000000000000000, 2.000000000000000);
            tree.Erase(3.000000000000000, 5.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(0.113323422687843, 4.625291802077483, 1.425477139729813, 1.498064886777436, 1.869942752222472, 6.476921017204377, out id));
            // Step 182
            tree.Erase(2.000000000000000, 5.000000000000000, 8.000000000000000);
            tree.Erase(8.000000000000000, 8.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(1.828344818655738, 6.945724008837474, 3.428324260116919, 6.505991891785218, 6.121472017590140, 7.143239582795662, out id));
            // Step 183
            tree.Erase(5.000000000000000, 6.000000000000000, 5.000000000000000);
            tree.Erase(9.000000000000000, 4.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(0.886982533406669, 3.332115155451564, 3.654231445002907, 7.765234323985065, 4.462219918953259, 5.465267337302984, out id));
            // Step 184
            tree.Erase(8.000000000000000, 1.000000000000000, 2.000000000000000);
            tree.Erase(5.000000000000000, 7.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(4.807586640001014, 6.135790901569258, 2.510066452224296, 2.857248763035090, 1.225695597502885, 4.548285516952152, out id));
            // Step 185
            tree.Erase(0.000000000000000, 7.000000000000000, 4.000000000000000);
            tree.Erase(3.000000000000000, 2.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(0.361820081508595, 4.676482753999103, 3.775664352286126, 7.186367516960010, 8.344628006008131, 9.198341926403728, out id));
            // Step 186
            tree.Erase(9.000000000000000, 7.000000000000000, 4.000000000000000);
            tree.Erase(7.000000000000000, 9.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(6.701587561541791, 7.392737206720091, 1.739779999960736, 8.185104021027120, 4.107779013265027, 7.354404982635340, out id));
            // Step 187
            tree.Erase(2.000000000000000, 2.000000000000000, 1.000000000000000);
            tree.Erase(0.000000000000000, 5.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(4.473595753756258, 4.533823825930742, 3.488397178548306, 7.305807820800014, 4.877418874237240, 6.325717886648182, out id));
            // Step 188
            tree.Insert(8.000000000000000, 0.000000000000000, 1.000000000000000, 99);
            tree.Erase(7.000000000000000, 1.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(1.337647315907708, 3.262188105267495, 3.092822154760579, 8.693005064750391, 1.408812507765175, 4.653278896832322, out id));
            // Step 189
            tree.Insert(1.000000000000000, 9.000000000000000, 8.000000000000000, 100);
            tree.Erase(8.000000000000000, 8.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(3.039325121078003, 7.668563951460094, 3.878761452975352, 4.101135612298384, 1.805446246916047, 2.054033864766284, out id));
            // Step 190
            tree.Erase(9.000000000000000, 2.000000000000000, 9.000000000000000);
            tree.Erase(9.000000000000000, 6.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(2.953227312176777, 3.378494583897643, 0.695520538770105, 2.402728807936125, 6.269224702636572, 9.856274934833248, out id));
            // Step 191
            tree.Insert(9.000000000000000, 10.000000000000000, 7.000000000000000, 101);
            tree.Erase(3.000000000000000, 1.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(4.737174386198781, 6.935713675384977, 1.595843655605534, 1.823333591287095, 6.750319958774032, 8.540117828185601, out id));
            // Step 192
            tree.Insert(1.000000000000000, 1.000000000000000, 6.000000000000000, 102);
            tree.Erase(0.000000000000000, 2.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(1.401878005370270, 2.762960877576233, 0.021772370216340, 6.842205059141014, 2.482063449301106, 7.028530947295847, out id));
            // Step 193
            tree.Insert(8.000000000000000, 10.000000000000000, 10.000000000000000, 103);
            tree.Erase(6.000000000000000, 8.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(0.705256167440941, 3.713340911460493, 6.787119024193684, 8.767744449897600, 3.234476414181067, 4.060262594328838, out id));
            // Step 194
            tree.Insert(3.000000000000000, 2.000000000000000, 10.000000000000000, 104);
            tree.Erase(6.000000000000000, 10.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(1.730805281649834, 4.775737452852744, 6.113778224021953, 7.872251479276762, 3.247592259117080, 5.625626809796557, out id));
            // Step 195
            tree.Erase(9.000000000000000, 10.000000000000000, 7.000000000000000);
            tree.Erase(1.000000000000000, 6.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(2.521603816258443, 5.261894206303785, 6.319333043629364, 9.679134296501337, 2.719901170406583, 6.677179993611185, out id));
            // Step 196
            tree.Insert(2.000000000000000, 1.000000000000000, 2.000000000000000, 105);
            tree.Erase(9.000000000000000, 9.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(2.650751775414887, 8.758993419795173, 6.140328853142472, 7.236624067681099, 1.339315192881562, 9.733697215963327, out id));
            // Step 197
            tree.Erase(1.000000000000000, 9.000000000000000, 8.000000000000000);
            tree.Erase(2.000000000000000, 7.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(7.849719189007375, 8.722557134897786, 1.126998283615679, 7.621156867308613, 5.878524824283289, 8.376605425878726, out id));
            // Step 198
            tree.Insert(0.000000000000000, 0.000000000000000, 5.000000000000000, 106);
            tree.Erase(6.000000000000000, 6.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(3.470964736646196, 7.146435139415310, 1.635027997483652, 9.055762887239590, 1.304484341739246, 4.488850961789957, out id));
            // Step 199
            tree.Insert(1.000000000000000, 3.000000000000000, 5.000000000000000, 107);
            tree.Erase(9.000000000000000, 10.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(7.062596135376714, 9.279402647683080, 0.054175239781751, 5.577512802980845, 9.005417078890702, 9.491369356771420, out id));
            // Step 200
            tree.Insert(10.000000000000000, 6.000000000000000, 0.000000000000000, 108);
            tree.Erase(2.000000000000000, 3.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(3.891965325031259, 8.805588638973578, 4.872508257468718, 8.402385077070896, 5.570609645929184, 7.461704567112641, out id));
        }

        [Fact]
        public void Dictionary2dTest()
        {
            var tree = new AdaptiveGrid.Dictionary2d();
            ulong id;

            // Step 1
            tree.Insert(10.000000000000000, 3.000000000000000, 1);
            tree.Erase(9.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(2.188335840913183, 5.665417755480634, 6.034071720888596, 9.629447866662256, out id));
            // Step 2
            tree.Insert(2.000000000000000, 1.000000000000000, 2);
            tree.Erase(9.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(6.890378961926462, 7.897758208700163, 4.088129176951833, 6.933923661472686, out id));
            // Step 3
            tree.Insert(5.000000000000000, 9.000000000000000, 3);
            tree.Erase(6.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(2.001903873662214, 5.696821052274863, 6.311481442016734, 9.045232317501398, out id));
            Assert.True((new List<ulong> { 3 }).Contains(id));
            // Step 4
            tree.Insert(8.000000000000000, 10.000000000000000, 4);
            tree.Erase(6.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(7.280787424581242, 8.142276560983548, 3.416632785232446, 7.769533068454868, out id));
            // Step 5
            tree.Erase(8.000000000000000, 10.000000000000000);
            tree.Erase(3.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(2.694187263784272, 3.437455255703986, 0.673747152677981, 0.881115070380403, out id));
            // Step 6
            tree.Insert(8.000000000000000, 4.000000000000000, 5);
            tree.Erase(5.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(0.863555929062350, 1.611730233177857, 0.213028871019811, 6.021189346240058, out id));
            // Step 7
            tree.Insert(3.000000000000000, 1.000000000000000, 6);
            tree.Erase(4.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(1.023764098929446, 1.136615072420466, 5.175024587853133, 6.960353944900946, out id));
            // Step 8
            tree.Erase(5.000000000000000, 9.000000000000000);
            tree.Erase(1.000000000000000, 10.000000000000000);
            Assert.True(tree.Find(6.414178198615065, 9.472856430876552, 3.883019096692197, 9.470688171870595, out id));
            Assert.True((new List<ulong> { 5 }).Contains(id));
            // Step 9
            tree.Insert(5.000000000000000, 4.000000000000000, 7);
            tree.Erase(5.000000000000000, 1.000000000000000);
            Assert.True(tree.Find(6.669120510688877, 8.818373745277556, 3.257921203740439, 9.130362345120778, out id));
            Assert.True((new List<ulong> { 5 }).Contains(id));
            // Step 10
            tree.Insert(2.000000000000000, 9.000000000000000, 8);
            tree.Erase(8.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(2.397617638085301, 7.951367534645065, 4.994654294970911, 7.170842854702181, out id));
            // Step 11
            tree.Erase(2.000000000000000, 9.000000000000000);
            tree.Erase(2.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(2.298953014925337, 4.542821006542316, 4.416337268526453, 7.552595798788735, out id));
            // Step 12
            tree.Insert(2.000000000000000, 5.000000000000000, 9);
            tree.Erase(7.000000000000000, 0.000000000000000);
            Assert.True(tree.Find(1.325120675284264, 3.357429669567305, 0.903594174521473, 7.012420344982812, out id));
            Assert.True((new List<ulong> { 2, 6, 9 }).Contains(id));
            // Step 13
            tree.Erase(2.000000000000000, 1.000000000000000);
            tree.Erase(7.000000000000000, 4.000000000000000);
            Assert.True(tree.Find(1.490443893385683, 6.385978934422020, 4.364193403123908, 5.963838801378268, out id));
            Assert.True((new List<ulong> { 9 }).Contains(id));
            // Step 14
            tree.Insert(9.000000000000000, 9.000000000000000, 10);
            tree.Erase(1.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(2.074219078958403, 2.989549889267472, 0.325009454599362, 1.545574588203258, out id));
            // Step 15
            tree.Insert(10.000000000000000, 7.000000000000000, 11);
            tree.Erase(7.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(3.296970718044399, 7.033657758706689, 3.891322799019103, 9.212489685190491, out id));
            Assert.True((new List<ulong> { 7 }).Contains(id));
            // Step 16
            tree.Insert(7.000000000000000, 10.000000000000000, 12);
            tree.Erase(5.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(6.258921167485632, 8.395051620214772, 6.507838444911465, 6.801949409908746, out id));
            // Step 17
            tree.Insert(5.000000000000000, 0.000000000000000, 13);
            tree.Erase(1.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(0.717236659284667, 2.016155301222059, 1.640156058632718, 6.634722081639836, out id));
            Assert.True((new List<ulong> { 9 }).Contains(id));
            // Step 18
            tree.Erase(10.000000000000000, 7.000000000000000);
            tree.Erase(5.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(7.258285127199589, 9.598808437618038, 7.507509890047817, 9.466333143995815, out id));
            Assert.True((new List<ulong> { 10 }).Contains(id));
            // Step 19
            tree.Insert(6.000000000000000, 5.000000000000000, 14);
            tree.Erase(2.000000000000000, 0.000000000000000);
            Assert.True(tree.Find(2.476661046092859, 8.452052646843708, 0.784942402169823, 2.044442460196176, out id));
            Assert.True((new List<ulong> { 6 }).Contains(id));
            // Step 20
            tree.Insert(3.000000000000000, 5.000000000000000, 15);
            tree.Erase(0.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(0.574404751101457, 6.573644918701903, 5.084117705762269, 6.643480177967199, out id));
            // Step 21
            tree.Insert(1.000000000000000, 6.000000000000000, 16);
            tree.Erase(9.000000000000000, 5.000000000000000);
            Assert.True(tree.Find(7.347344212363341, 9.816043887269551, 3.146355866226480, 6.896299304508576, out id));
            Assert.True((new List<ulong> { 5 }).Contains(id));
            // Step 22
            tree.Erase(3.000000000000000, 5.000000000000000);
            tree.Erase(6.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(4.663372189966876, 7.699804678387859, 1.379824981057697, 5.430562086944360, out id));
            Assert.True((new List<ulong> { 7, 14 }).Contains(id));
            // Step 23
            tree.Erase(9.000000000000000, 9.000000000000000);
            tree.Erase(4.000000000000000, 6.000000000000000);
            Assert.True(tree.Find(0.845936536256332, 4.041132049282475, 3.484728419830667, 9.547258852654503, out id));
            Assert.True((new List<ulong> { 9, 16 }).Contains(id));
            // Step 24
            tree.Erase(1.000000000000000, 6.000000000000000);
            tree.Erase(10.000000000000000, 6.000000000000000);
            Assert.True(tree.Find(2.917570595206635, 5.471516672488389, 0.005838584014340, 4.084603816228344, out id));
            Assert.True((new List<ulong> { 6, 7 }).Contains(id));
            // Step 25
            tree.Insert(3.000000000000000, 3.000000000000000, 17);
            tree.Erase(5.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(6.869341172753709, 8.496110061518253, 3.173831454552432, 3.474836950765391, out id));
            // Step 26
            tree.Insert(9.000000000000000, 7.000000000000000, 18);
            tree.Erase(9.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(4.526116539331938, 5.873516579307159, 4.568401522271772, 9.624208545014042, out id));
            // Step 27
            tree.Insert(7.000000000000000, 9.000000000000000, 19);
            tree.Erase(10.000000000000000, 5.000000000000000);
            Assert.True(tree.Find(5.533229811784274, 8.943440374462666, 0.530756741588370, 4.340701775626792, out id));
            Assert.True((new List<ulong> { 5 }).Contains(id));
            // Step 28
            tree.Insert(6.000000000000000, 0.000000000000000, 20);
            tree.Erase(4.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(1.643634920100602, 1.908265818782879, 5.710976744278547, 9.624608556266404, out id));
            // Step 29
            tree.Erase(9.000000000000000, 7.000000000000000);
            tree.Erase(4.000000000000000, 6.000000000000000);
            Assert.True(tree.Find(5.898758292568846, 9.453481251032731, 4.140309736699890, 6.396504745778358, out id));
            Assert.True((new List<ulong> { 14 }).Contains(id));
            // Step 30
            tree.Erase(5.000000000000000, 4.000000000000000);
            tree.Erase(1.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(2.334678056372076, 2.635656891455593, 3.623370944565801, 5.838803584018849, out id));
            // Step 31
            tree.Erase(6.000000000000000, 5.000000000000000);
            tree.Erase(4.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(1.971104163095518, 4.548575092739839, 4.738334049402916, 7.665046046624959, out id));
            Assert.True((new List<ulong> { 9 }).Contains(id));
            // Step 32
            tree.Insert(2.000000000000000, 4.000000000000000, 21);
            tree.Erase(5.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(9.101419574642996, 9.678301101037283, 4.894252067586783, 7.980539834866161, out id));
            // Step 33
            tree.Insert(2.000000000000000, 6.000000000000000, 22);
            tree.Erase(6.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(5.004058510269481, 8.936287620032276, 4.204920146733961, 8.747932699252701, out id));
            // Step 34
            tree.Insert(4.000000000000000, 5.000000000000000, 23);
            tree.Erase(7.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(3.484821810954120, 7.645410993833437, 1.396815420447888, 3.267530872881628, out id));
            // Step 35
            tree.Erase(4.000000000000000, 5.000000000000000);
            tree.Erase(1.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(4.857481248251903, 4.869448961201628, 6.462399210185723, 7.526854348502710, out id));
            // Step 36
            tree.Insert(6.000000000000000, 9.000000000000000, 24);
            tree.Erase(1.000000000000000, 5.000000000000000);
            Assert.True(tree.Find(5.519881881735288, 9.232268518501494, 2.964180050645732, 7.840228682246537, out id));
            Assert.True((new List<ulong> { 5 }).Contains(id));
            // Step 37
            tree.Erase(6.000000000000000, 9.000000000000000);
            tree.Erase(5.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(9.503321881432699, 9.997103642485692, 4.832282512156846, 6.235865884729032, out id));
            // Step 38
            tree.Erase(10.000000000000000, 3.000000000000000);
            tree.Erase(3.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(4.106370698175894, 7.029997941247323, 4.088256284677373, 8.230610616545848, out id));
            // Step 39
            tree.Erase(3.000000000000000, 3.000000000000000);
            tree.Erase(2.000000000000000, 10.000000000000000);
            Assert.True(tree.Find(1.898565026295771, 8.768881653416297, 8.313456340533502, 9.949622929366480, out id));
            Assert.True((new List<ulong> { 19 }).Contains(id));
            // Step 40
            tree.Erase(2.000000000000000, 5.000000000000000);
            tree.Erase(1.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(1.054513731034482, 1.883518828431427, 6.475984920987096, 8.619749840791300, out id));
            // Step 41
            tree.Insert(6.000000000000000, 8.000000000000000, 25);
            tree.Erase(4.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(3.069375249504741, 5.068182140737298, 2.875583307341467, 6.858077325179130, out id));
            // Step 42
            tree.Erase(7.000000000000000, 9.000000000000000);
            tree.Erase(4.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(4.271719138541207, 6.902790848362359, 6.296962715259598, 6.716904703311547, out id));
            // Step 43
            tree.Erase(7.000000000000000, 10.000000000000000);
            tree.Erase(7.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(4.808521959663661, 8.401963040356401, 4.683561817525046, 5.896446812878192, out id));
            // Step 44
            tree.Insert(2.000000000000000, 0.000000000000000, 26);
            tree.Erase(7.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(8.024116554877889, 8.131988917020475, 2.469469547455825, 4.533174207104780, out id));
            // Step 45
            tree.Insert(1.000000000000000, 10.000000000000000, 27);
            tree.Erase(10.000000000000000, 5.000000000000000);
            Assert.True(tree.Find(4.972545514027759, 9.016348444913318, 2.924204777666952, 8.714058288576625, out id));
            Assert.True((new List<ulong> { 5, 25 }).Contains(id));
            // Step 46
            tree.Erase(2.000000000000000, 6.000000000000000);
            tree.Erase(2.000000000000000, 10.000000000000000);
            Assert.True(tree.Find(0.260778483303967, 3.142104240681891, 3.177970799973523, 5.155922182568805, out id));
            Assert.True((new List<ulong> { 21 }).Contains(id));
            // Step 47
            tree.Insert(7.000000000000000, 1.000000000000000, 28);
            tree.Erase(7.000000000000000, 2.000000000000000);
            Assert.True(tree.Find(7.371160825272795, 8.367896675330339, 2.736249375715284, 4.278646488158802, out id));
            Assert.True((new List<ulong> { 5 }).Contains(id));
            // Step 48
            tree.Erase(5.000000000000000, 0.000000000000000);
            tree.Erase(10.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(4.609139164903433, 7.166624861626536, 3.962747911435430, 6.955879476762971, out id));
            // Step 49
            tree.Insert(2.000000000000000, 10.000000000000000, 29);
            tree.Erase(2.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(2.906129149301424, 3.083679344620267, 6.793535554205023, 7.148198917126852, out id));
            // Step 50
            tree.Insert(10.000000000000000, 4.000000000000000, 30);
            tree.Erase(7.000000000000000, 10.000000000000000);
            Assert.True(tree.Find(1.067390824241888, 9.782753398120915, 3.327951256274390, 9.320177482110935, out id));
            Assert.True((new List<ulong> { 5, 21, 25 }).Contains(id));
            // Step 51
            tree.Erase(6.000000000000000, 8.000000000000000);
            tree.Erase(3.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(4.005707659718062, 4.155838907984847, 3.321895909551343, 5.739626726607543, out id));
            // Step 52
            tree.Insert(9.000000000000000, 3.000000000000000, 31);
            tree.Erase(7.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(4.138615317665089, 6.290932563533426, 3.223910762513942, 7.539982508733392, out id));
            // Step 53
            tree.Erase(1.000000000000000, 10.000000000000000);
            tree.Erase(3.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(3.454651390598636, 4.298740467510337, 0.626863418256154, 0.714649021243869, out id));
            // Step 54
            tree.Erase(3.000000000000000, 1.000000000000000);
            tree.Erase(4.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(1.051306320853828, 3.458799932764756, 4.213413813684595, 5.411193295127823, out id));
            // Step 55
            tree.Insert(4.000000000000000, 3.000000000000000, 32);
            tree.Erase(2.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(0.645480852203911, 1.982071503169962, 2.425881577023371, 5.698721331448475, out id));
            // Step 56
            tree.Insert(0.000000000000000, 0.000000000000000, 33);
            tree.Erase(2.000000000000000, 5.000000000000000);
            Assert.True(tree.Find(3.555051581556508, 7.392134403754449, 0.993510048962319, 4.432782261762717, out id));
            Assert.True((new List<ulong> { 28, 32 }).Contains(id));
            // Step 57
            tree.Insert(1.000000000000000, 4.000000000000000, 34);
            tree.Erase(4.000000000000000, 7.000000000000000);
            Assert.True(tree.Find(1.204341668714374, 9.196038171565867, 2.535444697330929, 8.731303043620359, out id));
            Assert.True((new List<ulong> { 5, 21, 31, 32 }).Contains(id));
            // Step 58
            tree.Insert(2.000000000000000, 9.000000000000000, 35);
            tree.Erase(3.000000000000000, 6.000000000000000);
            Assert.True(tree.Find(1.424147071941039, 7.239199281787708, 2.301391416306529, 9.662268009973031, out id));
            Assert.True((new List<ulong> { 21, 32, 35 }).Contains(id));
            // Step 59
            tree.Erase(2.000000000000000, 4.000000000000000);
            tree.Erase(2.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(1.547253302839726, 8.854986154481868, 9.332053223539610, 9.508650933036588, out id));
            // Step 60
            tree.Erase(10.000000000000000, 4.000000000000000);
            tree.Erase(10.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(0.558233933070030, 4.948261919379107, 2.245869414405297, 5.340211423855462, out id));
            Assert.True((new List<ulong> { 32, 34 }).Contains(id));
            // Step 61
            tree.Erase(6.000000000000000, 0.000000000000000);
            tree.Erase(9.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(1.484414864484533, 8.943071988432260, 4.672007585796282, 6.189628870302796, out id));
            // Step 62
            tree.Erase(4.000000000000000, 3.000000000000000);
            tree.Erase(10.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(3.657167476295837, 6.443511372303345, 2.035153768311178, 5.805924531863120, out id));
            // Step 63
            tree.Insert(6.000000000000000, 3.000000000000000, 36);
            tree.Erase(8.000000000000000, 1.000000000000000);
            Assert.True(tree.Find(8.420462172603004, 9.699698064600380, 2.754294449959800, 3.640985770941123, out id));
            Assert.True((new List<ulong> { 31 }).Contains(id));
            // Step 64
            tree.Insert(4.000000000000000, 7.000000000000000, 37);
            tree.Erase(8.000000000000000, 0.000000000000000);
            Assert.True(tree.Find(2.970785907155479, 9.099260246121803, 2.230467962706527, 8.130918442581148, out id));
            Assert.True((new List<ulong> { 5, 31, 36, 37 }).Contains(id));
            // Step 65
            tree.Erase(8.000000000000000, 4.000000000000000);
            tree.Erase(5.000000000000000, 10.000000000000000);
            Assert.True(tree.Find(0.083128297173576, 2.492328075065078, 1.157008002966278, 7.170712504283314, out id));
            Assert.True((new List<ulong> { 34 }).Contains(id));
            // Step 66
            tree.Erase(0.000000000000000, 0.000000000000000);
            tree.Erase(0.000000000000000, 8.000000000000000);
            Assert.True(tree.Find(3.880289097910920, 9.245165747206807, 0.170804138491557, 1.125420142781023, out id));
            Assert.True((new List<ulong> { 28 }).Contains(id));
            // Step 67
            tree.Erase(2.000000000000000, 0.000000000000000);
            tree.Erase(10.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(0.223091752651067, 6.613786628505048, 3.077897328547082, 3.364329584830096, out id));
            // Step 68
            tree.Erase(9.000000000000000, 3.000000000000000);
            tree.Erase(3.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(2.194035433661425, 2.464735398223069, 4.432567718161194, 5.833557803690770, out id));
            // Step 69
            tree.Erase(7.000000000000000, 1.000000000000000);
            tree.Erase(9.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(1.217408225698271, 2.491569247416353, 0.473893601606101, 8.697534894879221, out id));
            // Step 70
            tree.Insert(2.000000000000000, 5.000000000000000, 38);
            tree.Erase(5.000000000000000, 2.000000000000000);
            Assert.True(tree.Find(3.870470414530294, 5.753154660699059, 2.276340809005537, 8.683833729011850, out id));
            Assert.True((new List<ulong> { 37 }).Contains(id));
            // Step 71
            tree.Insert(6.000000000000000, 8.000000000000000, 39);
            tree.Erase(2.000000000000000, 2.000000000000000);
            Assert.True(tree.Find(2.905573110274545, 6.608096453460032, 2.792271926094111, 7.107907851846145, out id));
            Assert.True((new List<ulong> { 36, 37 }).Contains(id));
            // Step 72
            tree.Erase(2.000000000000000, 5.000000000000000);
            tree.Erase(7.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(6.150304196664237, 6.449224674842809, 5.531209854753552, 9.795510819680915, out id));
            // Step 73
            tree.Erase(4.000000000000000, 7.000000000000000);
            tree.Erase(8.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(1.531621779899924, 3.439781305406661, 5.954938174631805, 8.677937468922515, out id));
            // Step 74
            tree.Erase(6.000000000000000, 3.000000000000000);
            tree.Erase(10.000000000000000, 10.000000000000000);
            Assert.True(tree.Find(3.038612710968146, 7.423630911097202, 0.108569189647482, 9.248630525334246, out id));
            Assert.True((new List<ulong> { 39 }).Contains(id));
            // Step 75
            tree.Insert(4.000000000000000, 6.000000000000000, 40);
            tree.Erase(7.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(0.121409089485233, 7.509149159479012, 4.520376124394403, 5.234173177232844, out id));
            // Step 76
            tree.Erase(1.000000000000000, 4.000000000000000);
            tree.Erase(4.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(3.046084287348969, 9.953180145726115, 0.491130430963542, 2.529139566152670, out id));
            // Step 77
            tree.Insert(10.000000000000000, 6.000000000000000, 41);
            tree.Erase(5.000000000000000, 10.000000000000000);
            Assert.True(tree.Find(0.785134998024181, 8.045678894046386, 7.822614567406645, 8.855524426138517, out id));
            Assert.True((new List<ulong> { 39 }).Contains(id));
            // Step 78
            tree.Insert(0.000000000000000, 7.000000000000000, 42);
            tree.Erase(6.000000000000000, 5.000000000000000);
            Assert.True(tree.Find(5.138391401407540, 6.324452751813071, 6.788354416400605, 8.978439157106989, out id));
            Assert.True((new List<ulong> { 39 }).Contains(id));
            // Step 79
            tree.Insert(5.000000000000000, 0.000000000000000, 43);
            tree.Erase(1.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(2.611987727956845, 3.695848312339034, 0.185165901258540, 2.306591934546057, out id));
            // Step 80
            tree.Insert(7.000000000000000, 4.000000000000000, 44);
            tree.Erase(8.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(7.685385759040666, 9.087483018418141, 0.336825344326916, 7.771906861618020, out id));
            // Step 81
            tree.Erase(6.000000000000000, 8.000000000000000);
            tree.Erase(1.000000000000000, 0.000000000000000);
            Assert.True(tree.Find(1.019602415984148, 9.297211112753262, 1.245206892298305, 9.498120926197352, out id));
            Assert.True((new List<ulong> { 35, 40, 44 }).Contains(id));
            // Step 82
            tree.Erase(2.000000000000000, 9.000000000000000);
            tree.Erase(1.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(0.836859774607438, 6.822626776557193, 2.013914167082228, 3.541225137669998, out id));
            // Step 83
            tree.Insert(3.000000000000000, 5.000000000000000, 45);
            tree.Erase(4.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(3.438372201027043, 9.501598642653379, 4.246470581582190, 5.760803596664431, out id));
            // Step 84
            tree.Erase(10.000000000000000, 6.000000000000000);
            tree.Erase(7.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(1.432302502208149, 6.923605610253199, 0.297483835315385, 3.636963672369212, out id));
            // Step 85
            tree.Insert(7.000000000000000, 3.000000000000000, 46);
            tree.Erase(1.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(4.288352131131530, 5.429461200220978, 2.934672604090930, 6.971581051335041, out id));
            // Step 86
            tree.Insert(7.000000000000000, 10.000000000000000, 47);
            tree.Erase(3.000000000000000, 7.000000000000000);
            Assert.True(tree.Find(3.523804606204860, 8.236964975548759, 0.941437765526474, 5.777012708581775, out id));
            Assert.True((new List<ulong> { 44, 46 }).Contains(id));
            // Step 87
            tree.Insert(8.000000000000000, 3.000000000000000, 48);
            tree.Erase(5.000000000000000, 10.000000000000000);
            Assert.True(tree.Find(5.645703483892329, 8.651028106381698, 0.914174746761726, 8.552724091133376, out id));
            Assert.True((new List<ulong> { 44, 46, 48 }).Contains(id));
            // Step 88
            tree.Erase(5.000000000000000, 0.000000000000000);
            tree.Erase(7.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(2.819303456146105, 4.809952182658359, 0.044830420065871, 3.583202020260367, out id));
            // Step 89
            tree.Erase(0.000000000000000, 7.000000000000000);
            tree.Erase(1.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(8.257366847711985, 9.037646970665739, 4.873328364984218, 6.289478978038455, out id));
            // Step 90
            tree.Insert(7.000000000000000, 0.000000000000000, 49);
            tree.Erase(4.000000000000000, 8.000000000000000);
            Assert.True(tree.Find(1.646417258980275, 6.299580034735433, 4.322268269494938, 8.942500017749490, out id));
            Assert.True((new List<ulong> { 40, 45 }).Contains(id));
            // Step 91
            tree.Insert(5.000000000000000, 1.000000000000000, 50);
            tree.Erase(1.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(4.771391150273584, 7.640596017577929, 5.260510688487011, 8.039826598832018, out id));
            // Step 92
            tree.Erase(5.000000000000000, 1.000000000000000);
            tree.Erase(1.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(9.339788399715843, 9.435164278730257, 4.349969953644165, 4.658250179968989, out id));
            // Step 93
            tree.Insert(3.000000000000000, 10.000000000000000, 51);
            tree.Erase(7.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(7.679770651855517, 8.676825136733164, 3.473605103999071, 5.591852088906137, out id));
            // Step 94
            tree.Insert(10.000000000000000, 2.000000000000000, 52);
            tree.Erase(2.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(0.284129508909848, 2.224857546583630, 4.380226914524533, 9.008944560787905, out id));
            // Step 95
            tree.Erase(8.000000000000000, 3.000000000000000);
            tree.Erase(4.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(5.872657613294666, 6.210633359495157, 0.342701516888629, 1.582838359869918, out id));
            // Step 96
            tree.Erase(7.000000000000000, 0.000000000000000);
            tree.Erase(9.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(5.058561735938274, 9.117258767862516, 0.439421295571397, 9.835893949554984, out id));
            Assert.True((new List<ulong> { 44, 46 }).Contains(id));
            // Step 97
            tree.Erase(4.000000000000000, 6.000000000000000);
            tree.Erase(7.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(1.873576321704851, 8.910952121469544, 1.000825115444671, 4.727927391016547, out id));
            Assert.True((new List<ulong> { 44, 46 }).Contains(id));
            // Step 98
            tree.Insert(5.000000000000000, 9.000000000000000, 53);
            tree.Erase(10.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(4.373578071118961, 7.297757564564318, 1.222967197193516, 4.575557253902560, out id));
            Assert.True((new List<ulong> { 44, 46 }).Contains(id));
            // Step 99
            tree.Insert(7.000000000000000, 6.000000000000000, 54);
            tree.Erase(0.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(0.716545258094387, 5.298878076918106, 0.980325345980282, 1.178717063965558, out id));
            // Step 100
            tree.Insert(9.000000000000000, 7.000000000000000, 55);
            tree.Erase(10.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(3.235259534680244, 4.289115769699804, 6.274771826586406, 7.285919485241658, out id));
            // Step 101
            tree.Erase(10.000000000000000, 2.000000000000000);
            tree.Erase(6.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(2.974629966262692, 7.231670002747173, 1.679714479400379, 5.356912739095093, out id));
            Assert.True((new List<ulong> { 44, 45, 46 }).Contains(id));
            // Step 102
            tree.Erase(7.000000000000000, 10.000000000000000);
            tree.Erase(9.000000000000000, 2.000000000000000);
            Assert.True(tree.Find(4.586634159664246, 6.473209487414186, 5.098865068946380, 9.952192030971132, out id));
            Assert.True((new List<ulong> { 53 }).Contains(id));
            // Step 103
            tree.Erase(3.000000000000000, 10.000000000000000);
            tree.Erase(0.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(0.889630922821821, 3.123759278610604, 7.877553007182369, 9.986088900792968, out id));
            // Step 104
            tree.Insert(4.000000000000000, 1.000000000000000, 56);
            tree.Erase(4.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(2.047695588185335, 8.459568642971387, 3.045720104822346, 3.737194690228488, out id));
            // Step 105
            tree.Erase(4.000000000000000, 1.000000000000000);
            tree.Erase(3.000000000000000, 7.000000000000000);
            Assert.True(tree.Find(6.918086301968927, 7.191902317083786, 1.406920075984192, 8.289496176905303, out id));
            Assert.True((new List<ulong> { 44, 46, 54 }).Contains(id));
            // Step 106
            tree.Insert(8.000000000000000, 9.000000000000000, 57);
            tree.Erase(9.000000000000000, 6.000000000000000);
            Assert.True(tree.Find(6.706102040560818, 8.623718767736353, 3.328297780412159, 8.680763195247810, out id));
            Assert.True((new List<ulong> { 44, 54 }).Contains(id));
            // Step 107
            tree.Insert(8.000000000000000, 6.000000000000000, 58);
            tree.Erase(4.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(0.274954449313801, 3.071454770898421, 0.000007946516253, 2.255695403683780, out id));
            // Step 108
            tree.Erase(7.000000000000000, 4.000000000000000);
            tree.Erase(10.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(0.210976116798413, 0.475737405067400, 0.529629077456314, 3.314474806184216, out id));
            // Step 109
            tree.Erase(5.000000000000000, 9.000000000000000);
            tree.Erase(10.000000000000000, 6.000000000000000);
            Assert.True(tree.Find(6.033946760656109, 8.851936522847852, 1.441122340571588, 5.236488410099403, out id));
            Assert.True((new List<ulong> { 46 }).Contains(id));
            // Step 110
            tree.Insert(0.000000000000000, 8.000000000000000, 59);
            tree.Erase(7.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(7.238273591641050, 9.086781764738845, 0.240819909981644, 2.626134474179662, out id));
            // Step 111
            tree.Erase(7.000000000000000, 3.000000000000000);
            tree.Erase(3.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(4.348671298697820, 8.131159293041433, 8.766551015870323, 8.943820003137230, out id));
            // Step 112
            tree.Erase(8.000000000000000, 6.000000000000000);
            tree.Erase(9.000000000000000, 8.000000000000000);
            Assert.True(tree.Find(0.561127858764588, 7.479575990998781, 3.577769728348619, 6.637937757460510, out id));
            Assert.True((new List<ulong> { 45, 54 }).Contains(id));
            // Step 113
            tree.Erase(2.000000000000000, 10.000000000000000);
            tree.Erase(0.000000000000000, 5.000000000000000);
            Assert.True(tree.Find(1.421951116833150, 5.301300685279538, 4.069537984900522, 7.628426744123732, out id));
            Assert.True((new List<ulong> { 45 }).Contains(id));
            // Step 114
            tree.Insert(10.000000000000000, 9.000000000000000, 60);
            tree.Erase(10.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(7.116681470013119, 7.424242595829686, 0.467513631099472, 2.474520745067001, out id));
            // Step 115
            tree.Erase(7.000000000000000, 6.000000000000000);
            tree.Erase(5.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(0.039859880214338, 9.049044700984361, 0.597399181314001, 7.991835442833973, out id));
            Assert.True((new List<ulong> { 45, 55 }).Contains(id));
            // Step 116
            tree.Insert(10.000000000000000, 3.000000000000000, 61);
            tree.Erase(0.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(2.044100132666995, 2.412858487212599, 4.233531238529293, 6.755524668403742, out id));
            // Step 117
            tree.Insert(1.000000000000000, 7.000000000000000, 62);
            tree.Erase(4.000000000000000, 4.000000000000000);
            Assert.True(tree.Find(4.242859402018412, 8.400722034865643, 7.256666787932136, 9.888341674029340, out id));
            Assert.True((new List<ulong> { 57 }).Contains(id));
            // Step 118
            tree.Insert(2.000000000000000, 2.000000000000000, 63);
            tree.Erase(2.000000000000000, 10.000000000000000);
            Assert.True(tree.Find(0.908132336238270, 4.244091036916078, 0.183040552531223, 7.226610533643358, out id));
            Assert.True((new List<ulong> { 45, 62, 63 }).Contains(id));
            // Step 119
            tree.Erase(0.000000000000000, 8.000000000000000);
            tree.Erase(6.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(3.050059412100493, 7.554931411858310, 3.459502214224281, 6.023722979818523, out id));
            // Step 120
            tree.Insert(2.000000000000000, 8.000000000000000, 64);
            tree.Erase(5.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(4.961030403021893, 7.280335739448978, 0.542916954247046, 2.851515085076448, out id));
            // Step 121
            tree.Erase(1.000000000000000, 7.000000000000000);
            tree.Erase(0.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(0.781697111890820, 4.123322499208041, 8.104915969372689, 9.265383340804389, out id));
            // Step 122
            tree.Erase(10.000000000000000, 9.000000000000000);
            tree.Erase(5.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(5.381646030086119, 5.864554972133558, 5.849291658740862, 9.014383803898436, out id));
            // Step 123
            tree.Insert(5.000000000000000, 5.000000000000000, 65);
            tree.Erase(2.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(1.198266174145650, 1.454702744138306, 5.622268433246907, 9.927060698244311, out id));
            // Step 124
            tree.Erase(8.000000000000000, 9.000000000000000);
            tree.Erase(1.000000000000000, 10.000000000000000);
            Assert.True(tree.Find(2.663911639976678, 7.900104620164459, 2.358707184996496, 5.407409905500673, out id));
            Assert.True((new List<ulong> { 45, 65 }).Contains(id));
            // Step 125
            tree.Insert(0.000000000000000, 1.000000000000000, 66);
            tree.Erase(8.000000000000000, 6.000000000000000);
            Assert.True(tree.Find(0.642501059570165, 4.262607858649728, 0.562400946730560, 4.553064586908013, out id));
            Assert.True((new List<ulong> { 63 }).Contains(id));
            // Step 126
            tree.Erase(2.000000000000000, 2.000000000000000);
            tree.Erase(4.000000000000000, 8.000000000000000);
            Assert.True(tree.Find(0.028685074191984, 3.304743531353243, 4.684883466667253, 9.913359689690369, out id));
            Assert.True((new List<ulong> { 45, 64 }).Contains(id));
            // Step 127
            tree.Erase(9.000000000000000, 7.000000000000000);
            tree.Erase(2.000000000000000, 0.000000000000000);
            Assert.True(tree.Find(0.854839030697448, 4.421460132787058, 1.963268918852675, 7.444520832628721, out id));
            Assert.True((new List<ulong> { 45 }).Contains(id));
            // Step 128
            tree.Insert(0.000000000000000, 7.000000000000000, 67);
            tree.Erase(7.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(5.335486279938064, 8.880612210072197, 5.725218021974077, 7.380771117914911, out id));
            // Step 129
            tree.Erase(5.000000000000000, 5.000000000000000);
            tree.Erase(5.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(1.853324837292574, 6.244306305394649, 3.037999559928267, 4.722908033851397, out id));
            // Step 130
            tree.Insert(7.000000000000000, 8.000000000000000, 68);
            tree.Erase(0.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(7.782238612445039, 9.204265946663574, 0.822640728010879, 7.143520796415643, out id));
            // Step 131
            tree.Insert(5.000000000000000, 7.000000000000000, 69);
            tree.Erase(2.000000000000000, 2.000000000000000);
            Assert.True(tree.Find(0.460282104187135, 3.713613968711467, 3.726578260456348, 8.720594150302675, out id));
            Assert.True((new List<ulong> { 45, 64 }).Contains(id));
            // Step 132
            tree.Erase(3.000000000000000, 5.000000000000000);
            tree.Erase(8.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(6.906565496652623, 9.550205192833847, 8.760457190446129, 9.049744124807006, out id));
            // Step 133
            tree.Erase(0.000000000000000, 7.000000000000000);
            tree.Erase(2.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(4.557169640975816, 8.936305318751506, 1.287100901434880, 3.198131987694669, out id));
            // Step 134
            tree.Erase(2.000000000000000, 8.000000000000000);
            tree.Erase(9.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(1.882618872603382, 6.053032835588741, 4.911387232899448, 5.725095295548687, out id));
            // Step 135
            tree.Insert(7.000000000000000, 6.000000000000000, 70);
            tree.Erase(6.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(2.069360404849721, 2.915756777877029, 1.587391763400834, 3.641677010359083, out id));
            // Step 136
            tree.Insert(4.000000000000000, 1.000000000000000, 71);
            tree.Erase(0.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(2.741989481102979, 4.975293523928751, 5.257339062212813, 8.601991349267289, out id));
            // Step 137
            tree.Erase(7.000000000000000, 8.000000000000000);
            tree.Erase(0.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(8.244231794815843, 8.548752287117866, 3.744181115931275, 9.210534788572627, out id));
            // Step 138
            tree.Erase(10.000000000000000, 3.000000000000000);
            tree.Erase(8.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(4.282777837378169, 7.649181998827936, 0.189901503622525, 2.015497638912633, out id));
            // Step 139
            tree.Insert(7.000000000000000, 4.000000000000000, 72);
            tree.Erase(2.000000000000000, 0.000000000000000);
            Assert.True(tree.Find(1.897437495459064, 7.609052211973891, 3.616300402821003, 8.591132535141533, out id));
            Assert.True((new List<ulong> { 69, 70, 72 }).Contains(id));
            // Step 140
            tree.Insert(3.000000000000000, 9.000000000000000, 73);
            tree.Erase(9.000000000000000, 6.000000000000000);
            Assert.True(tree.Find(5.340731059433916, 8.016794400140920, 4.145863803025316, 8.414778853777809, out id));
            Assert.True((new List<ulong> { 70 }).Contains(id));
            // Step 141
            tree.Insert(1.000000000000000, 7.000000000000000, 74);
            tree.Erase(10.000000000000000, 7.000000000000000);
            Assert.True(tree.Find(5.956866057375354, 7.454322191923840, 1.359317847008306, 4.402352535026295, out id));
            Assert.True((new List<ulong> { 72 }).Contains(id));
            // Step 142
            tree.Insert(3.000000000000000, 2.000000000000000, 75);
            tree.Erase(9.000000000000000, 6.000000000000000);
            Assert.True(tree.Find(0.580183184152904, 7.703299212045466, 3.063936170445611, 8.745058943120622, out id));
            Assert.True((new List<ulong> { 69, 70, 72, 74 }).Contains(id));
            // Step 143
            tree.Insert(3.000000000000000, 4.000000000000000, 76);
            tree.Erase(1.000000000000000, 2.000000000000000);
            Assert.True(tree.Find(0.223369555044552, 9.219672867080998, 0.266979399212236, 2.966240579020007, out id));
            Assert.True((new List<ulong> { 71, 75 }).Contains(id));
            // Step 144
            tree.Erase(3.000000000000000, 2.000000000000000);
            tree.Erase(8.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(2.679497584175175, 6.026722444675730, 6.016978306458417, 7.310036457861457, out id));
            Assert.True((new List<ulong> { 69 }).Contains(id));
            // Step 145
            tree.Insert(8.000000000000000, 10.000000000000000, 77);
            tree.Erase(0.000000000000000, 4.000000000000000);
            Assert.True(tree.Find(1.830069794314571, 7.196325763786388, 5.930680316797714, 7.914630245596058, out id));
            Assert.True((new List<ulong> { 69, 70 }).Contains(id));
            // Step 146
            tree.Insert(2.000000000000000, 4.000000000000000, 78);
            tree.Erase(2.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(0.015713828556921, 5.932668044519537, 0.399227135215552, 4.176860490578981, out id));
            Assert.True((new List<ulong> { 71, 76, 78 }).Contains(id));
            // Step 147
            tree.Erase(8.000000000000000, 10.000000000000000);
            tree.Erase(5.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(0.746783909638666, 2.699279565120110, 6.122477443496928, 7.739172989759063, out id));
            Assert.True((new List<ulong> { 74 }).Contains(id));
            // Step 148
            tree.Insert(6.000000000000000, 5.000000000000000, 79);
            tree.Erase(3.000000000000000, 0.000000000000000);
            Assert.True(tree.Find(1.731242351348085, 5.282938191981281, 3.844988624560062, 9.814086672224523, out id));
            Assert.True((new List<ulong> { 69, 73, 76, 78 }).Contains(id));
            // Step 149
            tree.Erase(2.000000000000000, 4.000000000000000);
            tree.Erase(5.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(1.000916457571269, 4.109376512819491, 8.771836010716251, 9.654970984996799, out id));
            Assert.True((new List<ulong> { 73 }).Contains(id));
            // Step 150
            tree.Insert(6.000000000000000, 1.000000000000000, 80);
            tree.Erase(0.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(8.376168427641137, 8.605411281708010, 1.275164490291621, 9.726973708367041, out id));
            // Step 151
            tree.Insert(4.000000000000000, 7.000000000000000, 81);
            tree.Erase(9.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(3.070403904417716, 4.876407338077488, 2.153212552839666, 7.128514416409954, out id));
            Assert.True((new List<ulong> { 81 }).Contains(id));
            // Step 152
            tree.Erase(4.000000000000000, 7.000000000000000);
            tree.Erase(10.000000000000000, 6.000000000000000);
            Assert.True(tree.Find(1.777147034658435, 7.791354350360463, 5.964412502108329, 7.639696612424778, out id));
            Assert.True((new List<ulong> { 69, 70 }).Contains(id));
            // Step 153
            tree.Erase(6.000000000000000, 1.000000000000000);
            tree.Erase(7.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(2.009812121573083, 7.948899783615867, 5.477125989128949, 5.679640385532108, out id));
            // Step 154
            tree.Erase(6.000000000000000, 5.000000000000000);
            tree.Erase(3.000000000000000, 10.000000000000000);
            Assert.True(tree.Find(0.622115494315996, 9.726278525957119, 0.874942054825094, 8.934013530292143, out id));
            Assert.True((new List<ulong> { 69, 70, 71, 72, 74, 76 }).Contains(id));
            // Step 155
            tree.Insert(6.000000000000000, 4.000000000000000, 82);
            tree.Erase(4.000000000000000, 0.000000000000000);
            Assert.True(tree.Find(1.296502441921049, 7.721312445561964, 0.766242504636127, 8.139733327543349, out id));
            Assert.True((new List<ulong> { 69, 70, 71, 72, 76, 82 }).Contains(id));
            // Step 156
            tree.Erase(7.000000000000000, 6.000000000000000);
            tree.Erase(8.000000000000000, 5.000000000000000);
            Assert.True(tree.Find(5.592892143548509, 7.868827388859000, 3.355122614396138, 7.517947374823624, out id));
            Assert.True((new List<ulong> { 72, 82 }).Contains(id));
            // Step 157
            tree.Erase(1.000000000000000, 7.000000000000000);
            tree.Erase(2.000000000000000, 10.000000000000000);
            Assert.True(tree.Find(2.421770889087794, 9.213441896451846, 2.327722713881678, 9.888744246162441, out id));
            Assert.True((new List<ulong> { 69, 72, 73, 76, 82 }).Contains(id));
            // Step 158
            tree.Insert(3.000000000000000, 10.000000000000000, 83);
            tree.Erase(7.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(6.341282232497056, 9.403879404650366, 2.003513279438472, 3.450091910295518, out id));
            // Step 159
            tree.Erase(0.000000000000000, 1.000000000000000);
            tree.Erase(10.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(7.209193770138801, 9.599193243548703, 4.335642391710580, 7.699630292184578, out id));
            // Step 160
            tree.Insert(5.000000000000000, 8.000000000000000, 84);
            tree.Erase(9.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(6.758162823328054, 9.470383334812077, 1.369850475534377, 6.825079857843010, out id));
            Assert.True((new List<ulong> { 72 }).Contains(id));
            // Step 161
            tree.Erase(3.000000000000000, 9.000000000000000);
            tree.Erase(0.000000000000000, 2.000000000000000);
            Assert.True(tree.Find(3.667250191722990, 6.989376770178357, 6.196117548321616, 9.208465569840156, out id));
            Assert.True((new List<ulong> { 69, 84 }).Contains(id));
            // Step 162
            tree.Erase(5.000000000000000, 8.000000000000000);
            tree.Erase(7.000000000000000, 8.000000000000000);
            Assert.True(tree.Find(2.669484627588262, 8.488574743763394, 1.390213818496596, 9.050532753761876, out id));
            Assert.True((new List<ulong> { 69, 72, 76, 82 }).Contains(id));
            // Step 163
            tree.Insert(9.000000000000000, 6.000000000000000, 85);
            tree.Erase(0.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(1.463815575374418, 9.600634926144279, 6.286589078203233, 7.943988408213150, out id));
            Assert.True((new List<ulong> { 69 }).Contains(id));
            // Step 164
            tree.Erase(7.000000000000000, 4.000000000000000);
            tree.Erase(7.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(0.649227412500785, 1.745544069186297, 1.971974902497146, 5.232114383279983, out id));
            // Step 165
            tree.Erase(6.000000000000000, 4.000000000000000);
            tree.Erase(5.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(2.943757353085537, 6.667840214847223, 1.014848251561480, 3.476264676119435, out id));
            // Step 166
            tree.Insert(5.000000000000000, 3.000000000000000, 86);
            tree.Erase(8.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(1.920129131038810, 9.117897438664773, 4.737319554166296, 5.931585685441039, out id));
            // Step 167
            tree.Erase(4.000000000000000, 1.000000000000000);
            tree.Erase(6.000000000000000, 1.000000000000000);
            Assert.True(tree.Find(4.374233087208397, 7.596254404050368, 4.592666044648087, 8.281053207361458, out id));
            Assert.True((new List<ulong> { 69 }).Contains(id));
            // Step 168
            tree.Insert(9.000000000000000, 10.000000000000000, 87);
            tree.Erase(6.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(2.482159656859432, 4.768573099998275, 9.229152733679561, 9.596367811577537, out id));
            // Step 169
            tree.Insert(2.000000000000000, 8.000000000000000, 88);
            tree.Erase(8.000000000000000, 6.000000000000000);
            Assert.True(tree.Find(0.355298776902833, 5.394368288874488, 3.613672752373973, 8.416350964821030, out id));
            Assert.True((new List<ulong> { 69, 76, 88 }).Contains(id));
            // Step 170
            tree.Erase(3.000000000000000, 10.000000000000000);
            tree.Erase(8.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(0.410305616579308, 4.167309549437554, 8.245406646510716, 9.699714876044908, out id));
            // Step 171
            tree.Insert(10.000000000000000, 8.000000000000000, 89);
            tree.Erase(0.000000000000000, 8.000000000000000);
            Assert.True(tree.Find(0.416412627467606, 2.152544610366340, 7.239428817015092, 8.038407459297904, out id));
            Assert.True((new List<ulong> { 88 }).Contains(id));
            // Step 172
            tree.Erase(2.000000000000000, 8.000000000000000);
            tree.Erase(9.000000000000000, 2.000000000000000);
            Assert.True(tree.Find(0.024707896303119, 4.096104382650053, 2.965028099389978, 6.065770497627683, out id));
            Assert.True((new List<ulong> { 76 }).Contains(id));
            // Step 173
            tree.Erase(5.000000000000000, 3.000000000000000);
            tree.Erase(6.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(2.201251553485846, 9.656521863789026, 0.608458833171277, 0.922687167479244, out id));
            // Step 174
            tree.Insert(2.000000000000000, 7.000000000000000, 90);
            tree.Erase(0.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(4.253382973510979, 4.929517212691579, 1.271044673329988, 4.455197481296533, out id));
            // Step 175
            tree.Insert(1.000000000000000, 10.000000000000000, 91);
            tree.Erase(3.000000000000000, 6.000000000000000);
            Assert.True(tree.Find(0.929679066670994, 8.801148880093198, 2.960219212486037, 8.508284148289205, out id));
            Assert.True((new List<ulong> { 69, 76, 90 }).Contains(id));
            // Step 176
            tree.Erase(9.000000000000000, 10.000000000000000);
            tree.Erase(3.000000000000000, 8.000000000000000);
            Assert.True(tree.Find(0.514623371801942, 8.121046529571041, 2.351150600958183, 6.690651084870409, out id));
            Assert.True((new List<ulong> { 76 }).Contains(id));
            // Step 177
            tree.Erase(2.000000000000000, 7.000000000000000);
            tree.Erase(2.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(4.279891710852567, 4.460138179636570, 2.716047667127282, 5.024175419575486, out id));
            // Step 178
            tree.Insert(5.000000000000000, 9.000000000000000, 92);
            tree.Erase(2.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(1.226280742037232, 7.242017951825019, 4.380957524885725, 5.762421075076086, out id));
            // Step 179
            tree.Insert(4.000000000000000, 2.000000000000000, 93);
            tree.Erase(8.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(7.022309074378470, 8.678751730833476, 1.977065322437531, 2.060652527304919, out id));
            // Step 180
            tree.Erase(5.000000000000000, 7.000000000000000);
            tree.Erase(1.000000000000000, 5.000000000000000);
            Assert.True(tree.Find(0.064364492738629, 7.911251211526027, 1.248653425984545, 2.578358846250255, out id));
            Assert.True((new List<ulong> { 93 }).Contains(id));
            // Step 181
            tree.Insert(6.000000000000000, 2.000000000000000, 94);
            tree.Erase(4.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(2.086729515424500, 2.588449472706154, 3.546593065325980, 4.708763749894071, out id));
            // Step 182
            tree.Erase(1.000000000000000, 10.000000000000000);
            tree.Erase(4.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(5.461113496843416, 5.856227423818652, 5.902076924779661, 9.524056309633743, out id));
            // Step 183
            tree.Insert(5.000000000000000, 10.000000000000000, 95);
            tree.Erase(4.000000000000000, 5.000000000000000);
            Assert.True(tree.Find(0.273215259629498, 3.341077530079981, 0.569388695645882, 4.428592218952848, out id));
            Assert.True((new List<ulong> { 76 }).Contains(id));
            // Step 184
            tree.Erase(6.000000000000000, 2.000000000000000);
            tree.Erase(9.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(0.315222523838815, 1.442511920192876, 1.528562425629846, 7.070783666992297, out id));
            // Step 185
            tree.Insert(3.000000000000000, 1.000000000000000, 96);
            tree.Erase(6.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(3.435364678875072, 5.295281916692977, 0.832472780932362, 1.057699425525287, out id));
            // Step 186
            tree.Insert(9.000000000000000, 2.000000000000000, 97);
            tree.Erase(8.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(0.115827449659573, 2.024446627974295, 3.746890891808445, 5.114430663287463, out id));
            // Step 187
            tree.Erase(5.000000000000000, 10.000000000000000);
            tree.Erase(4.000000000000000, 7.000000000000000);
            Assert.True(tree.Find(4.783477255343474, 6.853313219683042, 3.892003043786876, 9.702620385098550, out id));
            Assert.True((new List<ulong> { 92 }).Contains(id));
            // Step 188
            tree.Insert(3.000000000000000, 6.000000000000000, 98);
            tree.Erase(8.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(1.790357503511479, 3.732837814668119, 1.591313768295509, 4.814976004488216, out id));
            Assert.True((new List<ulong> { 76 }).Contains(id));
            // Step 189
            tree.Insert(7.000000000000000, 8.000000000000000, 99);
            tree.Erase(3.000000000000000, 0.000000000000000);
            Assert.True(tree.Find(6.115297783824690, 9.187463570197922, 0.769200171220739, 6.389828008207186, out id));
            Assert.True((new List<ulong> { 85, 97 }).Contains(id));
            // Step 190
            tree.Erase(7.000000000000000, 8.000000000000000);
            tree.Erase(7.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(1.845214391090279, 5.389426542998916, 1.572602567567780, 5.612713241184522, out id));
            Assert.True((new List<ulong> { 76, 93 }).Contains(id));
            // Step 191
            tree.Erase(9.000000000000000, 6.000000000000000);
            tree.Erase(7.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(5.177731491010001, 7.748307059486381, 7.110466391065850, 9.402844784846099, out id));
            // Step 192
            tree.Erase(3.000000000000000, 4.000000000000000);
            tree.Erase(7.000000000000000, 4.000000000000000);
            Assert.True(tree.Find(1.392662875218191, 6.943296304935495, 3.888947312967991, 8.581206105934710, out id));
            Assert.True((new List<ulong> { 98 }).Contains(id));
            // Step 193
            tree.Erase(4.000000000000000, 2.000000000000000);
            tree.Erase(7.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(3.151292233132574, 9.462730575175902, 3.722064600811901, 4.349424887668144, out id));
            // Step 194
            tree.Insert(4.000000000000000, 5.000000000000000, 100);
            tree.Erase(6.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(6.946155913594469, 9.958866324893028, 3.679587042226228, 6.950646788807334, out id));
            // Step 195
            tree.Insert(3.000000000000000, 9.000000000000000, 101);
            tree.Erase(6.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(4.807367388105850, 5.809722553441085, 4.983865716372541, 9.201925767738000, out id));
            Assert.True((new List<ulong> { 92 }).Contains(id));
            // Step 196
            tree.Insert(8.000000000000000, 5.000000000000000, 102);
            tree.Erase(5.000000000000000, 7.000000000000000);
            Assert.True(tree.Find(1.017752688429556, 4.637621337077052, 7.547211998966235, 9.595237199547894, out id));
            Assert.True((new List<ulong> { 101 }).Contains(id));
            // Step 197
            tree.Erase(10.000000000000000, 8.000000000000000);
            tree.Erase(4.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(0.879109750203000, 7.652277878383430, 2.266148748246821, 9.735223037153538, out id));
            Assert.True((new List<ulong> { 92, 98, 100, 101 }).Contains(id));
            // Step 198
            tree.Erase(8.000000000000000, 5.000000000000000);
            tree.Erase(0.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(4.355257021146324, 8.973954930687126, 0.006192820767633, 3.692843650228403, out id));
            // Step 199
            tree.Insert(8.000000000000000, 2.000000000000000, 103);
            tree.Erase(8.000000000000000, 4.000000000000000);
            Assert.True(tree.Find(1.788338941711054, 4.369400580089463, 6.899678378827118, 9.699562816443489, out id));
            Assert.True((new List<ulong> { 101 }).Contains(id));
            // Step 200
            tree.Insert(2.000000000000000, 9.000000000000000, 104);
            tree.Erase(3.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(2.000458513039588, 5.788022822500800, 6.721683039297146, 7.439247442444418, out id));
        }

        [Fact]
        public void Dictionary1dTest()
        {
            var tree = new AdaptiveGrid.Dictionary1d();
            ulong id;

            // Step 1
            tree.Insert(44.000000000000000, 1);
            tree.Erase(42.000000000000000);
            Assert.False(tree.Find(11.016737883485261, 11.301975406271808, out id));
            // Step 2
            tree.Insert(38.000000000000000, 2);
            tree.Erase(29.000000000000000);
            Assert.False(tree.Find(38.712920231745237, 43.844693581361504, out id));
            // Step 3
            tree.Insert(4.000000000000000, 3);
            tree.Erase(37.000000000000000);
            Assert.False(tree.Find(45.500648357140477, 48.567683993292206, out id));
            // Step 4
            tree.Erase(38.000000000000000);
            tree.Erase(26.000000000000000);
            Assert.True(tree.Find(41.708514831395398, 49.504925426628205, out id));
            Assert.True((new List<ulong> { 1 }).Contains(id));
            // Step 5
            tree.Insert(46.000000000000000, 4);
            tree.Erase(25.000000000000000);
            Assert.True(tree.Find(28.247346058558815, 47.986707303554596, out id));
            Assert.True((new List<ulong> { 1, 4 }).Contains(id));
            // Step 6
            tree.Insert(5.000000000000000, 5);
            tree.Erase(36.000000000000000);
            Assert.False(tree.Find(28.713026465820647, 31.705739139171889, out id));
            // Step 7
            tree.Insert(39.000000000000000, 6);
            tree.Erase(49.000000000000000);
            Assert.True(tree.Find(30.344404407465188, 49.221054559193931, out id));
            Assert.True((new List<ulong> { 1, 4, 6 }).Contains(id));
            // Step 8
            tree.Insert(48.000000000000000, 7);
            tree.Erase(15.000000000000000);
            Assert.False(tree.Find(19.929172599220841, 22.611240397922217, out id));
            // Step 9
            tree.Erase(4.000000000000000);
            tree.Erase(18.000000000000000);
            Assert.False(tree.Find(13.480317643498696, 26.380714710405080, out id));
            // Step 10
            tree.Insert(19.000000000000000, 8);
            tree.Erase(23.000000000000000);
            Assert.True(tree.Find(0.230211051685952, 18.620843500335894, out id));
            Assert.True((new List<ulong> { 5 }).Contains(id));
            // Step 11
            tree.Insert(6.000000000000000, 9);
            tree.Erase(38.000000000000000);
            Assert.False(tree.Find(19.550729893904567, 34.011209103944765, out id));
            // Step 12
            tree.Erase(5.000000000000000);
            tree.Erase(7.000000000000000);
            Assert.False(tree.Find(6.831387995743176, 13.154152446380408, out id));
            // Step 13
            tree.Erase(39.000000000000000);
            tree.Erase(18.000000000000000);
            Assert.True(tree.Find(5.822277688324284, 9.075354154983145, out id));
            Assert.True((new List<ulong> { 9 }).Contains(id));
            // Step 14
            tree.Insert(50.000000000000000, 10);
            tree.Erase(24.000000000000000);
            Assert.True(tree.Find(4.693195563223540, 31.228773057610454, out id));
            Assert.True((new List<ulong> { 8, 9 }).Contains(id));
            // Step 15
            tree.Insert(16.000000000000000, 11);
            tree.Erase(20.000000000000000);
            Assert.True(tree.Find(40.864928837541271, 44.091868726387780, out id));
            Assert.True((new List<ulong> { 1 }).Contains(id));
            // Step 16
            tree.Insert(20.000000000000000, 12);
            tree.Erase(12.000000000000000);
            Assert.True(tree.Find(37.966428146597700, 45.651811725603892, out id));
            Assert.True((new List<ulong> { 1 }).Contains(id));
            // Step 17
            tree.Insert(8.000000000000000, 13);
            tree.Erase(49.000000000000000);
            Assert.True(tree.Find(30.282466076349419, 48.629795203335846, out id));
            Assert.True((new List<ulong> { 1, 4, 7 }).Contains(id));
            // Step 18
            tree.Insert(12.000000000000000, 14);
            tree.Erase(31.000000000000000);
            Assert.False(tree.Find(24.973271474854560, 35.854214273510912, out id));
            // Step 19
            tree.Erase(48.000000000000000);
            tree.Erase(35.000000000000000);
            Assert.True(tree.Find(11.494765074626685, 22.714105032711579, out id));
            Assert.True((new List<ulong> { 8, 11, 12, 14 }).Contains(id));
            // Step 20
            tree.Erase(19.000000000000000);
            tree.Erase(45.000000000000000);
            Assert.False(tree.Find(48.084248406646914, 49.430995571781807, out id));
            // Step 21
            tree.Erase(50.000000000000000);
            tree.Erase(40.000000000000000);
            Assert.True(tree.Find(4.517970872607363, 35.062101724914058, out id));
            Assert.True((new List<ulong> { 9, 11, 12, 13, 14 }).Contains(id));
            // Step 22
            tree.Erase(46.000000000000000);
            tree.Erase(28.000000000000000);
            Assert.True(tree.Find(31.929894672110105, 49.650676285973013, out id));
            Assert.True((new List<ulong> { 1 }).Contains(id));
            // Step 23
            tree.Erase(20.000000000000000);
            tree.Erase(19.000000000000000);
            Assert.False(tree.Find(18.354661126357751, 29.819194006891337, out id));
            // Step 24
            tree.Insert(47.000000000000000, 15);
            tree.Erase(37.000000000000000);
            Assert.True(tree.Find(10.371095394792013, 14.947749446337360, out id));
            Assert.True((new List<ulong> { 14 }).Contains(id));
            // Step 25
            tree.Erase(6.000000000000000);
            tree.Erase(41.000000000000000);
            Assert.False(tree.Find(24.466914112260461, 41.232330591353772, out id));
            // Step 26
            tree.Insert(24.000000000000000, 16);
            tree.Erase(21.000000000000000);
            Assert.True(tree.Find(24.994724214542270, 45.292239036087793, out id));
            Assert.True((new List<ulong> { 1 }).Contains(id));
            // Step 27
            tree.Insert(9.000000000000000, 17);
            tree.Erase(30.000000000000000);
            Assert.True(tree.Find(2.118238667358496, 32.012942190226958, out id));
            Assert.True((new List<ulong> { 11, 13, 14, 16, 17 }).Contains(id));
            // Step 28
            tree.Insert(31.000000000000000, 18);
            tree.Erase(43.000000000000000);
            Assert.True(tree.Find(1.335350976647565, 28.844462950074611, out id));
            Assert.True((new List<ulong> { 11, 13, 14, 16, 17 }).Contains(id));
            // Step 29
            tree.Erase(44.000000000000000);
            tree.Erase(5.000000000000000);
            Assert.False(tree.Find(39.253951140442403, 43.936062826784614, out id));
            // Step 30
            tree.Erase(16.000000000000000);
            tree.Erase(10.000000000000000);
            Assert.True(tree.Find(18.545647134977933, 48.775591575902780, out id));
            Assert.True((new List<ulong> { 15, 16, 18 }).Contains(id));
            // Step 31
            tree.Insert(50.000000000000000, 19);
            tree.Erase(21.000000000000000);
            Assert.True(tree.Find(29.752024161006695, 44.744599968150574, out id));
            Assert.True((new List<ulong> { 18 }).Contains(id));
            // Step 32
            tree.Erase(31.000000000000000);
            tree.Erase(48.000000000000000);
            Assert.True(tree.Find(1.898739855178583, 12.525376828822649, out id));
            Assert.True((new List<ulong> { 13, 14, 17 }).Contains(id));
            // Step 33
            tree.Insert(11.000000000000000, 20);
            tree.Erase(1.000000000000000);
            Assert.True(tree.Find(12.383305230464298, 42.260263234218534, out id));
            Assert.True((new List<ulong> { 16 }).Contains(id));
            // Step 34
            tree.Erase(8.000000000000000);
            tree.Erase(37.000000000000000);
            Assert.True(tree.Find(10.226798933218229, 46.644122428257134, out id));
            Assert.True((new List<ulong> { 14, 16, 20 }).Contains(id));
            // Step 35
            tree.Insert(15.000000000000000, 21);
            tree.Erase(3.000000000000000);
            Assert.True(tree.Find(3.226215637238505, 28.334570865486477, out id));
            Assert.True((new List<ulong> { 14, 16, 17, 20, 21 }).Contains(id));
            // Step 36
            tree.Insert(35.000000000000000, 22);
            tree.Erase(5.000000000000000);
            Assert.True(tree.Find(19.407889461513360, 48.626011748435673, out id));
            Assert.True((new List<ulong> { 15, 16, 22 }).Contains(id));
            // Step 37
            tree.Insert(44.000000000000000, 23);
            tree.Erase(27.000000000000000);
            Assert.True(tree.Find(4.946158049955840, 15.731779331132401, out id));
            Assert.True((new List<ulong> { 14, 17, 20, 21 }).Contains(id));
            // Step 38
            tree.Insert(22.000000000000000, 24);
            tree.Erase(25.000000000000000);
            Assert.True(tree.Find(30.414333108805291, 49.884946445501306, out id));
            Assert.True((new List<ulong> { 15, 22, 23 }).Contains(id));
            // Step 39
            tree.Erase(44.000000000000000);
            tree.Erase(8.000000000000000);
            Assert.False(tree.Find(19.844248640023409, 19.976035906106262, out id));
            // Step 40
            tree.Erase(15.000000000000000);
            tree.Erase(25.000000000000000);
            Assert.True(tree.Find(11.013389410299673, 49.642573280157848, out id));
            Assert.True((new List<ulong> { 14, 15, 16, 22, 24 }).Contains(id));
            // Step 41
            tree.Erase(47.000000000000000);
            tree.Erase(28.000000000000000);
            Assert.True(tree.Find(26.222015377675774, 42.849230673899960, out id));
            Assert.True((new List<ulong> { 22 }).Contains(id));
            // Step 42
            tree.Insert(18.000000000000000, 25);
            tree.Erase(42.000000000000000);
            Assert.True(tree.Find(0.029192920071702, 27.357583362441947, out id));
            Assert.True((new List<ulong> { 14, 16, 17, 20, 24, 25 }).Contains(id));
            // Step 43
            tree.Erase(50.000000000000000);
            tree.Erase(13.000000000000000);
            Assert.True(tree.Find(10.889848219193293, 11.913139884108121, out id));
            Assert.True((new List<ulong> { 20 }).Contains(id));
            // Step 44
            tree.Erase(35.000000000000000);
            tree.Erase(4.000000000000000);
            Assert.True(tree.Find(15.869157272762157, 35.982552024033780, out id));
            Assert.True((new List<ulong> { 16, 24, 25 }).Contains(id));
            // Step 45
            tree.Insert(36.000000000000000, 26);
            tree.Erase(30.000000000000000);
            Assert.False(tree.Find(29.367582896535794, 30.095567408988984, out id));
            // Step 46
            tree.Insert(29.000000000000000, 27);
            tree.Erase(30.000000000000000);
            Assert.True(tree.Find(28.652061514637040, 48.774495142586986, out id));
            Assert.True((new List<ulong> { 26, 27 }).Contains(id));
            // Step 47
            tree.Insert(21.000000000000000, 28);
            tree.Erase(48.000000000000000);
            Assert.True(tree.Find(21.703508878133960, 27.666149058921370, out id));
            Assert.True((new List<ulong> { 16, 24 }).Contains(id));
            // Step 48
            tree.Erase(18.000000000000000);
            tree.Erase(27.000000000000000);
            Assert.False(tree.Find(2.377005781494762, 8.522266583280075, out id));
            // Step 49
            tree.Insert(16.000000000000000, 29);
            tree.Erase(20.000000000000000);
            Assert.True(tree.Find(26.238801353888590, 45.489897864202931, out id));
            Assert.True((new List<ulong> { 26, 27 }).Contains(id));
            // Step 50
            tree.Insert(37.000000000000000, 30);
            tree.Erase(38.000000000000000);
            Assert.True(tree.Find(20.701548683499450, 47.267406255163650, out id));
            Assert.True((new List<ulong> { 16, 24, 26, 27, 28, 30 }).Contains(id));
            // Step 51
            tree.Insert(23.000000000000000, 31);
            tree.Erase(4.000000000000000);
            Assert.True(tree.Find(11.303703767568734, 39.497812446370340, out id));
            Assert.True((new List<ulong> { 14, 16, 24, 26, 27, 28, 29, 30, 31 }).Contains(id));
            // Step 52
            tree.Erase(29.000000000000000);
            tree.Erase(14.000000000000000);
            Assert.True(tree.Find(21.688579866128293, 48.793562264120979, out id));
            Assert.True((new List<ulong> { 16, 24, 26, 30, 31 }).Contains(id));
            // Step 53
            tree.Insert(8.000000000000000, 32);
            tree.Erase(2.000000000000000);
            Assert.True(tree.Find(15.006000623095117, 40.373129913741899, out id));
            Assert.True((new List<ulong> { 16, 24, 26, 28, 29, 30, 31 }).Contains(id));
            // Step 54
            tree.Erase(11.000000000000000);
            tree.Erase(15.000000000000000);
            Assert.True(tree.Find(23.691670247014578, 38.325230233124799, out id));
            Assert.True((new List<ulong> { 16, 26, 30 }).Contains(id));
            // Step 55
            tree.Insert(10.000000000000000, 33);
            tree.Erase(20.000000000000000);
            Assert.True(tree.Find(14.116134833597371, 34.416547033127436, out id));
            Assert.True((new List<ulong> { 16, 24, 28, 29, 31 }).Contains(id));
            // Step 56
            tree.Erase(37.000000000000000);
            tree.Erase(31.000000000000000);
            Assert.True(tree.Find(6.516438039211741, 13.854002777387986, out id));
            Assert.True((new List<ulong> { 14, 17, 32, 33 }).Contains(id));
            // Step 57
            tree.Insert(26.000000000000000, 34);
            tree.Erase(37.000000000000000);
            Assert.True(tree.Find(25.020292551347406, 44.681438100161380, out id));
            Assert.True((new List<ulong> { 26, 34 }).Contains(id));
            // Step 58
            tree.Insert(29.000000000000000, 35);
            tree.Erase(17.000000000000000);
            Assert.True(tree.Find(23.799140912205313, 49.736054360629403, out id));
            Assert.True((new List<ulong> { 16, 26, 34, 35 }).Contains(id));
            // Step 59
            tree.Insert(38.000000000000000, 36);
            tree.Erase(20.000000000000000);
            Assert.True(tree.Find(10.839401304993185, 49.640144832313631, out id));
            Assert.True((new List<ulong> { 14, 16, 24, 26, 28, 29, 31, 34, 35, 36 }).Contains(id));
            // Step 60
            tree.Erase(24.000000000000000);
            tree.Erase(45.000000000000000);
            Assert.True(tree.Find(24.190401839371066, 34.714872571432920, out id));
            Assert.True((new List<ulong> { 34, 35 }).Contains(id));
            // Step 61
            tree.Insert(48.000000000000000, 37);
            tree.Erase(27.000000000000000);
            Assert.True(tree.Find(6.133826393883140, 47.746106842391093, out id));
            Assert.True((new List<ulong> { 14, 17, 24, 26, 28, 29, 31, 32, 33, 34, 35, 36 }).Contains(id));
            // Step 62
            tree.Insert(30.000000000000000, 38);
            tree.Erase(35.000000000000000);
            Assert.True(tree.Find(8.902975463875705, 24.974375328577310, out id));
            Assert.True((new List<ulong> { 14, 17, 24, 28, 29, 31, 33 }).Contains(id));
            // Step 63
            tree.Erase(48.000000000000000);
            tree.Erase(44.000000000000000);
            Assert.True(tree.Find(16.244174568172891, 49.985518212428467, out id));
            Assert.True((new List<ulong> { 24, 26, 28, 31, 34, 35, 36, 38 }).Contains(id));
            // Step 64
            tree.Insert(39.000000000000000, 39);
            tree.Erase(7.000000000000000);
            Assert.True(tree.Find(16.920912017502985, 24.161412560784228, out id));
            Assert.True((new List<ulong> { 24, 28, 31 }).Contains(id));
            // Step 65
            tree.Insert(1.000000000000000, 40);
            tree.Erase(13.000000000000000);
            Assert.True(tree.Find(7.603169758110146, 27.174711489304819, out id));
            Assert.True((new List<ulong> { 14, 17, 24, 28, 29, 31, 32, 33, 34 }).Contains(id));
            // Step 66
            tree.Erase(12.000000000000000);
            tree.Erase(44.000000000000000);
            Assert.False(tree.Find(16.878969186196780, 19.694570957312319, out id));
            // Step 67
            tree.Erase(21.000000000000000);
            tree.Erase(27.000000000000000);
            Assert.False(tree.Find(41.567281702667515, 43.844408267081491, out id));
            // Step 68
            tree.Insert(15.000000000000000, 41);
            tree.Erase(11.000000000000000);
            Assert.False(tree.Find(43.090615742437357, 45.051246160185102, out id));
            // Step 69
            tree.Erase(1.000000000000000);
            tree.Erase(6.000000000000000);
            Assert.True(tree.Find(35.621257074912997, 47.796850892751849, out id));
            Assert.True((new List<ulong> { 26, 36, 39 }).Contains(id));
            // Step 70
            tree.Erase(26.000000000000000);
            tree.Erase(26.000000000000000);
            Assert.True(tree.Find(12.781539786148095, 48.195318340004036, out id));
            Assert.True((new List<ulong> { 24, 26, 29, 31, 35, 36, 38, 39, 41 }).Contains(id));
            // Step 71
            tree.Erase(23.000000000000000);
            tree.Erase(18.000000000000000);
            Assert.True(tree.Find(35.169300074837949, 40.930487471002237, out id));
            Assert.True((new List<ulong> { 26, 36, 39 }).Contains(id));
            // Step 72
            tree.Insert(17.000000000000000, 42);
            tree.Erase(25.000000000000000);
            Assert.True(tree.Find(21.358595692706032, 34.513954241811795, out id));
            Assert.True((new List<ulong> { 24, 35, 38 }).Contains(id));
            // Step 73
            tree.Insert(42.000000000000000, 43);
            tree.Erase(21.000000000000000);
            Assert.False(tree.Find(44.344419304901038, 45.102416339283451, out id));
            // Step 74
            tree.Erase(9.000000000000000);
            tree.Erase(37.000000000000000);
            Assert.True(tree.Find(18.692335549743422, 22.486760709060849, out id));
            Assert.True((new List<ulong> { 24 }).Contains(id));
            // Step 75
            tree.Erase(22.000000000000000);
            tree.Erase(20.000000000000000);
            Assert.True(tree.Find(12.347347737279124, 40.659944585102380, out id));
            Assert.True((new List<ulong> { 26, 29, 35, 36, 38, 39, 41, 42 }).Contains(id));
            // Step 76
            tree.Erase(39.000000000000000);
            tree.Erase(27.000000000000000);
            Assert.True(tree.Find(36.782753885688777, 47.313374532369281, out id));
            Assert.True((new List<ulong> { 36, 43 }).Contains(id));
            // Step 77
            tree.Insert(50.000000000000000, 44);
            tree.Erase(23.000000000000000);
            Assert.True(tree.Find(24.862727570138798, 45.081742224566582, out id));
            Assert.True((new List<ulong> { 26, 35, 36, 38, 43 }).Contains(id));
            // Step 78
            tree.Insert(18.000000000000000, 45);
            tree.Erase(9.000000000000000);
            Assert.True(tree.Find(11.800481504036675, 44.310122865099174, out id));
            Assert.True((new List<ulong> { 26, 29, 35, 36, 38, 41, 42, 43, 45 }).Contains(id));
            // Step79
            tree.Erase(38.000000000000000);
            tree.Erase(14.000000000000000);
            Assert.True(tree.Find(1.303892416519836, 15.889853999867615, out id));
            Assert.True((new List<ulong> { 32, 33, 41 }).Contains(id));
            // Step 80
            tree.Erase(17.000000000000000);
            tree.Erase(6.000000000000000);
            Assert.True(tree.Find(10.471344400700467, 24.761625817389987, out id));
            Assert.True((new List<ulong> { 29, 41, 45 }).Contains(id));
            // Step 81
            tree.Insert(17.000000000000000, 46);
            tree.Erase(28.000000000000000);
            Assert.False(tree.Find(21.155287762408747, 21.393232440794009, out id));
            // Step 82
            tree.Insert(9.000000000000000, 47);
            tree.Erase(43.000000000000000);
            Assert.True(tree.Find(16.746992044491289, 33.745780854173930, out id));
            Assert.True((new List<ulong> { 35, 38, 45, 46 }).Contains(id));
            // Step 83
            tree.Insert(44.000000000000000, 48);
            tree.Erase(38.000000000000000);
            Assert.False(tree.Find(40.332681754353025, 41.120621812917165, out id));
            // Step 84
            tree.Erase(30.000000000000000);
            tree.Erase(19.000000000000000);
            Assert.True(tree.Find(8.469050271369472, 27.577306810994784, out id));
            Assert.True((new List<ulong> { 29, 33, 41, 45, 46, 47 }).Contains(id));
            // Step 85
            tree.Insert(45.000000000000000, 49);
            tree.Erase(30.000000000000000);
            Assert.True(tree.Find(22.056450651794879, 46.745315465836427, out id));
            Assert.True((new List<ulong> { 26, 35, 43, 48, 49 }).Contains(id));
            // Step 86
            tree.Insert(31.000000000000000, 50);
            tree.Erase(41.000000000000000);
            Assert.True(tree.Find(5.336954121209442, 48.913766990604579, out id));
            Assert.True((new List<ulong> { 26, 29, 32, 33, 35, 41, 43, 45, 46, 47, 48, 49, 50 }).Contains(id));
            // Step 87
            tree.Erase(17.000000000000000);
            tree.Erase(17.000000000000000);
            Assert.True(tree.Find(16.207975820672843, 41.104553223901902, out id));
            Assert.True((new List<ulong> { 26, 35, 45, 50 }).Contains(id));
            // Step 88
            tree.Erase(36.000000000000000);
            tree.Erase(26.000000000000000);
            Assert.True(tree.Find(5.597777415882643, 30.818637237165408, out id));
            Assert.True((new List<ulong> { 29, 32, 33, 35, 41, 45, 47 }).Contains(id));
            // Step 89
            tree.Erase(45.000000000000000);
            tree.Erase(38.000000000000000);
            Assert.True(tree.Find(9.421272862234826, 23.704702966613549, out id));
            Assert.True((new List<ulong> { 29, 33, 41, 45 }).Contains(id));
            // Step 90
            tree.Erase(31.000000000000000);
            tree.Erase(36.000000000000000);
            Assert.True(tree.Find(16.119553812569709, 37.699912543666962, out id));
            Assert.True((new List<ulong> { 35, 45 }).Contains(id));
            // Step 91
            tree.Erase(42.000000000000000);
            tree.Erase(14.000000000000000);
            Assert.True(tree.Find(18.845670830411475, 44.054476672956774, out id));
            Assert.True((new List<ulong> { 35, 48 }).Contains(id));
            // Step 92
            tree.Erase(18.000000000000000);
            tree.Erase(4.000000000000000);
            Assert.True(tree.Find(27.947111389741146, 39.743879467990716, out id));
            Assert.True((new List<ulong> { 35 }).Contains(id));
            // Step 93
            tree.Erase(15.000000000000000);
            tree.Erase(22.000000000000000);
            Assert.False(tree.Find(29.085199319325898, 42.911191696349768, out id));
            // Step 94
            tree.Insert(3.000000000000000, 51);
            tree.Erase(46.000000000000000);
            Assert.True(tree.Find(13.818727140766063, 46.653004432428766, out id));
            Assert.True((new List<ulong> { 29, 35, 48 }).Contains(id));
            // Step 95
            tree.Erase(44.000000000000000);
            tree.Erase(4.000000000000000);
            Assert.False(tree.Find(17.251564280162807, 18.325669903260515, out id));
            // Step 96
            tree.Insert(44.000000000000000, 52);
            tree.Erase(46.000000000000000);
            Assert.True(tree.Find(6.895200826798131, 45.449147125012352, out id));
            Assert.True((new List<ulong> { 29, 32, 33, 35, 47, 52 }).Contains(id));
            // Step 97
            tree.Erase(44.000000000000000);
            tree.Erase(6.000000000000000);
            Assert.True(tree.Find(7.584456519513660, 19.462465682779513, out id));
            Assert.True((new List<ulong> { 29, 32, 33, 47 }).Contains(id));
            // Step 98
            tree.Insert(17.000000000000000, 53);
            tree.Erase(31.000000000000000);
            Assert.True(tree.Find(6.021708343571869, 45.980190857829342, out id));
            Assert.True((new List<ulong> { 29, 32, 33, 35, 47, 53 }).Contains(id));
            // Step 99
            tree.Erase(29.000000000000000);
            tree.Erase(49.000000000000000);
            Assert.False(tree.Find(27.678913519597899, 41.129001704116270, out id));
            // Step 100
            tree.Erase(8.000000000000000);
            tree.Erase(27.000000000000000);
            Assert.True(tree.Find(7.120735359705193, 36.195996408938541, out id));
            Assert.True((new List<ulong> { 29, 33, 47, 53 }).Contains(id));
            // Step 101
            tree.Erase(16.000000000000000);
            tree.Erase(36.000000000000000);
            Assert.True(tree.Find(8.087883044809645, 46.562503212204653, out id));
            Assert.True((new List<ulong> { 33, 47, 53 }).Contains(id));
            // Step 102
            tree.Erase(9.000000000000000);
            tree.Erase(9.000000000000000);
            Assert.True(tree.Find(6.192812677795101, 14.738220324071245, out id));
            Assert.True((new List<ulong> { 33 }).Contains(id));
            // Step 103
            tree.Insert(22.000000000000000, 54);
            tree.Erase(23.000000000000000);
            Assert.True(tree.Find(9.763765355878839, 31.609044525716200, out id));
            Assert.True((new List<ulong> { 33, 53, 54 }).Contains(id));
            // Step 104
            tree.Erase(50.000000000000000);
            tree.Erase(14.000000000000000);
            Assert.True(tree.Find(0.930847426511772, 21.747626026548527, out id));
            Assert.True((new List<ulong> { 33, 51, 53 }).Contains(id));
            // Step 105
            tree.Insert(5.000000000000000, 55);
            tree.Erase(18.000000000000000);
            Assert.False(tree.Find(30.220071144957977, 46.074851211239967, out id));
            // Step 106
            tree.Insert(23.000000000000000, 56);
            tree.Erase(39.000000000000000);
            Assert.True(tree.Find(16.821710545481167, 20.676239753961845, out id));
            Assert.True((new List<ulong> { 53 }).Contains(id));
            // Step 107
            tree.Erase(23.000000000000000);
            tree.Erase(33.000000000000000);
            Assert.True(tree.Find(18.285837381479187, 32.217556861516719, out id));
            Assert.True((new List<ulong> { 54 }).Contains(id));
            // Step 108
            tree.Insert(13.000000000000000, 57);
            tree.Erase(31.000000000000000);
            Assert.True(tree.Find(21.762664331312603, 26.837745060677559, out id));
            Assert.True((new List<ulong> { 54 }).Contains(id));
            // Step 109
            tree.Insert(9.000000000000000, 58);
            tree.Erase(41.000000000000000);
            Assert.True(tree.Find(13.771472249799000, 18.204928854705614, out id));
            Assert.True((new List<ulong> { 53 }).Contains(id));
            // Step 110
            tree.Insert(11.000000000000000, 59);
            tree.Erase(19.000000000000000);
            Assert.True(tree.Find(6.997623238434791, 38.867714793821165, out id));
            Assert.True((new List<ulong> { 33, 53, 54, 57, 58, 59 }).Contains(id));
            // Step 111
            tree.Insert(38.000000000000000, 60);
            tree.Erase(32.000000000000000);
            Assert.True(tree.Find(1.995342936339234, 33.575946575805013, out id));
            Assert.True((new List<ulong> { 33, 51, 53, 54, 55, 57, 58, 59 }).Contains(id));
            // Step 112
            tree.Insert(14.000000000000000, 61);
            tree.Erase(24.000000000000000);
            Assert.False(tree.Find(41.884030540165327, 43.201026324551641, out id));
            // Step 113
            tree.Insert(0.000000000000000, 62);
            tree.Erase(7.000000000000000);
            Assert.True(tree.Find(5.785040014831388, 35.853562521416571, out id));
            Assert.True((new List<ulong> { 33, 53, 54, 57, 58, 59, 61 }).Contains(id));
            // Step 114
            tree.Erase(5.000000000000000);
            tree.Erase(2.000000000000000);
            Assert.False(tree.Find(25.870525608967583, 33.523866506113329, out id));
            // Step 115
            tree.Erase(38.000000000000000);
            tree.Erase(1.000000000000000);
            Assert.True(tree.Find(1.938719922022797, 17.006670769504133, out id));
            Assert.True((new List<ulong> { 33, 51, 53, 57, 58, 59, 61 }).Contains(id));
            // Step 116
            tree.Insert(40.000000000000000, 63);
            tree.Erase(24.000000000000000);
            Assert.True(tree.Find(1.115458763255334, 33.068933142525239, out id));
            Assert.True((new List<ulong> { 33, 51, 53, 54, 57, 58, 59, 61 }).Contains(id));
            // Step 117
            tree.Erase(9.000000000000000);
            tree.Erase(19.000000000000000);
            Assert.False(tree.Find(17.016881773491477, 18.086352278945700, out id));
            // Step 118
            tree.Erase(3.000000000000000);
            tree.Erase(15.000000000000000);
            Assert.True(tree.Find(26.353378013989616, 41.688699492572162, out id));
            Assert.True((new List<ulong> { 63 }).Contains(id));
            // Step 119
            tree.Insert(2.000000000000000, 64);
            tree.Erase(38.000000000000000);
            Assert.True(tree.Find(15.374413550548560, 48.234227282056416, out id));
            Assert.True((new List<ulong> { 53, 54, 63 }).Contains(id));
            // Step 120
            tree.Insert(3.000000000000000, 65);
            tree.Erase(16.000000000000000);
            Assert.True(tree.Find(18.967724259836533, 43.487674474396101, out id));
            Assert.True((new List<ulong> { 54, 63 }).Contains(id));
            // Step 121
            tree.Erase(14.000000000000000);
            tree.Erase(20.000000000000000);
            Assert.True(tree.Find(19.352352072651470, 47.422578988389219, out id));
            Assert.True((new List<ulong> { 54, 63 }).Contains(id));
            // Step 122
            tree.Insert(14.000000000000000, 66);
            tree.Erase(9.000000000000000);
            Assert.False(tree.Find(20.927348375683742, 21.666416506670632, out id));
            // Step 123
            tree.Insert(9.000000000000000, 67);
            tree.Erase(42.000000000000000);
            Assert.True(tree.Find(6.994715225246095, 11.941316087006520, out id));
            Assert.True((new List<ulong> { 33, 59, 67 }).Contains(id));
            // Step 124
            tree.Erase(40.000000000000000);
            tree.Erase(23.000000000000000);
            Assert.True(tree.Find(3.724384790223340, 20.694262038225240, out id));
            Assert.True((new List<ulong> { 33, 53, 57, 59, 66, 67 }).Contains(id));
            // Step 125
            tree.Insert(1.000000000000000, 68);
            tree.Erase(41.000000000000000);
            Assert.True(tree.Find(16.094703456398250, 28.925695635211124, out id));
            Assert.True((new List<ulong> { 53, 54 }).Contains(id));
            // Step 126
            tree.Insert(5.000000000000000, 69);
            tree.Erase(45.000000000000000);
            Assert.True(tree.Find(10.245835465625735, 26.267743312452790, out id));
            Assert.True((new List<ulong> { 53, 54, 57, 59, 66 }).Contains(id));
            // Step 127
            tree.Erase(22.000000000000000);
            tree.Erase(38.000000000000000);
            Assert.True(tree.Find(8.240947285396983, 10.897741105158559, out id));
            Assert.True((new List<ulong> { 33, 67 }).Contains(id));
            // Step 128
            tree.Insert(47.000000000000000, 70);
            tree.Erase(28.000000000000000);
            Assert.True(tree.Find(15.193063554840730, 46.243152626671225, out id));
            Assert.True((new List<ulong> { 53 }).Contains(id));
            // Step 129
            tree.Erase(14.000000000000000);
            tree.Erase(27.000000000000000);
            Assert.True(tree.Find(12.842412809797359, 24.149337949608640, out id));
            Assert.True((new List<ulong> { 53, 57 }).Contains(id));
            // Step 130
            tree.Erase(9.000000000000000);
            tree.Erase(19.000000000000000);
            Assert.True(tree.Find(7.895465234570487, 26.170865886164218, out id));
            Assert.True((new List<ulong> { 33, 53, 57, 59 }).Contains(id));
            // Step 131
            tree.Erase(0.000000000000000);
            tree.Erase(35.000000000000000);
            Assert.True(tree.Find(2.455652154817711, 15.230421436744844, out id));
            Assert.True((new List<ulong> { 33, 57, 59, 65, 69 }).Contains(id));
            // Step 132
            tree.Erase(1.000000000000000);
            tree.Erase(22.000000000000000);
            Assert.False(tree.Find(28.040450738581974, 33.997710078400928, out id));
            // Step 133
            tree.Erase(5.000000000000000);
            tree.Erase(31.000000000000000);
            Assert.True(tree.Find(0.182536904919750, 43.265261454131874, out id));
            Assert.True((new List<ulong> { 33, 53, 57, 59, 64, 65 }).Contains(id));
            // Step 134
            tree.Insert(21.000000000000000, 71);
            tree.Erase(40.000000000000000);
            Assert.True(tree.Find(45.958491978734408, 47.358280673189249, out id));
            Assert.True((new List<ulong> { 70 }).Contains(id));
            // Step 135
            tree.Insert(29.000000000000000, 72);
            tree.Erase(37.000000000000000);
            Assert.True(tree.Find(3.340190360316292, 16.844718175431328, out id));
            Assert.True((new List<ulong> { 33, 57, 59 }).Contains(id));
            // Step 136
            tree.Erase(3.000000000000000);
            tree.Erase(22.000000000000000);
            Assert.True(tree.Find(0.925829506292702, 11.532959672730286, out id));
            Assert.True((new List<ulong> { 33, 59, 64 }).Contains(id));
            // Step 137
            tree.Insert(30.000000000000000, 73);
            tree.Erase(48.000000000000000);
            Assert.True(tree.Find(14.357718733577229, 26.639914937446679, out id));
            Assert.True((new List<ulong> { 53, 71 }).Contains(id));
            // Step 138
            tree.Insert(25.000000000000000, 74);
            tree.Erase(49.000000000000000);
            Assert.True(tree.Find(5.969905493290173, 12.241882505455354, out id));
            Assert.True((new List<ulong> { 33, 59 }).Contains(id));
            // Step 139
            tree.Erase(13.000000000000000);
            tree.Erase(50.000000000000000);
            Assert.True(tree.Find(4.211566245732856, 46.486055563766307, out id));
            Assert.True((new List<ulong> { 33, 53, 59, 71, 72, 73, 74 }).Contains(id));
            // Step 140
            tree.Erase(17.000000000000000);
            tree.Erase(7.000000000000000);
            Assert.True(tree.Find(30.882008820536548, 49.871096535696786, out id));
            Assert.True((new List<ulong> { 70 }).Contains(id));
            // Step 141
            tree.Erase(25.000000000000000);
            tree.Erase(5.000000000000000);
            Assert.True(tree.Find(19.463945684627632, 38.012012169283409, out id));
            Assert.True((new List<ulong> { 71, 72, 73 }).Contains(id));
            // Step 142
            tree.Erase(21.000000000000000);
            tree.Erase(12.000000000000000);
            Assert.True(tree.Find(18.093691309999599, 44.527042607464942, out id));
            Assert.True((new List<ulong> { 72, 73 }).Contains(id));
            // Step 143
            tree.Erase(2.000000000000000);
            tree.Erase(13.000000000000000);
            Assert.False(tree.Find(21.232352907910951, 28.804017983322154, out id));
            // Step 144
            tree.Insert(16.000000000000000, 75);
            tree.Erase(31.000000000000000);
            Assert.False(tree.Find(22.881190159630123, 28.643924628332464, out id));
            // Step 145
            tree.Insert(5.000000000000000, 76);
            tree.Erase(1.000000000000000);
            Assert.True(tree.Find(13.703214187471740, 22.463786138500293, out id));
            Assert.True((new List<ulong> { 75 }).Contains(id));
            // Step 146
            tree.Insert(4.000000000000000, 77);
            tree.Erase(39.000000000000000);
            Assert.False(tree.Find(21.441760655657649, 27.147306001104894, out id));
            // Step 147
            tree.Insert(18.000000000000000, 78);
            tree.Erase(50.000000000000000);
            Assert.True(tree.Find(3.199112589809245, 39.002331211926673, out id));
            Assert.True((new List<ulong> { 33, 59, 72, 73, 75, 76, 77, 78 }).Contains(id));
            // Step 148
            tree.Erase(4.000000000000000);
            tree.Erase(22.000000000000000);
            Assert.True(tree.Find(23.168649739660797, 40.803755754119344, out id));
            Assert.True((new List<ulong> { 72, 73 }).Contains(id));
            // Step 149
            tree.Erase(18.000000000000000);
            tree.Erase(32.000000000000000);
            Assert.True(tree.Find(11.030941955031343, 32.477580221209799, out id));
            Assert.True((new List<ulong> { 72, 73, 75 }).Contains(id));
            // Step 150
            tree.Insert(46.000000000000000, 79);
            tree.Erase(36.000000000000000);
            Assert.True(tree.Find(4.570873733808628, 9.705940385727329, out id));
            Assert.True((new List<ulong> { 76 }).Contains(id));
            // Step 151
            tree.Insert(27.000000000000000, 80);
            tree.Erase(23.000000000000000);
            Assert.True(tree.Find(14.096517280730525, 17.916010101301833, out id));
            Assert.True((new List<ulong> { 75 }).Contains(id));
            // Step 152
            tree.Erase(10.000000000000000);
            tree.Erase(45.000000000000000);
            Assert.True(tree.Find(25.907124416523498, 27.816583069744343, out id));
            Assert.True((new List<ulong> { 80 }).Contains(id));
            // Step 153
            tree.Erase(16.000000000000000);
            tree.Erase(48.000000000000000);
            Assert.True(tree.Find(24.366641824921086, 31.447394890192271, out id));
            Assert.True((new List<ulong> { 72, 73, 80 }).Contains(id));
            // Step 154
            tree.Insert(31.000000000000000, 81);
            tree.Erase(2.000000000000000);
            Assert.True(tree.Find(27.472721274926510, 48.292202246075369, out id));
            Assert.True((new List<ulong> { 70, 72, 73, 79, 81 }).Contains(id));
            // Step 155
            tree.Insert(24.000000000000000, 82);
            tree.Erase(32.000000000000000);
            Assert.True(tree.Find(21.611341347474688, 37.919910893700788, out id));
            Assert.True((new List<ulong> { 72, 73, 80, 81, 82 }).Contains(id));
            // Step 156
            tree.Erase(47.000000000000000);
            tree.Erase(39.000000000000000);
            Assert.True(tree.Find(23.856955751367920, 38.202980087889642, out id));
            Assert.True((new List<ulong> { 72, 73, 80, 81, 82 }).Contains(id));
            // Step 157
            tree.Insert(33.000000000000000, 83);
            tree.Erase(17.000000000000000);
            Assert.True(tree.Find(14.099416076540816, 41.531303038939200, out id));
            Assert.True((new List<ulong> { 72, 73, 80, 81, 82, 83 }).Contains(id));
            // Step 158
            tree.Insert(7.000000000000000, 84);
            tree.Erase(41.000000000000000);
            Assert.False(tree.Find(46.698941998579215, 47.175821393651283, out id));
            // Step 159
            tree.Erase(31.000000000000000);
            tree.Erase(25.000000000000000);
            Assert.True(tree.Find(9.527952107538956, 47.671114004020886, out id));
            Assert.True((new List<ulong> { 59, 72, 73, 79, 80, 82, 83 }).Contains(id));
            // Step 160
            tree.Erase(24.000000000000000);
            tree.Erase(39.000000000000000);
            Assert.True(tree.Find(27.959260444530688, 38.398853259277580, out id));
            Assert.True((new List<ulong> { 72, 73, 83 }).Contains(id));
            // Step 161
            tree.Erase(29.000000000000000);
            tree.Erase(47.000000000000000);
            Assert.True(tree.Find(32.686529365199839, 39.544362939710211, out id));
            Assert.True((new List<ulong> { 83 }).Contains(id));
            // Step 162
            tree.Erase(11.000000000000000);
            tree.Erase(45.000000000000000);
            Assert.False(tree.Find(11.124287732918148, 21.901134572622666, out id));
            // Step 163
            tree.Insert(24.000000000000000, 85);
            tree.Erase(19.000000000000000);
            Assert.True(tree.Find(2.947821686888397, 10.891563676693783, out id));
            Assert.True((new List<ulong> { 76, 84 }).Contains(id));
            // Step 164
            tree.Insert(2.000000000000000, 86);
            tree.Erase(13.000000000000000);
            Assert.True(tree.Find(28.695009725319853, 42.695709466992234, out id));
            Assert.True((new List<ulong> { 73, 83 }).Contains(id));
            // Step 165
            tree.Insert(47.000000000000000, 87);
            tree.Erase(50.000000000000000);
            Assert.True(tree.Find(5.378811233473874, 8.744112076505672, out id));
            Assert.True((new List<ulong> { 84 }).Contains(id));
            // Step 166
            tree.Insert(38.000000000000000, 88);
            tree.Erase(11.000000000000000);
            Assert.True(tree.Find(12.856043539972045, 35.669110891518265, out id));
            Assert.True((new List<ulong> { 73, 80, 83, 85 }).Contains(id));
            // Step 167
            tree.Erase(7.000000000000000);
            tree.Erase(22.000000000000000);
            Assert.True(tree.Find(28.314704983442201, 30.769647156012514, out id));
            Assert.True((new List<ulong> { 73 }).Contains(id));
            // Step 168
            tree.Erase(5.000000000000000);
            tree.Erase(29.000000000000000);
            Assert.True(tree.Find(18.047090902479162, 44.763604521093754, out id));
            Assert.True((new List<ulong> { 73, 80, 83, 85, 88 }).Contains(id));
            // Step 169
            tree.Insert(14.000000000000000, 89);
            tree.Erase(4.000000000000000);
            Assert.False(tree.Find(32.164786799949297, 32.753011036622446, out id));
            // Step 170
            tree.Insert(4.000000000000000, 90);
            tree.Erase(48.000000000000000);
            Assert.True(tree.Find(23.042468621659477, 48.838455814450199, out id));
            Assert.True((new List<ulong> { 73, 79, 80, 83, 85, 87, 88 }).Contains(id));
            // Step 171
            tree.Insert(44.000000000000000, 91);
            tree.Erase(31.000000000000000);
            Assert.False(tree.Find(16.176297673401219, 21.445578848499018, out id));
            // Step 172
            tree.Insert(40.000000000000000, 92);
            tree.Erase(11.000000000000000);
            Assert.True(tree.Find(21.124942744936444, 45.417103842305679, out id));
            Assert.True((new List<ulong> { 73, 80, 83, 85, 88, 91, 92 }).Contains(id));
            // Step 173
            tree.Insert(19.000000000000000, 93);
            tree.Erase(36.000000000000000);
            Assert.True(tree.Find(8.398572397001896, 26.784563695475466, out id));
            Assert.True((new List<ulong> { 85, 89, 93 }).Contains(id));
            // Step 174
            tree.Erase(4.000000000000000);
            tree.Erase(49.000000000000000);
            Assert.True(tree.Find(31.212795204261106, 35.251784801900051, out id));
            Assert.True((new List<ulong> { 83 }).Contains(id));
            // Step 175
            tree.Insert(29.000000000000000, 94);
            tree.Erase(32.000000000000000);
            Assert.True(tree.Find(12.139212452331588, 24.662732471617289, out id));
            Assert.True((new List<ulong> { 85, 89, 93 }).Contains(id));
            // Step 176
            tree.Erase(38.000000000000000);
            tree.Erase(5.000000000000000);
            Assert.True(tree.Find(6.098441150924533, 15.970171536414062, out id));
            Assert.True((new List<ulong> { 89 }).Contains(id));
            // Step 177
            tree.Insert(34.000000000000000, 95);
            tree.Erase(41.000000000000000);
            Assert.True(tree.Find(14.682302655780244, 49.858915244696732, out id));
            Assert.True((new List<ulong> { 73, 79, 80, 83, 85, 87, 91, 92, 93, 94, 95 }).Contains(id));
            // Step 178
            tree.Insert(17.000000000000000, 96);
            tree.Erase(13.000000000000000);
            Assert.True(tree.Find(10.238477940926677, 42.297843214856940, out id));
            Assert.True((new List<ulong> { 73, 80, 83, 85, 89, 92, 93, 94, 95, 96 }).Contains(id));
            // Step 179
            tree.Erase(2.000000000000000);
            tree.Erase(2.000000000000000);
            Assert.True(tree.Find(19.407836185614325, 38.952232315385451, out id));
            Assert.True((new List<ulong> { 73, 80, 83, 85, 94, 95 }).Contains(id));
            // Step 180
            tree.Insert(35.000000000000000, 97);
            tree.Erase(9.000000000000000);
            Assert.True(tree.Find(15.644579296828720, 30.380928452666705, out id));
            Assert.True((new List<ulong> { 73, 80, 85, 93, 94, 96 }).Contains(id));
            // Step 181
            tree.Insert(37.000000000000000, 98);
            tree.Erase(39.000000000000000);
            Assert.True(tree.Find(19.479679265011796, 49.582664918381795, out id));
            Assert.True((new List<ulong> { 73, 79, 80, 83, 85, 87, 91, 92, 94, 95, 97, 98 }).Contains(id));
            // Step 182
            tree.Insert(21.000000000000000, 99);
            tree.Erase(39.000000000000000);
            Assert.True(tree.Find(26.519850418225076, 38.904427134442294, out id));
            Assert.True((new List<ulong> { 73, 80, 83, 94, 95, 97, 98 }).Contains(id));
            // Step 183
            tree.Insert(25.000000000000000, 100);
            tree.Erase(1.000000000000000);
            Assert.False(tree.Find(5.023733153939541, 7.451947892883970, out id));
            // Step 184
            tree.Insert(13.000000000000000, 101);
            tree.Erase(7.000000000000000);
            Assert.True(tree.Find(1.054880583992063, 31.594818597731706, out id));
            Assert.True((new List<ulong> { 73, 80, 85, 89, 93, 94, 96, 99, 100, 101 }).Contains(id));
            // Step 185
            tree.Erase(29.000000000000000);
            tree.Erase(3.000000000000000);
            Assert.False(tree.Find(4.975576044816582, 7.294612752237361, out id));
            // Step 186
            tree.Insert(38.000000000000000, 102);
            tree.Erase(32.000000000000000);
            Assert.True(tree.Find(7.205611702857939, 26.182442050497013, out id));
            Assert.True((new List<ulong> { 85, 89, 93, 96, 99, 100, 101 }).Contains(id));
            // Step 187
            tree.Insert(3.000000000000000, 103);
            tree.Erase(29.000000000000000);
            Assert.True(tree.Find(45.433908823694225, 48.691884285148163, out id));
            Assert.True((new List<ulong> { 79, 87 }).Contains(id));
            // Step 188
            tree.Insert(1.000000000000000, 104);
            tree.Erase(7.000000000000000);
            Assert.True(tree.Find(5.283350843679796, 13.130672370898310, out id));
            Assert.True((new List<ulong> { 101 }).Contains(id));
            // Step 189
            tree.Insert(15.000000000000000, 105);
            tree.Erase(39.000000000000000);
            Assert.True(tree.Find(21.743356493489095, 40.655796465207168, out id));
            Assert.True((new List<ulong> { 73, 80, 83, 85, 92, 95, 97, 98, 100, 102 }).Contains(id));
            // Step 190
            tree.Insert(10.000000000000000, 106);
            tree.Erase(45.000000000000000);
            Assert.True(tree.Find(28.778596508570729, 38.176953339000981, out id));
            Assert.True((new List<ulong> { 73, 83, 95, 97, 98, 102 }).Contains(id));
            // Step 191
            tree.Insert(42.000000000000000, 107);
            tree.Erase(28.000000000000000);
            Assert.True(tree.Find(4.076443643777622, 17.888848641743095, out id));
            Assert.True((new List<ulong> { 89, 96, 101, 105, 106 }).Contains(id));
            // Step 192
            tree.Erase(34.000000000000000);
            tree.Erase(9.000000000000000);
            Assert.True(tree.Find(11.715232120023172, 41.142040270177198, out id));
            Assert.True((new List<ulong> { 73, 80, 83, 85, 89, 92, 93, 96, 97, 98, 99, 100, 101, 102, 105 }).Contains(id));
            // Step 193
            tree.Erase(10.000000000000000);
            tree.Erase(41.000000000000000);
            Assert.True(tree.Find(33.081151810164798, 39.024305247673482, out id));
            Assert.True((new List<ulong> { 97, 98, 102 }).Contains(id));
            // Step 194
            tree.Erase(44.000000000000000);
            tree.Erase(2.000000000000000);
            Assert.True(tree.Find(13.455054615423107, 36.876006527825567, out id));
            Assert.True((new List<ulong> { 73, 80, 83, 85, 89, 93, 96, 97, 99, 100, 105 }).Contains(id));
            // Step 195
            tree.Erase(35.000000000000000);
            tree.Erase(2.000000000000000);
            Assert.True(tree.Find(0.199299401071690, 39.959177214169870, out id));
            Assert.True((new List<ulong> { 73, 80, 83, 85, 89, 93, 96, 98, 99, 100, 101, 102, 103, 104, 105 }).Contains(id));
            // Step 196
            tree.Erase(40.000000000000000);
            tree.Erase(35.000000000000000);
            Assert.True(tree.Find(12.064292436062996, 33.777623342018707, out id));
            Assert.True((new List<ulong> { 73, 80, 83, 85, 89, 93, 96, 99, 100, 101, 105 }).Contains(id));
            // Step 197
            tree.Erase(27.000000000000000);
            tree.Erase(28.000000000000000);
            Assert.True(tree.Find(15.334104638148609, 41.475926649127523, out id));
            Assert.True((new List<ulong> { 73, 83, 85, 93, 96, 98, 99, 100, 102 }).Contains(id));
            // Step 198
            tree.Erase(42.000000000000000);
            tree.Erase(27.000000000000000);
            Assert.False(tree.Find(45.646546776903477, 45.811750637615724, out id));
            // Step 199
            tree.Erase(33.000000000000000);
            tree.Erase(8.000000000000000);
            Assert.True(tree.Find(6.256182184112808, 38.249524925036297, out id));
            Assert.True((new List<ulong> { 73, 85, 89, 93, 96, 98, 99, 100, 101, 102, 105 }).Contains(id));
            // Step 200
            tree.Erase(46.000000000000000);
            tree.Erase(45.000000000000000);
            Assert.True(tree.Find(5.671556122489307, 36.133052668216791, out id));
            Assert.True((new List<ulong> { 73, 85, 89, 93, 96, 99, 100, 101, 105 }).Contains(id));
        }

        [Fact]
        public void SegmentTree3dTest()
        {
            var tree = new AdaptiveGrid.SegmentTree3d();
            ulong id;

            // Step 1
            tree.Insert(10.000000000000000, 3.000000000000000, 9.000000000000000, 1);
            tree.Erase(3.000000000000000, 3.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(5.665417755480634, 6.034071720888596, 7.742584046349047, 9.629447866662256, 8.768938716272300, 9.731458485607606, out id));
            // Step 2
            tree.Erase(10.000000000000000, 3.000000000000000, 9.000000000000000);
            tree.Erase(4.000000000000000, 6.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(3.632164567616905, 8.341702966279080, 4.025982958446958, 8.241413587897270, 2.001903873662214, 5.696821052274863, out id));
            // Step 3
            tree.Insert(1.000000000000000, 9.000000000000000, 9.000000000000000, 2);
            tree.Erase(8.000000000000000, 10.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(0.762865299588348, 4.938180507289443, 6.068880881493037, 6.178265718888737, 5.926916704413545, 9.844210911838786, out id));
            // Step 4
            tree.Insert(6.000000000000000, 5.000000000000000, 7.000000000000000, 3);
            tree.Erase(4.000000000000000, 5.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(2.078907794364654, 2.853017841995236, 1.365741828651300, 8.289349590334504, 2.982741287438363, 8.290008667720018, out id));
            // Step 5
            tree.Insert(2.000000000000000, 0.000000000000000, 1.000000000000000, 4);
            tree.Erase(7.000000000000000, 0.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(6.021189346240058, 9.420310533063425, 2.492876357067710, 2.899456023442339, 2.630830489276081, 3.113931276922040, out id));
            // Step 6
            tree.Erase(6.000000000000000, 5.000000000000000, 7.000000000000000);
            tree.Erase(4.000000000000000, 4.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(3.095439532134350, 6.622395637737052, 4.805246885663691, 7.822439890136481, 0.938639112644708, 9.024945004902921, out id));
            // Step 7
            tree.Insert(4.000000000000000, 5.000000000000000, 1.000000000000000, 5);
            tree.Erase(10.000000000000000, 4.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(1.969067000823932, 9.778862801144165, 2.742329082468315, 5.222319032555384, 1.374331173992909, 6.056493215269883, out id));
            // Step 8
            tree.Insert(7.000000000000000, 3.000000000000000, 3.000000000000000, 6);
            tree.Erase(7.000000000000000, 9.000000000000000, 7.000000000000000);
            Assert.True(tree.Find(1.616437590341160, 8.073918819139909, 1.648774114241165, 7.034354872769365, 2.298953014925337, 4.542821006542316, out id));
            Assert.True((new List<ulong> { 6 }).Contains(id));
            // Step 9
            tree.Insert(2.000000000000000, 5.000000000000000, 7.000000000000000, 7);
            tree.Erase(0.000000000000000, 5.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(1.325120675284264, 7.012420344982812, 0.903594174521473, 2.330853197954266, 2.076376710169074, 9.930135257194602, out id));
            // Step 10
            tree.Insert(2.000000000000000, 4.000000000000000, 6.000000000000000, 8);
            tree.Erase(4.000000000000000, 9.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(3.670932225271550, 6.030276463581966, 1.092958058488909, 5.929869652347408, 2.152049414735658, 3.880131694115768, out id));
            // Step 11
            tree.Erase(2.000000000000000, 4.000000000000000, 6.000000000000000);
            tree.Erase(10.000000000000000, 7.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(3.903184185154517, 6.121891714883281, 4.998944842908454, 9.058447807217560, 1.540731077809095, 4.769702889712586, out id));
            // Step 12
            tree.Insert(0.000000000000000, 10.000000000000000, 7.000000000000000, 9);
            tree.Erase(10.000000000000000, 9.000000000000000, 10.000000000000000);
            Assert.True(tree.Find(0.267070195329513, 3.050033549150547, 0.118232673932688, 7.850790228088481, 2.016155301222059, 8.787212565356924, out id));
            Assert.True((new List<ulong> { 7 }).Contains(id));
            // Step 13
            tree.Erase(2.000000000000000, 0.000000000000000, 1.000000000000000);
            tree.Erase(10.000000000000000, 5.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(7.900347734653169, 8.120370687494500, 5.950404832201340, 8.948919993630115, 0.004322897392013, 7.078215163257047, out id));
            // Step 14
            tree.Erase(7.000000000000000, 3.000000000000000, 3.000000000000000);
            tree.Erase(6.000000000000000, 5.000000000000000, 2.000000000000000);
            Assert.True(tree.Find(0.208361807853376, 3.195748794649995, 2.034261232502329, 8.632686898443419, 5.830095926886979, 7.374903127889035, out id));
            Assert.True((new List<ulong> { 7 }).Contains(id));
            // Step 15
            tree.Insert(0.000000000000000, 3.000000000000000, 0.000000000000000, 10);
            tree.Erase(1.000000000000000, 10.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(5.084117705762269, 6.643480177967199, 0.819686680149867, 9.716866227349101, 3.715268800760390, 5.759893504717963, out id));
            // Step 16
            tree.Insert(6.000000000000000, 5.000000000000000, 9.000000000000000, 11);
            tree.Erase(1.000000000000000, 9.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(3.454882309042320, 6.082866621761058, 0.155738483597055, 9.976989289100262, 3.995207181221252, 5.072610612063295, out id));
            // Step 17
            tree.Insert(4.000000000000000, 6.000000000000000, 6.000000000000000, 12);
            tree.Erase(3.000000000000000, 1.000000000000000, 2.000000000000000);
            Assert.True(tree.Find(3.484728419830667, 4.436835462185763, 5.514540959669993, 7.519752438253126, 2.917570595206635, 6.291099069900098, out id));
            Assert.True((new List<ulong> { 12 }).Contains(id));
            // Step 18
            tree.Insert(0.000000000000000, 2.000000000000000, 6.000000000000000, 13);
            tree.Erase(6.000000000000000, 9.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(2.042888121142756, 7.248994055260925, 3.718235144832952, 6.869341172753709, 3.474836950765391, 8.496110061518253, out id));
            Assert.True((new List<ulong> { 12 }).Contains(id));
            // Step 19
            tree.Erase(0.000000000000000, 2.000000000000000, 6.000000000000000);
            tree.Erase(9.000000000000000, 9.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(0.644938681469235, 8.572355393829952, 2.911058736027841, 4.709970546740384, 4.477012352032425, 9.802164582572125, out id));
            // Step 20
            tree.Insert(5.000000000000000, 8.000000000000000, 6.000000000000000, 14);
            tree.Erase(6.000000000000000, 0.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(3.640796052835728, 3.976674197967540, 0.475401156298952, 1.704453316656015, 2.617097941224340, 4.637364386828734, out id));
            // Step 21
            tree.Erase(6.000000000000000, 5.000000000000000, 9.000000000000000);
            tree.Erase(8.000000000000000, 1.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(2.562100279841427, 3.861303373416947, 5.204210759254617, 6.049749772649118, 4.119588908608728, 6.076137471172993, out id));
            // Step 22
            tree.Erase(4.000000000000000, 5.000000000000000, 1.000000000000000);
            tree.Erase(1.000000000000000, 6.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(4.337715973225658, 9.758712452824197, 1.285267027921783, 5.880835919371274, 3.001200124619023, 8.074625982748380, out id));
            // Step 23
            tree.Insert(3.000000000000000, 3.000000000000000, 8.000000000000000, 15);
            tree.Erase(7.000000000000000, 0.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(2.579269209225466, 8.983874929566353, 2.823226966719474, 6.883309406625488, 4.681122660491912, 4.849231428610175, out id));
            // Step 24
            tree.Erase(2.000000000000000, 5.000000000000000, 7.000000000000000);
            tree.Erase(2.000000000000000, 6.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(8.936287620032276, 9.053461222997793, 5.004058510269481, 8.747932699252701, 4.204920146733961, 9.316684190519153, out id));
            // Step 25
            tree.Erase(0.000000000000000, 3.000000000000000, 0.000000000000000);
            tree.Erase(7.000000000000000, 6.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(3.267530872881628, 3.484821810954120, 1.396815420447888, 3.207284081769279, 0.647387259389705, 7.413424542866482, out id));
            // Step 26
            tree.Insert(7.000000000000000, 9.000000000000000, 10.000000000000000, 16);
            tree.Erase(9.000000000000000, 6.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(1.226765278776628, 9.431949209047271, 5.519881881735288, 9.232268518501494, 2.964180050645732, 7.840228682246537, out id));
            Assert.True((new List<ulong> { 12, 14 }).Contains(id));
            // Step 27
            tree.Erase(7.000000000000000, 9.000000000000000, 10.000000000000000);
            tree.Erase(5.000000000000000, 1.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(4.832282512156846, 6.235865884729032, 3.384182403500597, 9.339168350851267, 0.280807481088807, 1.520633951622029, out id));
            // Step 28
            tree.Insert(2.000000000000000, 6.000000000000000, 0.000000000000000, 17);
            tree.Erase(6.000000000000000, 5.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(6.792875169951953, 9.030668223537525, 2.622419136117818, 4.289678698546302, 1.853601187092236, 4.036273378829510, out id));
            // Step 29
            tree.Insert(1.000000000000000, 8.000000000000000, 3.000000000000000, 18);
            tree.Erase(1.000000000000000, 10.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(4.063519609265503, 4.540837889401734, 5.566414688202053, 6.087680720300838, 2.019936390738004, 2.367959490981573, out id));
            // Step 30
            tree.Insert(0.000000000000000, 4.000000000000000, 4.000000000000000, 19);
            tree.Erase(6.000000000000000, 6.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(6.296962715259598, 6.716904703311547, 1.716631420109296, 3.353972203052669, 1.790037515774093, 9.673740453089763, out id));
            // Step 31
            tree.Erase(5.000000000000000, 8.000000000000000, 6.000000000000000);
            tree.Erase(7.000000000000000, 9.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(3.738467109948684, 4.497352141812170, 0.013428166688356, 0.331153458032128, 3.202897743374026, 6.563668939988832, out id));
            // Step 32
            tree.Erase(4.000000000000000, 6.000000000000000, 6.000000000000000);
            tree.Erase(7.000000000000000, 6.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(8.079430509173189, 9.462674906473856, 3.627392642321798, 7.902792083608033, 1.269398173049526, 3.132598660681736, out id));
            // Step 33
            tree.Insert(2.000000000000000, 3.000000000000000, 5.000000000000000, 20);
            tree.Erase(5.000000000000000, 2.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(0.260778483303967, 3.142104240681891, 3.177970799973523, 5.155922182568805, 9.469950008391162, 9.494251065777760, out id));
            // Step 34
            tree.Erase(1.000000000000000, 9.000000000000000, 9.000000000000000);
            tree.Erase(7.000000000000000, 2.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(0.555853279166352, 4.449923815419126, 1.731341230378000, 9.666772644359963, 6.789544249694037, 7.851430687188213, out id));
            // Step 35
            tree.Insert(10.000000000000000, 6.000000000000000, 2.000000000000000, 21);
            tree.Erase(9.000000000000000, 2.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(1.488083958002382, 9.194550465290801, 2.906129149301424, 3.083679344620267, 6.793535554205023, 7.148198917126852, out id));
            // Step 36
            tree.Insert(10.000000000000000, 4.000000000000000, 7.000000000000000, 22);
            tree.Erase(10.000000000000000, 1.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(3.327951256274390, 9.782753398120915, 2.662276277255975, 9.320177482110935, 8.025929020501007, 8.833437804876990, out id));
            // Step 37
            tree.Erase(10.000000000000000, 6.000000000000000, 2.000000000000000);
            tree.Erase(9.000000000000000, 6.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(3.321895909551343, 5.739626726607543, 8.893171748997805, 9.827221690690152, 1.884254572446965, 8.037234664564240, out id));
            // Step 38
            tree.Insert(6.000000000000000, 8.000000000000000, 10.000000000000000, 23);
            tree.Erase(9.000000000000000, 2.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(4.651639114390992, 7.819368919632154, 3.769134166082295, 8.001916499676270, 0.678189550540323, 8.810895334591354, out id));
            // Step 39
            tree.Erase(3.000000000000000, 3.000000000000000, 8.000000000000000);
            tree.Erase(8.000000000000000, 1.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(4.534401397845148, 8.582238339269953, 5.817039863865180, 9.196561764264056, 0.565331930445530, 9.840889922778992, out id));
            // Step 40
            tree.Erase(2.000000000000000, 6.000000000000000, 0.000000000000000);
            tree.Erase(2.000000000000000, 3.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(0.645480852203911, 2.425881577023371, 5.698721331448475, 8.690239711632374, 6.888525713385505, 9.853462282799750, out id));
            // Step 41
            tree.Insert(5.000000000000000, 5.000000000000000, 9.000000000000000, 24);
            tree.Erase(7.000000000000000, 1.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(4.432782261762717, 5.044127102794457, 0.765681287459286, 2.632587812739555, 1.204341668714374, 9.196038171565867, out id));
            // Step 42
            tree.Erase(5.000000000000000, 5.000000000000000, 9.000000000000000);
            tree.Erase(3.000000000000000, 8.000000000000000, 4.000000000000000);
            Assert.True(tree.Find(1.779950452312831, 2.291387798975952, 1.424147071941039, 7.239199281787708, 2.301391416306529, 9.662268009973031, out id));
            Assert.True((new List<ulong> { 20 }).Contains(id));
            // Step 43
            tree.Erase(1.000000000000000, 8.000000000000000, 3.000000000000000);
            tree.Erase(2.000000000000000, 8.000000000000000, 5.000000000000000);
            Assert.True(tree.Find(1.547253302839726, 9.332053223539610, 1.330324288811163, 9.508650933036588, 3.659897717250949, 8.098493307476886, out id));
            Assert.True((new List<ulong> { 20 }).Contains(id));
            // Step 44
            tree.Erase(10.000000000000000, 4.000000000000000, 7.000000000000000);
            tree.Erase(3.000000000000000, 3.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(0.935402246916516, 5.340211423855462, 0.747846892774356, 8.999811730238239, 6.044014228991595, 9.214970242247993, out id));
            // Step 45
            tree.Insert(0.000000000000000, 5.000000000000000, 9.000000000000000, 25);
            tree.Erase(6.000000000000000, 7.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(3.408959481864777, 4.097624594668341, 5.240213695492679, 6.732717109152432, 9.583921177729401, 9.606131702923429, out id));
            // Step 46
            tree.Insert(5.000000000000000, 6.000000000000000, 3.000000000000000, 26);
            tree.Erase(8.000000000000000, 1.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(3.640985770941123, 9.699698064600380, 2.754294449959800, 8.155493437240187, 8.487637502950244, 8.917994801626799, out id));
            // Step 47
            tree.Erase(6.000000000000000, 8.000000000000000, 10.000000000000000);
            tree.Erase(2.000000000000000, 9.000000000000000, 8.000000000000000);
            Assert.True(tree.Find(0.399068587267847, 6.715189315161004, 4.832827434919166, 9.916540177393466, 2.331258906336863, 8.640205264910328, out id));
            Assert.True((new List<ulong> { 26 }).Contains(id));
            // Step 48
            tree.Insert(10.000000000000000, 3.000000000000000, 2.000000000000000, 27);
            tree.Erase(0.000000000000000, 1.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(1.157008002966278, 2.804803529803995, 3.061169984487263, 5.174105121793517, 1.573519938628525, 6.704773301222665, out id));
            // Step 49
            tree.Insert(5.000000000000000, 3.000000000000000, 0.000000000000000, 28);
            tree.Erase(10.000000000000000, 0.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(8.359803996622244, 9.971482708322233, 0.223091752651067, 6.613786628505048, 3.077897328547082, 3.364329584830096, out id));
            // Step 50
            tree.Erase(2.000000000000000, 3.000000000000000, 5.000000000000000);
            tree.Erase(3.000000000000000, 3.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(1.057531330471749, 5.270675602797922, 4.568045162184029, 8.337739898514432, 6.002307755104045, 6.314694883937135, out id));
            // Step 51
            tree.Insert(1.000000000000000, 9.000000000000000, 3.000000000000000, 29);
            tree.Erase(5.000000000000000, 0.000000000000000, 4.000000000000000);
            Assert.True(tree.Find(3.793544851967306, 8.697534894879221, 1.680661656118991, 9.968484962119259, 1.544427975047159, 3.168783109519748, out id));
            Assert.True((new List<ulong> { 26 }).Contains(id));
            // Step 52
            tree.Insert(5.000000000000000, 3.000000000000000, 2.000000000000000, 30);
            tree.Erase(6.000000000000000, 0.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(8.140828305109746, 9.485405944321025, 1.431275357366326, 1.817274684603434, 1.398943045049219, 2.388263217401304, out id));
            // Step 53
            tree.Erase(1.000000000000000, 9.000000000000000, 3.000000000000000);
            tree.Erase(5.000000000000000, 6.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(0.744876958044668, 8.793709239158785, 6.449224674842809, 8.227683679446452, 6.150304196664237, 9.795510819680915, out id));
            // Step 54
            tree.Insert(1.000000000000000, 8.000000000000000, 8.000000000000000, 31);
            tree.Erase(3.000000000000000, 2.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(3.439781305406661, 8.677937468922515, 0.293318269015770, 5.954938174631805, 4.242750157512949, 6.599058713194958, out id));
            // Step 55
            tree.Erase(5.000000000000000, 3.000000000000000, 2.000000000000000);
            tree.Erase(9.000000000000000, 0.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(3.873819595797863, 4.276598487559575, 2.149256672778346, 4.460130036781795, 3.121662253396012, 9.398382637801587, out id));
            // Step 56
            tree.Erase(0.000000000000000, 10.000000000000000, 7.000000000000000);
            tree.Erase(3.000000000000000, 4.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(3.046084287348969, 9.953180145726115, 0.491130430963542, 2.529139566152670, 9.366187800516700, 9.796755460397137, out id));
            // Step 57
            tree.Insert(10.000000000000000, 1.000000000000000, 8.000000000000000, 32);
            tree.Erase(2.000000000000000, 6.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(0.036507380983950, 8.653052290826375, 3.363136770758425, 4.474106760314704, 9.191698395746881, 9.471656134637850, out id));
            // Step 58
            tree.Insert(7.000000000000000, 9.000000000000000, 5.000000000000000, 33);
            tree.Erase(0.000000000000000, 1.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(2.611987727956845, 3.695848312339034, 0.185165901258540, 2.306591934546057, 4.813903328882142, 5.784033649113290, out id));
            // Step 59
            tree.Erase(5.000000000000000, 6.000000000000000, 3.000000000000000);
            tree.Erase(8.000000000000000, 6.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(0.336825344326916, 1.265033142375732, 7.890446788387844, 8.808178539876421, 0.564750874766790, 2.290094651427882, out id));
            // Step 60
            tree.Insert(1.000000000000000, 1.000000000000000, 6.000000000000000, 34);
            tree.Erase(9.000000000000000, 3.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(0.746471858193180, 4.941470256722418, 3.892789136925527, 7.602402433856682, 2.314554434005128, 5.379258901405619, out id));
            // Step 61
            tree.Erase(1.000000000000000, 8.000000000000000, 8.000000000000000);
            tree.Erase(4.000000000000000, 5.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(5.760803596664431, 9.501598642653379, 3.962589751604849, 4.246470581582190, 2.554422132494611, 5.728784925666492, out id));
            // Step 62
            tree.Insert(5.000000000000000, 1.000000000000000, 0.000000000000000, 35);
            tree.Erase(7.000000000000000, 4.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(0.720061721442931, 7.056115880393872, 6.140843587281942, 9.904432039182344, 6.557812966194607, 9.278040624668245, out id));
            // Step 63
            tree.Insert(1.000000000000000, 7.000000000000000, 10.000000000000000, 36);
            tree.Erase(3.000000000000000, 7.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(4.633729947932159, 8.160751150823868, 0.372971973876935, 7.942360078110707, 5.066865550027701, 7.442725817628926, out id));
            // Step 64
            tree.Erase(5.000000000000000, 1.000000000000000, 0.000000000000000);
            tree.Erase(9.000000000000000, 1.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(1.986020092923901, 3.335153296604530, 3.745046055460747, 4.261169096901655, 4.124356434083211, 4.426477950686230, out id));
            // Step 65
            tree.Insert(8.000000000000000, 9.000000000000000, 8.000000000000000, 37);
            tree.Erase(9.000000000000000, 2.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(2.868838297258069, 6.551102169138543, 0.946136536370805, 7.562424800346258, 4.542128051725841, 8.736083258637436, out id));
            // Step 66
            tree.Insert(4.000000000000000, 8.000000000000000, 10.000000000000000, 38);
            tree.Erase(2.000000000000000, 6.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(4.322268269494938, 7.583982178740158, 0.701724113759824, 3.600558124115292, 4.771391150273584, 7.640596017577929, out id));
            // Step 67
            tree.Insert(8.000000000000000, 4.000000000000000, 4.000000000000000, 39);
            tree.Erase(8.000000000000000, 1.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(9.339788399715843, 9.435164278730257, 4.349969953644165, 4.658250179968989, 1.905590421507791, 9.534222800804177, out id));
            // Step 68
            tree.Erase(1.000000000000000, 1.000000000000000, 6.000000000000000);
            tree.Erase(9.000000000000000, 8.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(3.473605103999071, 8.193257162337487, 7.414028927004877, 9.795061249563886, 0.947763847441445, 1.520480970870762, out id));
            // Step 69
            tree.Insert(8.000000000000000, 7.000000000000000, 7.000000000000000, 40);
            tree.Erase(1.000000000000000, 6.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(3.122766618352863, 5.872657613294666, 1.582838359869918, 6.210633359495157, 0.342701516888629, 2.100767258846327, out id));
            // Step 70
            tree.Erase(5.000000000000000, 3.000000000000000, 0.000000000000000);
            tree.Erase(8.000000000000000, 5.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(1.257190712360756, 7.926409406578707, 4.619548304152676, 8.073170379487136, 1.873576321704851, 8.910952121469544, out id));
            // Step 71
            tree.Erase(0.000000000000000, 5.000000000000000, 9.000000000000000);
            tree.Erase(4.000000000000000, 5.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(5.662940996688440, 6.153929431202503, 1.936209479702692, 9.810636052660399, 8.625841770884076, 8.952720904218751, out id));
            // Step 72
            tree.Erase(8.000000000000000, 4.000000000000000, 4.000000000000000);
            tree.Erase(6.000000000000000, 0.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(0.716545258094387, 5.298878076918106, 0.980325345980282, 1.178717063965558, 5.688779164913994, 7.533570228276335, out id));
            // Step 73
            tree.Insert(7.000000000000000, 5.000000000000000, 6.000000000000000, 41);
            tree.Erase(6.000000000000000, 5.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(8.282837509052690, 9.083420768461135, 4.224988548987288, 5.780982131001874, 5.712495262599830, 7.414479501356407, out id));
            // Step 74
            tree.Insert(1.000000000000000, 3.000000000000000, 5.000000000000000, 42);
            tree.Erase(9.000000000000000, 4.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(0.268776748974875, 1.369044456431340, 3.016650938234218, 6.077324598671437, 2.427842490466317, 4.932546494323457, out id));
            // Step 75
            tree.Erase(8.000000000000000, 7.000000000000000, 7.000000000000000);
            tree.Erase(1.000000000000000, 1.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(3.194034307282813, 6.823585405842132, 3.870449552841256, 6.515434033695314, 0.853438228158526, 4.937551985304928, out id));
            // Step 76
            tree.Erase(7.000000000000000, 9.000000000000000, 5.000000000000000);
            tree.Erase(4.000000000000000, 3.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(0.416131495547050, 2.593177137801011, 4.379843085752432, 5.645868240225661, 2.157278021880535, 7.191902317083786, out id));
            // Step 77
            tree.Insert(2.000000000000000, 9.000000000000000, 5.000000000000000, 43);
            tree.Erase(8.000000000000000, 9.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(3.895935853002359, 9.916532983676358, 3.372181380750967, 9.620237042611562, 3.825279066741243, 6.194363070882003, out id));
            Assert.True((new List<ulong> { 41 }).Contains(id));
            // Step 78
            tree.Erase(8.000000000000000, 9.000000000000000, 8.000000000000000);
            tree.Erase(6.000000000000000, 0.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(0.000007946516253, 3.071454770898421, 2.255695403683780, 4.331339625772339, 1.159717562190917, 3.751939164183855, out id));
            // Step 79
            tree.Insert(5.000000000000000, 5.000000000000000, 0.000000000000000, 44);
            tree.Erase(2.000000000000000, 0.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(2.445301686439919, 8.621045230560815, 6.033946760656109, 8.851936522847852, 1.441122340571588, 5.236488410099403, out id));
            // Step 80
            tree.Insert(0.000000000000000, 8.000000000000000, 7.000000000000000, 45);
            tree.Erase(9.000000000000000, 5.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(0.240819909981644, 2.626134474179662, 1.056670168735959, 6.725154160429980, 9.370181876214202, 9.720360981281933, out id));
            // Step 81
            tree.Erase(0.000000000000000, 4.000000000000000, 4.000000000000000);
            tree.Erase(3.000000000000000, 2.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(7.681819257403840, 7.824545186810404, 0.561127858764588, 8.527357617649692, 6.637937757460510, 7.479575990998781, out id));
            // Step 82
            tree.Erase(10.000000000000000, 1.000000000000000, 8.000000000000000);
            tree.Erase(1.000000000000000, 1.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(3.180792818228160, 8.933446464733480, 3.423062722548478, 8.228408054035439, 2.343046424004634, 5.810724748656652, out id));
            // Step 83
            tree.Insert(9.000000000000000, 10.000000000000000, 10.000000000000000, 46);
            tree.Erase(5.000000000000000, 3.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(0.467513631099472, 2.775583287261507, 2.119600664398580, 5.628582531608910, 3.169848788024214, 9.049044700984361, out id));
            Assert.True((new List<ulong> { 42 }).Contains(id));
            // Step 84
            tree.Erase(10.000000000000000, 3.000000000000000, 2.000000000000000);
            tree.Erase(1.000000000000000, 9.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(2.296143327677428, 4.308062732548267, 4.139192154672180, 5.611062663889367, 2.441103713464225, 4.252427872704593, out id));
            // Step 85
            tree.Insert(1.000000000000000, 7.000000000000000, 4.000000000000000, 47);
            tree.Erase(4.000000000000000, 8.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(9.129309355380697, 9.162350127523144, 0.775516862979975, 3.175934678113751, 1.251236436822561, 7.649904985007260, out id));
            // Step 86
            tree.Erase(4.000000000000000, 8.000000000000000, 10.000000000000000);
            tree.Erase(0.000000000000000, 1.000000000000000, 8.000000000000000);
            Assert.True(tree.Find(1.810370367429639, 2.134071469284295, 4.557143997099267, 9.295454644039715, 2.452632079518172, 7.204152316031776, out id));
            Assert.True((new List<ulong> { 43 }).Contains(id));
            // Step 87
            tree.Erase(0.000000000000000, 8.000000000000000, 7.000000000000000);
            tree.Erase(7.000000000000000, 7.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(0.542916954247046, 2.851515085076448, 2.823465872921689, 9.933536694371055, 0.188742043386161, 7.076420139869311, out id));
            Assert.True((new List<ulong> { 42, 43, 47 }).Contains(id));
            // Step 88
            tree.Insert(1.000000000000000, 0.000000000000000, 1.000000000000000, 48);
            tree.Erase(1.000000000000000, 2.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(7.785991231540833, 9.004682450882456, 4.090869466823682, 5.583284093920550, 3.058378614592431, 3.479245721170988, out id));
            // Step 89
            tree.Insert(4.000000000000000, 5.000000000000000, 5.000000000000000, 49);
            tree.Erase(2.000000000000000, 6.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(3.433081593026985, 7.233608853982898, 2.636445040812097, 5.316519513182794, 1.046416261612558, 1.093093576311881, out id));
            // Step 90
            tree.Insert(4.000000000000000, 3.000000000000000, 8.000000000000000, 50);
            tree.Erase(3.000000000000000, 7.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(0.351541765752064, 9.440642730552316, 0.671251382290016, 4.272294645328082, 2.142911706584698, 2.453100266028999, out id));
            // Step 91
            tree.Insert(6.000000000000000, 4.000000000000000, 6.000000000000000, 51);
            tree.Erase(4.000000000000000, 8.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(5.485559701274035, 8.400928974365332, 4.397026335335399, 4.840842569632898, 1.767306406597299, 4.950087159360653, out id));
            // Step 92
            tree.Erase(1.000000000000000, 0.000000000000000, 1.000000000000000);
            tree.Erase(5.000000000000000, 3.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(0.302377412120470, 3.741422518714258, 0.449538961999741, 4.624473116430730, 4.084949160631643, 5.312718517188818, out id));
            Assert.True((new List<ulong> { 42 }).Contains(id));
            // Step 93
            tree.Insert(0.000000000000000, 9.000000000000000, 8.000000000000000, 52);
            tree.Erase(2.000000000000000, 7.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(6.244306305394649, 7.176055033501977, 1.853324837292574, 4.722908033851397, 3.037999559928267, 8.056694711377954, out id));
            // Step 94
            tree.Insert(7.000000000000000, 7.000000000000000, 8.000000000000000, 53);
            tree.Erase(0.000000000000000, 4.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(0.822640728010879, 7.782238612445039, 7.143520796415643, 7.258162823381779, 7.791707053034483, 9.759134777464539, out id));
            // Step 95
            tree.Erase(1.000000000000000, 3.000000000000000, 5.000000000000000);
            tree.Erase(2.000000000000000, 0.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(7.332643335466043, 9.549516243685620, 2.415144000656533, 3.663715601215534, 5.460175222266300, 9.550205192833847, out id));
            // Step 96
            tree.Insert(8.000000000000000, 0.000000000000000, 0.000000000000000, 54);
            tree.Erase(3.000000000000000, 6.000000000000000, 2.000000000000000);
            Assert.True(tree.Find(1.078324649908912, 5.322349734129795, 6.597142988429456, 9.232502440267062, 3.546612428162177, 8.697341623392470, out id));
            Assert.True((new List<ulong> { 43 }).Contains(id));
            // Step 97
            tree.Insert(10.000000000000000, 3.000000000000000, 9.000000000000000, 55);
            tree.Erase(7.000000000000000, 9.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(4.911387232899448, 6.150116619773548, 4.696729288509615, 8.346585883490903, 7.787999340496203, 8.346846155428356, out id));
            // Step 98
            tree.Erase(5.000000000000000, 5.000000000000000, 0.000000000000000);
            tree.Erase(4.000000000000000, 0.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(4.440228652860162, 5.929573586539560, 2.928222724414623, 7.971996201231656, 0.038653281984579, 2.741989481102979, out id));
            // Step 99
            tree.Erase(0.000000000000000, 9.000000000000000, 8.000000000000000);
            tree.Erase(8.000000000000000, 6.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(3.321920210735417, 7.350317166215254, 0.605544735109450, 5.845082165630399, 2.987178517462172, 9.211763733703901, out id));
            Assert.True((new List<ulong> { 41, 49, 50, 51 }).Contains(id));
            // Step 100
            tree.Erase(9.000000000000000, 10.000000000000000, 10.000000000000000);
            tree.Erase(0.000000000000000, 8.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(4.282777837378169, 7.649181998827936, 0.189901503622525, 2.015497638912633, 4.418666904820794, 9.542870438941190, out id));
            // Step 101
            tree.Erase(1.000000000000000, 7.000000000000000, 4.000000000000000);
            tree.Erase(0.000000000000000, 5.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(1.881694763911494, 8.597554278857034, 5.340731059433916, 6.047180625392485, 4.145863803025316, 8.016794400140920, out id));
            // Step 102
            tree.Insert(9.000000000000000, 1.000000000000000, 7.000000000000000, 56);
            tree.Erase(0.000000000000000, 1.000000000000000, 10.000000000000000);
            Assert.True(tree.Find(5.956866057375354, 6.942690495710382, 1.359317847008306, 7.454322191923840, 4.402352535026295, 8.953601706426202, out id));
            Assert.True((new List<ulong> { 51 }).Contains(id));
            // Step 103
            tree.Insert(2.000000000000000, 9.000000000000000, 6.000000000000000, 57);
            tree.Erase(0.000000000000000, 4.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(1.534230817546901, 3.855441049614596, 0.978319207421947, 2.408439837922263, 0.223369555044552, 9.219672867080998, out id));
            // Step 104
            tree.Erase(4.000000000000000, 3.000000000000000, 8.000000000000000);
            tree.Erase(1.000000000000000, 3.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(4.495842820469194, 5.451265489763161, 2.361969222720694, 7.929480940302628, 3.810982376463548, 7.718136514053020, out id));
            // Step 105
            tree.Erase(2.000000000000000, 9.000000000000000, 5.000000000000000);
            tree.Erase(8.000000000000000, 10.000000000000000, 8.000000000000000);
            Assert.True(tree.Find(6.251173545357242, 8.570654450056127, 2.733696563765926, 9.874329024525924, 3.963273733337821, 7.614909543951081, out id));
            Assert.True((new List<ulong> { 41 }).Contains(id));
            // Step 106
            tree.Insert(6.000000000000000, 2.000000000000000, 4.000000000000000, 58);
            tree.Erase(2.000000000000000, 3.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(4.367091584199868, 5.913615152356876, 5.218476238479175, 9.044580192691537, 1.889582467096310, 3.317735688243508, out id));
            // Step 107
            tree.Erase(7.000000000000000, 5.000000000000000, 6.000000000000000);
            tree.Erase(8.000000000000000, 9.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(3.981124336222170, 7.614181430305092, 1.927435922866547, 5.282938191981281, 1.731242351348085, 3.844988624560062, out id));
            // Step 108
            tree.Insert(2.000000000000000, 8.000000000000000, 5.000000000000000, 59);
            tree.Erase(3.000000000000000, 6.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(2.853024220256775, 9.746918899230442, 8.783821983714880, 9.512192573780759, 4.189206219826557, 8.369556283907722, out id));
            // Step 109
            tree.Erase(6.000000000000000, 4.000000000000000, 6.000000000000000);
            tree.Erase(1.000000000000000, 9.000000000000000, 2.000000000000000);
            Assert.True(tree.Find(1.275164490291621, 5.671638885750859, 4.924428388227842, 8.515023981891128, 1.923960991728334, 6.069194440956858, out id));
            Assert.True((new List<ulong> { 49, 59 }).Contains(id));
            // Step 110
            tree.Insert(5.000000000000000, 3.000000000000000, 10.000000000000000, 60);
            tree.Erase(8.000000000000000, 0.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(4.176131991977648, 7.234094564573458, 7.313792538938646, 8.948297290333709, 1.928950294587108, 4.887775066166840, out id));
            // Step 111
            tree.Insert(7.000000000000000, 5.000000000000000, 3.000000000000000, 61);
            tree.Erase(10.000000000000000, 9.000000000000000, 8.000000000000000);
            Assert.True(tree.Find(6.230640345818559, 9.522784465581104, 2.243203073164818, 7.315721726535744, 7.449798258676088, 9.726278525957119, out id));
            Assert.True((new List<ulong> { 53 }).Contains(id));
            // Step 112
            tree.Erase(4.000000000000000, 5.000000000000000, 5.000000000000000);
            tree.Erase(7.000000000000000, 0.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(0.039650408337357, 2.870797012108235, 2.101095175491590, 3.621450374249386, 3.748748018541739, 8.069290504900614, out id));
            // Step 113
            tree.Erase(5.000000000000000, 3.000000000000000, 10.000000000000000);
            tree.Erase(5.000000000000000, 6.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(5.872391189300437, 6.456130799039805, 0.492996183693297, 4.465669702974776, 1.492281454406810, 3.267875533591268, out id));
            // Step 114
            tree.Insert(3.000000000000000, 10.000000000000000, 3.000000000000000, 62);
            tree.Erase(6.000000000000000, 8.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(8.363875510753115, 8.744592343544777, 4.378388753148262, 6.341282232497056, 3.450091910295518, 9.403879404650366, out id));
            // Step 115
            tree.Erase(8.000000000000000, 0.000000000000000, 0.000000000000000);
            tree.Erase(0.000000000000000, 10.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(7.209193770138801, 9.599193243548703, 4.335642391710580, 7.699630292184578, 8.929554113834495, 9.123079951117621, out id));
            // Step 116
            tree.Insert(3.000000000000000, 10.000000000000000, 7.000000000000000, 63);
            tree.Erase(2.000000000000000, 10.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(2.263321265457666, 6.725178003189298, 0.269116622146429, 6.989376770178357, 3.667250191722990, 9.208465569840156, out id));
            Assert.True((new List<ulong> { 58 }).Contains(id));
            // Step 117
            tree.Insert(0.000000000000000, 7.000000000000000, 4.000000000000000, 64);
            tree.Erase(7.000000000000000, 8.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(2.669484627588262, 9.050532753761876, 1.390213818496596, 9.916452436663217, 3.913787675509115, 7.550281403023203, out id));
            Assert.True((new List<ulong> { 58 }).Contains(id));
            // Step 118
            tree.Insert(0.000000000000000, 3.000000000000000, 2.000000000000000, 65);
            tree.Erase(1.000000000000000, 10.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(3.594832808456816, 7.943988408213150, 4.806850189315846, 9.899116479696524, 0.649227412500785, 1.745544069186297, out id));
            // Step 119
            tree.Erase(9.000000000000000, 1.000000000000000, 7.000000000000000);
            tree.Erase(1.000000000000000, 2.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(3.364094192550190, 9.015776545057633, 3.714434703199865, 5.446951709268669, 4.303826119573896, 6.755406417063238, out id));
            // Step 120
            tree.Insert(2.000000000000000, 5.000000000000000, 3.000000000000000, 66);
            tree.Erase(8.000000000000000, 0.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(7.370173230257523, 9.434643423090275, 3.560321490179571, 4.137218895419296, 4.033866756364310, 4.374233087208397, out id));
            // Step 121
            tree.Insert(7.000000000000000, 3.000000000000000, 7.000000000000000, 67);
            tree.Erase(9.000000000000000, 10.000000000000000, 6.000000000000000);
            Assert.True(tree.Find(2.439575660840866, 9.676932653550603, 4.722269320705180, 7.283685278865455, 1.279459815130487, 4.527614351969687, out id));
            Assert.True((new List<ulong> { 61 }).Contains(id));
            // Step 122
            tree.Insert(8.000000000000000, 6.000000000000000, 8.000000000000000, 68);
            tree.Erase(9.000000000000000, 0.000000000000000, 7.000000000000000);
            Assert.True(tree.Find(3.613672752373973, 8.416350964821030, 1.384477148818735, 3.685546482307772, 2.517462701851945, 9.598212245183479, out id));
            Assert.True((new List<ulong> { 58, 67 }).Contains(id));
            // Step 123
            tree.Insert(10.000000000000000, 4.000000000000000, 10.000000000000000, 69);
            tree.Erase(3.000000000000000, 10.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(2.614470947066589, 9.141157511286440, 5.620195347192976, 6.769212500397447, 5.925217399294889, 7.022015512275751, out id));
            // Step 124
            tree.Insert(1.000000000000000, 9.000000000000000, 2.000000000000000, 70);
            tree.Erase(6.000000000000000, 6.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(4.761017061509401, 7.705464259280044, 3.540741421931481, 4.956281058289255, 4.192528136829888, 4.585078427493907, out id));
            // Step 125
            tree.Insert(3.000000000000000, 3.000000000000000, 0.000000000000000, 71);
            tree.Erase(3.000000000000000, 1.000000000000000, 8.000000000000000);
            Assert.True(tree.Find(6.632541481609360, 7.055240209723657, 4.866589383978165, 6.284243948232511, 0.424356492261461, 9.018527725868260, out id));
            Assert.True((new List<ulong> { 61 }).Contains(id));
            // Step 126
            tree.Insert(5.000000000000000, 9.000000000000000, 0.000000000000000, 72);
            tree.Erase(1.000000000000000, 10.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(0.929679066670994, 9.860182582695970, 2.960219212486037, 8.801148880093198, 2.161961792177362, 8.508284148289205, out id));
            Assert.True((new List<ulong> { 53, 59, 61, 66, 67, 68 }).Contains(id));
            // Step 127
            tree.Erase(7.000000000000000, 5.000000000000000, 3.000000000000000);
            tree.Erase(8.000000000000000, 0.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(2.351150600958183, 6.690651084870409, 3.458318786511779, 5.650363727051738, 4.460138179636570, 8.814436394792073, out id));
            // Step 128
            tree.Erase(5.000000000000000, 9.000000000000000, 0.000000000000000);
            tree.Erase(4.000000000000000, 10.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(3.440833433624327, 7.800247233479787, 2.238252589419617, 5.629167491393392, 4.476029756523352, 5.086391462105669, out id));
            // Step 129
            tree.Erase(3.000000000000000, 3.000000000000000, 0.000000000000000);
            tree.Erase(4.000000000000000, 2.000000000000000, 8.000000000000000);
            Assert.True(tree.Find(0.091231977036235, 9.188536830412664, 0.412324234672377, 9.276861265753601, 5.685152959331373, 6.459346718171086, out id));
            Assert.True((new List<ulong> { 57 }).Contains(id));
            // Step 130
            tree.Erase(1.000000000000000, 7.000000000000000, 10.000000000000000);
            tree.Erase(9.000000000000000, 5.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(5.895061810153416, 6.312410585700881, 1.278700076917069, 8.106156545076702, 4.704528917286169, 7.672926359414067, out id));
            // Step 131
            tree.Insert(7.000000000000000, 5.000000000000000, 5.000000000000000, 73);
            tree.Erase(7.000000000000000, 3.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(3.013259564522544, 5.171113790539121, 5.461113496843416, 5.856227423818652, 5.902076924779661, 9.524056309633743, out id));
            // Step 132
            tree.Insert(5.000000000000000, 10.000000000000000, 4.000000000000000, 74);
            tree.Erase(5.000000000000000, 5.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(0.273215259629498, 0.569388695645882, 1.596648792936862, 4.428592218952848, 5.909337635549572, 6.631187708602853, out id));
            // Step 133
            tree.Erase(10.000000000000000, 3.000000000000000, 9.000000000000000);
            tree.Erase(1.000000000000000, 2.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(4.740431161225458, 7.070783666992297, 0.742867542817893, 8.607668445127297, 0.344720075244321, 7.978016685212886, out id));
            Assert.True((new List<ulong> { 58, 67, 73 }).Contains(id));
            // Step 134
            tree.Erase(2.000000000000000, 5.000000000000000, 3.000000000000000);
            tree.Erase(1.000000000000000, 6.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(1.408851507490271, 4.658188490681015, 0.115827449659573, 5.162662082293786, 2.024446627974295, 3.746890891808445, out id));
            // Step 135
            tree.Erase(2.000000000000000, 9.000000000000000, 6.000000000000000);
            tree.Erase(4.000000000000000, 7.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(9.151876917878637, 9.618222785760613, 3.734412445813440, 5.906159018765781, 4.012651931280522, 5.050126481041049, out id));
            // Step 136
            tree.Erase(7.000000000000000, 7.000000000000000, 8.000000000000000);
            tree.Erase(2.000000000000000, 10.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(8.515741711966513, 9.696926306130440, 4.679654979325234, 6.590213084650869, 0.274294534232196, 5.280592532925667, out id));
            // Step 137
            tree.Insert(7.000000000000000, 10.000000000000000, 1.000000000000000, 75);
            tree.Erase(3.000000000000000, 1.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(2.184124820360049, 5.455650747251278, 4.609101680534082, 5.389426542998916, 1.845214391090279, 5.612713241184522, out id));
            // Step 138
            tree.Erase(0.000000000000000, 7.000000000000000, 4.000000000000000);
            tree.Erase(3.000000000000000, 9.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(4.466300405909173, 7.301739012025614, 5.177731491010001, 7.748307059486381, 7.110466391065850, 9.402844784846099, out id));
            // Step 139
            tree.Erase(6.000000000000000, 2.000000000000000, 4.000000000000000);
            tree.Erase(7.000000000000000, 4.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(1.392662875218191, 3.888947312967991, 2.025634440748489, 8.581206105934710, 7.601406967888949, 9.050053316720795, out id));
            // Step 140
            tree.Insert(5.000000000000000, 6.000000000000000, 5.000000000000000, 76);
            tree.Erase(6.000000000000000, 6.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(2.756881961760316, 4.772660569427529, 2.350586205414431, 7.662057681336191, 1.582852206723063, 5.056414059926918, out id));
            // Step 141
            tree.Erase(7.000000000000000, 3.000000000000000, 7.000000000000000);
            tree.Erase(7.000000000000000, 3.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(2.362028105629403, 8.740837156732255, 1.433220988566930, 8.492861501752330, 3.108614975228352, 9.770450208642597, out id));
            Assert.True((new List<ulong> { 68, 73, 76 }).Contains(id));
            // Step 142
            tree.Insert(5.000000000000000, 5.000000000000000, 7.000000000000000, 77);
            tree.Erase(1.000000000000000, 5.000000000000000, 7.000000000000000);
            Assert.True(tree.Find(7.235586491191663, 9.186804127299874, 1.767436314339919, 6.544400901611224, 0.102683100924457, 9.036373839733766, out id));
            Assert.True((new List<ulong> { 68 }).Contains(id));
            // Step 143
            tree.Insert(1.000000000000000, 5.000000000000000, 3.000000000000000, 78);
            tree.Erase(10.000000000000000, 4.000000000000000, 1.000000000000000);
            Assert.True(tree.Find(0.230678764671886, 8.099844368638102, 2.234307668909095, 5.132465842032857, 1.971223754382458, 4.592882916377431, out id));
            Assert.True((new List<ulong> { 78 }).Contains(id));
            // Step 144
            tree.Insert(5.000000000000000, 8.000000000000000, 2.000000000000000, 79);
            tree.Erase(5.000000000000000, 9.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(5.552646283409634, 9.833296178332077, 1.788338941711054, 7.927398852243288, 4.369400580089463, 6.899678378827118, out id));
            Assert.True((new List<ulong> { 73 }).Contains(id));
            // Step 145
            tree.Insert(9.000000000000000, 2.000000000000000, 9.000000000000000, 80);
            tree.Erase(3.000000000000000, 2.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(2.848204687241155, 6.578431999099873, 5.870597715968247, 9.754700639003900, 0.827330323267740, 3.444241600710699, out id));
            Assert.True((new List<ulong> { 79 }).Contains(id));
            // Step 146
            tree.Insert(8.000000000000000, 3.000000000000000, 2.000000000000000, 81);
            tree.Erase(9.000000000000000, 3.000000000000000, 1.000000000000000);
            Assert.True(tree.Find(2.061182610922598, 6.848084578396604, 1.594765938925778, 6.445777803173317, 6.104770087462471, 7.495890431932163, out id));
            Assert.True((new List<ulong> { 77 }).Contains(id));
            // Step 147
            tree.Insert(2.000000000000000, 4.000000000000000, 0.000000000000000, 82);
            tree.Erase(7.000000000000000, 2.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(5.508549997168172, 9.441714960943834, 3.814671615369552, 4.039312801570434, 5.560086063906709, 8.679890277885063, out id));
            // Step 148
            tree.Erase(7.000000000000000, 5.000000000000000, 5.000000000000000);
            tree.Erase(2.000000000000000, 7.000000000000000, 8.000000000000000);
            Assert.True(tree.Find(4.462833960829407, 9.103251587913155, 2.352084983635752, 5.356801199641314, 3.106990527999967, 7.601704796388180, out id));
            Assert.True((new List<ulong> { 77 }).Contains(id));
            // Step 149
            tree.Insert(10.000000000000000, 1.000000000000000, 9.000000000000000, 83);
            tree.Erase(8.000000000000000, 9.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(3.822716497675538, 6.705587732957627, 8.258772206817635, 8.620046354302605, 1.220031295788241, 8.831617686897532, out id));
            // Step 150
            tree.Erase(8.000000000000000, 3.000000000000000, 2.000000000000000);
            tree.Erase(9.000000000000000, 3.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(2.815967572541481, 6.942401372107366, 5.515166844019845, 7.185441178772756, 3.244920019592143, 5.956587452164755, out id));
            Assert.True((new List<ulong> { 76 }).Contains(id));
            // Step 151
            tree.Insert(9.000000000000000, 5.000000000000000, 1.000000000000000, 84);
            tree.Erase(7.000000000000000, 1.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(5.083065758114868, 9.799095707770677, 1.469027892066559, 2.525770998377310, 5.688481908057273, 7.654521745728230, out id));
            // Step 152
            tree.Erase(5.000000000000000, 8.000000000000000, 2.000000000000000);
            tree.Erase(8.000000000000000, 6.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(1.352674450512394, 9.642208346995734, 0.772674425828080, 4.890980563084963, 0.618318867242377, 2.119728326111079, out id));
            // Step 153
            tree.Erase(10.000000000000000, 1.000000000000000, 9.000000000000000);
            tree.Erase(9.000000000000000, 9.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(2.660743867024873, 2.805090288786784, 5.920687482473682, 6.930619310363031, 6.784340250939404, 9.413642152339326, out id));
            // Step 154
            tree.Erase(5.000000000000000, 10.000000000000000, 4.000000000000000);
            tree.Erase(9.000000000000000, 4.000000000000000, 7.000000000000000);
            Assert.True(tree.Find(0.867632409411639, 7.152793634665599, 0.842133612157566, 5.516182839205350, 5.843904823213003, 8.767506364614237, out id));
            Assert.True((new List<ulong> { 77 }).Contains(id));
            // Step 155
            tree.Erase(2.000000000000000, 4.000000000000000, 0.000000000000000);
            tree.Erase(0.000000000000000, 7.000000000000000, 0.000000000000000);
            Assert.True(tree.Find(4.940473198532210, 9.009426334779320, 1.791637977260909, 5.814595820769165, 0.408315880082478, 1.739353777130352, out id));
            Assert.True((new List<ulong> { 84 }).Contains(id));
            // Step 156
            tree.Erase(3.000000000000000, 10.000000000000000, 7.000000000000000);
            tree.Erase(5.000000000000000, 3.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(3.327850034996026, 5.413919356018252, 7.998108255553420, 9.631658158104576, 4.343869507226876, 8.729884906517903, out id));
            // Step 157
            tree.Erase(9.000000000000000, 5.000000000000000, 1.000000000000000);
            tree.Erase(6.000000000000000, 4.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(0.460507695947994, 5.492648382541039, 6.000954736919208, 6.688473581146694, 1.025918549746518, 8.984093429130111, out id));
            // Step 158
            tree.Insert(7.000000000000000, 0.000000000000000, 9.000000000000000, 85);
            tree.Erase(4.000000000000000, 6.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(5.636148993166426, 8.670572858484606, 7.386409594358238, 9.663832298867748, 5.565427368568080, 5.850381851101999, out id));
            // Step 159
            tree.Insert(9.000000000000000, 8.000000000000000, 5.000000000000000, 86);
            tree.Erase(8.000000000000000, 8.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(6.250414080906390, 7.265685610663869, 2.456451393252840, 8.355477759079058, 0.135287998966853, 4.621829150951294, out id));
            // Step 160
            tree.Erase(5.000000000000000, 5.000000000000000, 7.000000000000000);
            tree.Erase(2.000000000000000, 7.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(7.520544885070183, 7.616393867338943, 2.206200412382159, 4.257262224051201, 2.405177882877764, 3.606017616275695, out id));
            // Step 161
            tree.Insert(8.000000000000000, 2.000000000000000, 8.000000000000000, 87);
            tree.Erase(1.000000000000000, 8.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(3.804470774703669, 5.769448353281383, 2.742861560411858, 3.808972576489980, 0.471750626747195, 1.695291637370144, out id));
            // Step 162
            tree.Insert(8.000000000000000, 1.000000000000000, 2.000000000000000, 88);
            tree.Erase(0.000000000000000, 8.000000000000000, 4.000000000000000);
            Assert.True(tree.Find(3.315581819030911, 7.794211208865071, 5.805961943178964, 8.816245527502762, 4.880346255797084, 5.445685475572092, out id));
            Assert.True((new List<ulong> { 76 }).Contains(id));
            // Step 163
            tree.Insert(4.000000000000000, 2.000000000000000, 5.000000000000000, 89);
            tree.Erase(9.000000000000000, 9.000000000000000, 1.000000000000000);
            Assert.True(tree.Find(4.500552012377874, 6.785802153459670, 0.073923578006807, 9.874480695645200, 1.859979926353809, 7.791330367324517, out id));
            Assert.True((new List<ulong> { 76 }).Contains(id));
            // Step 164
            tree.Insert(2.000000000000000, 5.000000000000000, 8.000000000000000, 90);
            tree.Erase(5.000000000000000, 4.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(2.140958860027191, 3.875943980677373, 3.925291760443045, 9.311512854627710, 6.618077535372608, 9.851839661099728, out id));
            // Step 165
            tree.Erase(1.000000000000000, 5.000000000000000, 3.000000000000000);
            tree.Erase(0.000000000000000, 0.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(0.247090623698727, 9.593615347722505, 2.721677052063826, 9.907958480388009, 8.556620255198311, 9.393448571861974, out id));
            // Step 166
            tree.Insert(6.000000000000000, 1.000000000000000, 4.000000000000000, 91);
            tree.Erase(3.000000000000000, 0.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(7.508623093834269, 9.186762155110159, 3.698485938583898, 9.282310409574752, 2.013898853196171, 9.909009576253812, out id));
            Assert.True((new List<ulong> { 68, 86 }).Contains(id));
            // Step 167
            tree.Erase(8.000000000000000, 6.000000000000000, 8.000000000000000);
            tree.Erase(8.000000000000000, 9.000000000000000, 10.000000000000000);
            Assert.True(tree.Find(1.426200144734208, 9.983677251534912, 0.217197715213626, 4.490170444958896, 0.934890381042304, 7.162035568903768, out id));
            Assert.True((new List<ulong> { 88, 89, 91 }).Contains(id));
            // Step 168
            tree.Erase(8.000000000000000, 2.000000000000000, 8.000000000000000);
            tree.Erase(0.000000000000000, 10.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(4.008745327748118, 4.806264307607774, 0.648004627476073, 1.589814179306399, 6.119801577965129, 6.241547521099456, out id));
            // Step 169
            tree.Insert(9.000000000000000, 7.000000000000000, 4.000000000000000, 92);
            tree.Erase(4.000000000000000, 8.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(6.615982010909697, 7.892244909898664, 1.413334037087095, 5.281283872797404, 0.790446148591465, 9.810181992184704, out id));
            // Step 170
            tree.Erase(9.000000000000000, 8.000000000000000, 5.000000000000000);
            tree.Erase(5.000000000000000, 6.000000000000000, 7.000000000000000);
            Assert.True(tree.Find(0.327396023479561, 2.921222477779211, 4.820858734550905, 8.338502973415675, 5.714288543399821, 9.240495673329995, out id));
            Assert.True((new List<ulong> { 90 }).Contains(id));
            // Step 171
            tree.Insert(10.000000000000000, 1.000000000000000, 4.000000000000000, 93);
            tree.Erase(0.000000000000000, 2.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(4.074467131963322, 5.043711709278424, 3.090876213875191, 8.651187217143951, 1.833751940533781, 8.525752295539780, out id));
            Assert.True((new List<ulong> { 76 }).Contains(id));
            // Step 172
            tree.Insert(9.000000000000000, 3.000000000000000, 4.000000000000000, 94);
            tree.Erase(1.000000000000000, 4.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(2.249486590334437, 3.859727518710660, 1.550033526292793, 5.397586687542068, 0.083005104434480, 0.798753757149954, out id));
            // Step 173
            tree.Erase(2.000000000000000, 8.000000000000000, 5.000000000000000);
            tree.Erase(5.000000000000000, 6.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(4.885543550785875, 7.020169237256280, 0.389346958655653, 7.106194959186908, 0.179567005253731, 6.720852047716944, out id));
            Assert.True((new List<ulong> { 76, 91 }).Contains(id));
            // Step 174
            tree.Insert(0.000000000000000, 7.000000000000000, 4.000000000000000, 95);
            tree.Erase(9.000000000000000, 2.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(2.551737438259495, 3.038289946693491, 7.827099887736509, 8.849429324510188, 7.743327175017189, 8.351513183286436, out id));
            // Step 175
            tree.Insert(8.000000000000000, 9.000000000000000, 7.000000000000000, 96);
            tree.Erase(10.000000000000000, 7.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(1.407054595645627, 5.767772964110308, 3.329851307753505, 9.865883473381240, 5.050278668819937, 5.375310204739519, out id));
            // Step 176
            tree.Erase(0.000000000000000, 3.000000000000000, 2.000000000000000);
            tree.Erase(10.000000000000000, 1.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(6.301608493832330, 7.592210658267157, 1.667590039818713, 6.413805390292414, 5.642321720438459, 5.763945881492385, out id));
            // Step 177
            tree.Insert(2.000000000000000, 2.000000000000000, 1.000000000000000, 97);
            tree.Erase(6.000000000000000, 7.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(1.382026141813586, 2.216954890273489, 5.127937927273242, 5.946408837354475, 1.951711759970900, 4.884262815066686, out id));
            // Step 178
            tree.Insert(7.000000000000000, 3.000000000000000, 2.000000000000000, 98);
            tree.Erase(3.000000000000000, 5.000000000000000, 8.000000000000000);
            Assert.True(tree.Find(2.381767110462649, 9.807404871943881, 2.480895337277475, 9.441306515807749, 2.166967052077677, 6.717700503347896, out id));
            Assert.True((new List<ulong> { 76, 92, 94 }).Contains(id));
            // Step 179
            tree.Erase(3.000000000000000, 10.000000000000000, 3.000000000000000);
            tree.Erase(0.000000000000000, 0.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(0.577761473016990, 1.085039646782749, 4.053893701311973, 4.713634737112100, 2.589544728790358, 6.040908863716036, out id));
            // Step 180
            tree.Erase(7.000000000000000, 3.000000000000000, 2.000000000000000);
            tree.Erase(8.000000000000000, 3.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(1.035223048426503, 1.161995648988204, 2.038956590448702, 3.312177491192900, 3.955884517089274, 7.567059396408869, out id));
            // Step 181
            tree.Erase(1.000000000000000, 9.000000000000000, 2.000000000000000);
            tree.Erase(3.000000000000000, 5.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(0.113323422687843, 4.625291802077483, 1.425477139729813, 1.498064886777436, 1.869942752222472, 6.476921017204377, out id));
            // Step 182
            tree.Erase(2.000000000000000, 5.000000000000000, 8.000000000000000);
            tree.Erase(8.000000000000000, 8.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(1.828344818655738, 6.945724008837474, 3.428324260116919, 6.505991891785218, 6.121472017590140, 7.143239582795662, out id));
            // Step 183
            tree.Erase(5.000000000000000, 6.000000000000000, 5.000000000000000);
            tree.Erase(9.000000000000000, 4.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(0.886982533406669, 3.332115155451564, 3.654231445002907, 7.765234323985065, 4.462219918953259, 5.465267337302984, out id));
            // Step 184
            tree.Erase(8.000000000000000, 1.000000000000000, 2.000000000000000);
            tree.Erase(5.000000000000000, 7.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(4.807586640001014, 6.135790901569258, 2.510066452224296, 2.857248763035090, 1.225695597502885, 4.548285516952152, out id));
            // Step 185
            tree.Erase(0.000000000000000, 7.000000000000000, 4.000000000000000);
            tree.Erase(3.000000000000000, 2.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(0.361820081508595, 4.676482753999103, 3.775664352286126, 7.186367516960010, 8.344628006008131, 9.198341926403728, out id));
            // Step 186
            tree.Erase(9.000000000000000, 7.000000000000000, 4.000000000000000);
            tree.Erase(7.000000000000000, 9.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(6.701587561541791, 7.392737206720091, 1.739779999960736, 8.185104021027120, 4.107779013265027, 7.354404982635340, out id));
            // Step 187
            tree.Erase(2.000000000000000, 2.000000000000000, 1.000000000000000);
            tree.Erase(0.000000000000000, 5.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(4.473595753756258, 4.533823825930742, 3.488397178548306, 7.305807820800014, 4.877418874237240, 6.325717886648182, out id));
            // Step 188
            tree.Insert(8.000000000000000, 0.000000000000000, 1.000000000000000, 99);
            tree.Erase(7.000000000000000, 1.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(1.337647315907708, 3.262188105267495, 3.092822154760579, 8.693005064750391, 1.408812507765175, 4.653278896832322, out id));
            // Step 189
            tree.Insert(1.000000000000000, 9.000000000000000, 8.000000000000000, 100);
            tree.Erase(8.000000000000000, 8.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(3.039325121078003, 7.668563951460094, 3.878761452975352, 4.101135612298384, 1.805446246916047, 2.054033864766284, out id));
            // Step 190
            tree.Erase(9.000000000000000, 2.000000000000000, 9.000000000000000);
            tree.Erase(9.000000000000000, 6.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(2.953227312176777, 3.378494583897643, 0.695520538770105, 2.402728807936125, 6.269224702636572, 9.856274934833248, out id));
            // Step 191
            tree.Insert(9.000000000000000, 10.000000000000000, 7.000000000000000, 101);
            tree.Erase(3.000000000000000, 1.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(4.737174386198781, 6.935713675384977, 1.595843655605534, 1.823333591287095, 6.750319958774032, 8.540117828185601, out id));
            // Step 192
            tree.Insert(1.000000000000000, 1.000000000000000, 6.000000000000000, 102);
            tree.Erase(0.000000000000000, 2.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(1.401878005370270, 2.762960877576233, 0.021772370216340, 6.842205059141014, 2.482063449301106, 7.028530947295847, out id));
            // Step 193
            tree.Insert(8.000000000000000, 10.000000000000000, 10.000000000000000, 103);
            tree.Erase(6.000000000000000, 8.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(0.705256167440941, 3.713340911460493, 6.787119024193684, 8.767744449897600, 3.234476414181067, 4.060262594328838, out id));
            // Step 194
            tree.Insert(3.000000000000000, 2.000000000000000, 10.000000000000000, 104);
            tree.Erase(6.000000000000000, 10.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(1.730805281649834, 4.775737452852744, 6.113778224021953, 7.872251479276762, 3.247592259117080, 5.625626809796557, out id));
            // Step 195
            tree.Erase(9.000000000000000, 10.000000000000000, 7.000000000000000);
            tree.Erase(1.000000000000000, 6.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(2.521603816258443, 5.261894206303785, 6.319333043629364, 9.679134296501337, 2.719901170406583, 6.677179993611185, out id));
            // Step 196
            tree.Insert(2.000000000000000, 1.000000000000000, 2.000000000000000, 105);
            tree.Erase(9.000000000000000, 9.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(2.650751775414887, 8.758993419795173, 6.140328853142472, 7.236624067681099, 1.339315192881562, 9.733697215963327, out id));
            // Step 197
            tree.Erase(1.000000000000000, 9.000000000000000, 8.000000000000000);
            tree.Erase(2.000000000000000, 7.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(7.849719189007375, 8.722557134897786, 1.126998283615679, 7.621156867308613, 5.878524824283289, 8.376605425878726, out id));
            // Step 198
            tree.Insert(0.000000000000000, 0.000000000000000, 5.000000000000000, 106);
            tree.Erase(6.000000000000000, 6.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(3.470964736646196, 7.146435139415310, 1.635027997483652, 9.055762887239590, 1.304484341739246, 4.488850961789957, out id));
            // Step 199
            tree.Insert(1.000000000000000, 3.000000000000000, 5.000000000000000, 107);
            tree.Erase(9.000000000000000, 10.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(7.062596135376714, 9.279402647683080, 0.054175239781751, 5.577512802980845, 9.005417078890702, 9.491369356771420, out id));
            // Step 200
            tree.Insert(10.000000000000000, 6.000000000000000, 0.000000000000000, 108);
            tree.Erase(2.000000000000000, 3.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(3.891965325031259, 8.805588638973578, 4.872508257468718, 8.402385077070896, 5.570609645929184, 7.461704567112641, out id));
        }

        [Fact]
        public void SegmentTree2dTest()
        {
            var tree = new AdaptiveGrid.SegmentTree2d();
            ulong id;

            // Step 1
            tree.Insert(10.000000000000000, 3.000000000000000, 1);
            tree.Erase(9.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(2.188335840913183, 5.665417755480634, 6.034071720888596, 9.629447866662256, out id));
            // Step 2
            tree.Insert(2.000000000000000, 1.000000000000000, 2);
            tree.Erase(9.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(6.890378961926462, 7.897758208700163, 4.088129176951833, 6.933923661472686, out id));
            // Step 3
            tree.Insert(5.000000000000000, 9.000000000000000, 3);
            tree.Erase(6.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(2.001903873662214, 5.696821052274863, 6.311481442016734, 9.045232317501398, out id));
            Assert.True((new List<ulong> { 3 }).Contains(id));
            // Step 4
            tree.Insert(8.000000000000000, 10.000000000000000, 4);
            tree.Erase(6.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(7.280787424581242, 8.142276560983548, 3.416632785232446, 7.769533068454868, out id));
            // Step 5
            tree.Erase(8.000000000000000, 10.000000000000000);
            tree.Erase(3.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(2.694187263784272, 3.437455255703986, 0.673747152677981, 0.881115070380403, out id));
            // Step 6
            tree.Insert(8.000000000000000, 4.000000000000000, 5);
            tree.Erase(5.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(0.863555929062350, 1.611730233177857, 0.213028871019811, 6.021189346240058, out id));
            // Step 7
            tree.Insert(3.000000000000000, 1.000000000000000, 6);
            tree.Erase(4.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(1.023764098929446, 1.136615072420466, 5.175024587853133, 6.960353944900946, out id));
            // Step 8
            tree.Erase(5.000000000000000, 9.000000000000000);
            tree.Erase(1.000000000000000, 10.000000000000000);
            Assert.True(tree.Find(6.414178198615065, 9.472856430876552, 3.883019096692197, 9.470688171870595, out id));
            Assert.True((new List<ulong> { 5 }).Contains(id));
            // Step 9
            tree.Insert(5.000000000000000, 4.000000000000000, 7);
            tree.Erase(5.000000000000000, 1.000000000000000);
            Assert.True(tree.Find(6.669120510688877, 8.818373745277556, 3.257921203740439, 9.130362345120778, out id));
            Assert.True((new List<ulong> { 5 }).Contains(id));
            // Step 10
            tree.Insert(2.000000000000000, 9.000000000000000, 8);
            tree.Erase(8.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(2.397617638085301, 7.951367534645065, 4.994654294970911, 7.170842854702181, out id));
            // Step 11
            tree.Erase(2.000000000000000, 9.000000000000000);
            tree.Erase(2.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(2.298953014925337, 4.542821006542316, 4.416337268526453, 7.552595798788735, out id));
            // Step 12
            tree.Insert(2.000000000000000, 5.000000000000000, 9);
            tree.Erase(7.000000000000000, 0.000000000000000);
            Assert.True(tree.Find(1.325120675284264, 3.357429669567305, 0.903594174521473, 7.012420344982812, out id));
            Assert.True((new List<ulong> { 2, 6, 9 }).Contains(id));
            // Step 13
            tree.Erase(2.000000000000000, 1.000000000000000);
            tree.Erase(7.000000000000000, 4.000000000000000);
            Assert.True(tree.Find(1.490443893385683, 6.385978934422020, 4.364193403123908, 5.963838801378268, out id));
            Assert.True((new List<ulong> { 9 }).Contains(id));
            // Step 14
            tree.Insert(9.000000000000000, 9.000000000000000, 10);
            tree.Erase(1.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(2.074219078958403, 2.989549889267472, 0.325009454599362, 1.545574588203258, out id));
            // Step 15
            tree.Insert(10.000000000000000, 7.000000000000000, 11);
            tree.Erase(7.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(3.296970718044399, 7.033657758706689, 3.891322799019103, 9.212489685190491, out id));
            Assert.True((new List<ulong> { 7 }).Contains(id));
            // Step 16
            tree.Insert(7.000000000000000, 10.000000000000000, 12);
            tree.Erase(5.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(6.258921167485632, 8.395051620214772, 6.507838444911465, 6.801949409908746, out id));
            // Step 17
            tree.Insert(5.000000000000000, 0.000000000000000, 13);
            tree.Erase(1.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(0.717236659284667, 2.016155301222059, 1.640156058632718, 6.634722081639836, out id));
            Assert.True((new List<ulong> { 9 }).Contains(id));
            // Step 18
            tree.Erase(10.000000000000000, 7.000000000000000);
            tree.Erase(5.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(7.258285127199589, 9.598808437618038, 7.507509890047817, 9.466333143995815, out id));
            Assert.True((new List<ulong> { 10 }).Contains(id));
            // Step 19
            tree.Insert(6.000000000000000, 5.000000000000000, 14);
            tree.Erase(2.000000000000000, 0.000000000000000);
            Assert.True(tree.Find(2.476661046092859, 8.452052646843708, 0.784942402169823, 2.044442460196176, out id));
            Assert.True((new List<ulong> { 6 }).Contains(id));
            // Step 20
            tree.Insert(3.000000000000000, 5.000000000000000, 15);
            tree.Erase(0.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(0.574404751101457, 6.573644918701903, 5.084117705762269, 6.643480177967199, out id));
            // Step 21
            tree.Insert(1.000000000000000, 6.000000000000000, 16);
            tree.Erase(9.000000000000000, 5.000000000000000);
            Assert.True(tree.Find(7.347344212363341, 9.816043887269551, 3.146355866226480, 6.896299304508576, out id));
            Assert.True((new List<ulong> { 5 }).Contains(id));
            // Step 22
            tree.Erase(3.000000000000000, 5.000000000000000);
            tree.Erase(6.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(4.663372189966876, 7.699804678387859, 1.379824981057697, 5.430562086944360, out id));
            Assert.True((new List<ulong> { 7, 14 }).Contains(id));
            // Step 23
            tree.Erase(9.000000000000000, 9.000000000000000);
            tree.Erase(4.000000000000000, 6.000000000000000);
            Assert.True(tree.Find(0.845936536256332, 4.041132049282475, 3.484728419830667, 9.547258852654503, out id));
            Assert.True((new List<ulong> { 9, 16 }).Contains(id));
            // Step 24
            tree.Erase(1.000000000000000, 6.000000000000000);
            tree.Erase(10.000000000000000, 6.000000000000000);
            Assert.True(tree.Find(2.917570595206635, 5.471516672488389, 0.005838584014340, 4.084603816228344, out id));
            Assert.True((new List<ulong> { 6, 7 }).Contains(id));
            // Step 25
            tree.Insert(3.000000000000000, 3.000000000000000, 17);
            tree.Erase(5.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(6.869341172753709, 8.496110061518253, 3.173831454552432, 3.474836950765391, out id));
            // Step 26
            tree.Insert(9.000000000000000, 7.000000000000000, 18);
            tree.Erase(9.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(4.526116539331938, 5.873516579307159, 4.568401522271772, 9.624208545014042, out id));
            // Step 27
            tree.Insert(7.000000000000000, 9.000000000000000, 19);
            tree.Erase(10.000000000000000, 5.000000000000000);
            Assert.True(tree.Find(5.533229811784274, 8.943440374462666, 0.530756741588370, 4.340701775626792, out id));
            Assert.True((new List<ulong> { 5 }).Contains(id));
            // Step 28
            tree.Insert(6.000000000000000, 0.000000000000000, 20);
            tree.Erase(4.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(1.643634920100602, 1.908265818782879, 5.710976744278547, 9.624608556266404, out id));
            // Step 29
            tree.Erase(9.000000000000000, 7.000000000000000);
            tree.Erase(4.000000000000000, 6.000000000000000);
            Assert.True(tree.Find(5.898758292568846, 9.453481251032731, 4.140309736699890, 6.396504745778358, out id));
            Assert.True((new List<ulong> { 14 }).Contains(id));
            // Step 30
            tree.Erase(5.000000000000000, 4.000000000000000);
            tree.Erase(1.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(2.334678056372076, 2.635656891455593, 3.623370944565801, 5.838803584018849, out id));
            // Step 31
            tree.Erase(6.000000000000000, 5.000000000000000);
            tree.Erase(4.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(1.971104163095518, 4.548575092739839, 4.738334049402916, 7.665046046624959, out id));
            Assert.True((new List<ulong> { 9 }).Contains(id));
            // Step 32
            tree.Insert(2.000000000000000, 4.000000000000000, 21);
            tree.Erase(5.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(9.101419574642996, 9.678301101037283, 4.894252067586783, 7.980539834866161, out id));
            // Step 33
            tree.Insert(2.000000000000000, 6.000000000000000, 22);
            tree.Erase(6.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(5.004058510269481, 8.936287620032276, 4.204920146733961, 8.747932699252701, out id));
            // Step 34
            tree.Insert(4.000000000000000, 5.000000000000000, 23);
            tree.Erase(7.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(3.484821810954120, 7.645410993833437, 1.396815420447888, 3.267530872881628, out id));
            // Step 35
            tree.Erase(4.000000000000000, 5.000000000000000);
            tree.Erase(1.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(4.857481248251903, 4.869448961201628, 6.462399210185723, 7.526854348502710, out id));
            // Step 36
            tree.Insert(6.000000000000000, 9.000000000000000, 24);
            tree.Erase(1.000000000000000, 5.000000000000000);
            Assert.True(tree.Find(5.519881881735288, 9.232268518501494, 2.964180050645732, 7.840228682246537, out id));
            Assert.True((new List<ulong> { 5 }).Contains(id));
            // Step 37
            tree.Erase(6.000000000000000, 9.000000000000000);
            tree.Erase(5.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(9.503321881432699, 9.997103642485692, 4.832282512156846, 6.235865884729032, out id));
            // Step 38
            tree.Erase(10.000000000000000, 3.000000000000000);
            tree.Erase(3.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(4.106370698175894, 7.029997941247323, 4.088256284677373, 8.230610616545848, out id));
            // Step 39
            tree.Erase(3.000000000000000, 3.000000000000000);
            tree.Erase(2.000000000000000, 10.000000000000000);
            Assert.True(tree.Find(1.898565026295771, 8.768881653416297, 8.313456340533502, 9.949622929366480, out id));
            Assert.True((new List<ulong> { 19 }).Contains(id));
            // Step 40
            tree.Erase(2.000000000000000, 5.000000000000000);
            tree.Erase(1.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(1.054513731034482, 1.883518828431427, 6.475984920987096, 8.619749840791300, out id));
            // Step 41
            tree.Insert(6.000000000000000, 8.000000000000000, 25);
            tree.Erase(4.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(3.069375249504741, 5.068182140737298, 2.875583307341467, 6.858077325179130, out id));
            // Step 42
            tree.Erase(7.000000000000000, 9.000000000000000);
            tree.Erase(4.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(4.271719138541207, 6.902790848362359, 6.296962715259598, 6.716904703311547, out id));
            // Step 43
            tree.Erase(7.000000000000000, 10.000000000000000);
            tree.Erase(7.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(4.808521959663661, 8.401963040356401, 4.683561817525046, 5.896446812878192, out id));
            // Step 44
            tree.Insert(2.000000000000000, 0.000000000000000, 26);
            tree.Erase(7.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(8.024116554877889, 8.131988917020475, 2.469469547455825, 4.533174207104780, out id));
            // Step 45
            tree.Insert(1.000000000000000, 10.000000000000000, 27);
            tree.Erase(10.000000000000000, 5.000000000000000);
            Assert.True(tree.Find(4.972545514027759, 9.016348444913318, 2.924204777666952, 8.714058288576625, out id));
            Assert.True((new List<ulong> { 5, 25 }).Contains(id));
            // Step 46
            tree.Erase(2.000000000000000, 6.000000000000000);
            tree.Erase(2.000000000000000, 10.000000000000000);
            Assert.True(tree.Find(0.260778483303967, 3.142104240681891, 3.177970799973523, 5.155922182568805, out id));
            Assert.True((new List<ulong> { 21 }).Contains(id));
            // Step 47
            tree.Insert(7.000000000000000, 1.000000000000000, 28);
            tree.Erase(7.000000000000000, 2.000000000000000);
            Assert.True(tree.Find(7.371160825272795, 8.367896675330339, 2.736249375715284, 4.278646488158802, out id));
            Assert.True((new List<ulong> { 5 }).Contains(id));
            // Step 48
            tree.Erase(5.000000000000000, 0.000000000000000);
            tree.Erase(10.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(4.609139164903433, 7.166624861626536, 3.962747911435430, 6.955879476762971, out id));
            // Step 49
            tree.Insert(2.000000000000000, 10.000000000000000, 29);
            tree.Erase(2.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(2.906129149301424, 3.083679344620267, 6.793535554205023, 7.148198917126852, out id));
            // Step 50
            tree.Insert(10.000000000000000, 4.000000000000000, 30);
            tree.Erase(7.000000000000000, 10.000000000000000);
            Assert.True(tree.Find(1.067390824241888, 9.782753398120915, 3.327951256274390, 9.320177482110935, out id));
            Assert.True((new List<ulong> { 5, 21, 25 }).Contains(id));
            // Step 51
            tree.Erase(6.000000000000000, 8.000000000000000);
            tree.Erase(3.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(4.005707659718062, 4.155838907984847, 3.321895909551343, 5.739626726607543, out id));
            // Step 52
            tree.Insert(9.000000000000000, 3.000000000000000, 31);
            tree.Erase(7.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(4.138615317665089, 6.290932563533426, 3.223910762513942, 7.539982508733392, out id));
            // Step 53
            tree.Erase(1.000000000000000, 10.000000000000000);
            tree.Erase(3.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(3.454651390598636, 4.298740467510337, 0.626863418256154, 0.714649021243869, out id));
            // Step 54
            tree.Erase(3.000000000000000, 1.000000000000000);
            tree.Erase(4.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(1.051306320853828, 3.458799932764756, 4.213413813684595, 5.411193295127823, out id));
            // Step 55
            tree.Insert(4.000000000000000, 3.000000000000000, 32);
            tree.Erase(2.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(0.645480852203911, 1.982071503169962, 2.425881577023371, 5.698721331448475, out id));
            // Step 56
            tree.Insert(0.000000000000000, 0.000000000000000, 33);
            tree.Erase(2.000000000000000, 5.000000000000000);
            Assert.True(tree.Find(3.555051581556508, 7.392134403754449, 0.993510048962319, 4.432782261762717, out id));
            Assert.True((new List<ulong> { 28, 32 }).Contains(id));
            // Step 57
            tree.Insert(1.000000000000000, 4.000000000000000, 34);
            tree.Erase(4.000000000000000, 7.000000000000000);
            Assert.True(tree.Find(1.204341668714374, 9.196038171565867, 2.535444697330929, 8.731303043620359, out id));
            Assert.True((new List<ulong> { 5, 21, 31, 32 }).Contains(id));
            // Step 58
            tree.Insert(2.000000000000000, 9.000000000000000, 35);
            tree.Erase(3.000000000000000, 6.000000000000000);
            Assert.True(tree.Find(1.424147071941039, 7.239199281787708, 2.301391416306529, 9.662268009973031, out id));
            Assert.True((new List<ulong> { 21, 32, 35 }).Contains(id));
            // Step 59
            tree.Erase(2.000000000000000, 4.000000000000000);
            tree.Erase(2.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(1.547253302839726, 8.854986154481868, 9.332053223539610, 9.508650933036588, out id));
            // Step 60
            tree.Erase(10.000000000000000, 4.000000000000000);
            tree.Erase(10.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(0.558233933070030, 4.948261919379107, 2.245869414405297, 5.340211423855462, out id));
            Assert.True((new List<ulong> { 32, 34 }).Contains(id));
            // Step 61
            tree.Erase(6.000000000000000, 0.000000000000000);
            tree.Erase(9.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(1.484414864484533, 8.943071988432260, 4.672007585796282, 6.189628870302796, out id));
            // Step 62
            tree.Erase(4.000000000000000, 3.000000000000000);
            tree.Erase(10.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(3.657167476295837, 6.443511372303345, 2.035153768311178, 5.805924531863120, out id));
            // Step 63
            tree.Insert(6.000000000000000, 3.000000000000000, 36);
            tree.Erase(8.000000000000000, 1.000000000000000);
            Assert.True(tree.Find(8.420462172603004, 9.699698064600380, 2.754294449959800, 3.640985770941123, out id));
            Assert.True((new List<ulong> { 31 }).Contains(id));
            // Step 64
            tree.Insert(4.000000000000000, 7.000000000000000, 37);
            tree.Erase(8.000000000000000, 0.000000000000000);
            Assert.True(tree.Find(2.970785907155479, 9.099260246121803, 2.230467962706527, 8.130918442581148, out id));
            Assert.True((new List<ulong> { 5, 31, 36, 37 }).Contains(id));
            // Step 65
            tree.Erase(8.000000000000000, 4.000000000000000);
            tree.Erase(5.000000000000000, 10.000000000000000);
            Assert.True(tree.Find(0.083128297173576, 2.492328075065078, 1.157008002966278, 7.170712504283314, out id));
            Assert.True((new List<ulong> { 34 }).Contains(id));
            // Step 66
            tree.Erase(0.000000000000000, 0.000000000000000);
            tree.Erase(0.000000000000000, 8.000000000000000);
            Assert.True(tree.Find(3.880289097910920, 9.245165747206807, 0.170804138491557, 1.125420142781023, out id));
            Assert.True((new List<ulong> { 28 }).Contains(id));
            // Step 67
            tree.Erase(2.000000000000000, 0.000000000000000);
            tree.Erase(10.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(0.223091752651067, 6.613786628505048, 3.077897328547082, 3.364329584830096, out id));
            // Step 68
            tree.Erase(9.000000000000000, 3.000000000000000);
            tree.Erase(3.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(2.194035433661425, 2.464735398223069, 4.432567718161194, 5.833557803690770, out id));
            // Step 69
            tree.Erase(7.000000000000000, 1.000000000000000);
            tree.Erase(9.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(1.217408225698271, 2.491569247416353, 0.473893601606101, 8.697534894879221, out id));
            // Step 70
            tree.Insert(2.000000000000000, 5.000000000000000, 38);
            tree.Erase(5.000000000000000, 2.000000000000000);
            Assert.True(tree.Find(3.870470414530294, 5.753154660699059, 2.276340809005537, 8.683833729011850, out id));
            Assert.True((new List<ulong> { 37 }).Contains(id));
            // Step 71
            tree.Insert(6.000000000000000, 8.000000000000000, 39);
            tree.Erase(2.000000000000000, 2.000000000000000);
            Assert.True(tree.Find(2.905573110274545, 6.608096453460032, 2.792271926094111, 7.107907851846145, out id));
            Assert.True((new List<ulong> { 36, 37 }).Contains(id));
            // Step 72
            tree.Erase(2.000000000000000, 5.000000000000000);
            tree.Erase(7.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(6.150304196664237, 6.449224674842809, 5.531209854753552, 9.795510819680915, out id));
            // Step 73
            tree.Erase(4.000000000000000, 7.000000000000000);
            tree.Erase(8.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(1.531621779899924, 3.439781305406661, 5.954938174631805, 8.677937468922515, out id));
            // Step 74
            tree.Erase(6.000000000000000, 3.000000000000000);
            tree.Erase(10.000000000000000, 10.000000000000000);
            Assert.True(tree.Find(3.038612710968146, 7.423630911097202, 0.108569189647482, 9.248630525334246, out id));
            Assert.True((new List<ulong> { 39 }).Contains(id));
            // Step 75
            tree.Insert(4.000000000000000, 6.000000000000000, 40);
            tree.Erase(7.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(0.121409089485233, 7.509149159479012, 4.520376124394403, 5.234173177232844, out id));
            // Step 76
            tree.Erase(1.000000000000000, 4.000000000000000);
            tree.Erase(4.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(3.046084287348969, 9.953180145726115, 0.491130430963542, 2.529139566152670, out id));
            // Step 77
            tree.Insert(10.000000000000000, 6.000000000000000, 41);
            tree.Erase(5.000000000000000, 10.000000000000000);
            Assert.True(tree.Find(0.785134998024181, 8.045678894046386, 7.822614567406645, 8.855524426138517, out id));
            Assert.True((new List<ulong> { 39 }).Contains(id));
            // Step 78
            tree.Insert(0.000000000000000, 7.000000000000000, 42);
            tree.Erase(6.000000000000000, 5.000000000000000);
            Assert.True(tree.Find(5.138391401407540, 6.324452751813071, 6.788354416400605, 8.978439157106989, out id));
            Assert.True((new List<ulong> { 39 }).Contains(id));
            // Step 79
            tree.Insert(5.000000000000000, 0.000000000000000, 43);
            tree.Erase(1.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(2.611987727956845, 3.695848312339034, 0.185165901258540, 2.306591934546057, out id));
            // Step 80
            tree.Insert(7.000000000000000, 4.000000000000000, 44);
            tree.Erase(8.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(7.685385759040666, 9.087483018418141, 0.336825344326916, 7.771906861618020, out id));
            // Step 81
            tree.Erase(6.000000000000000, 8.000000000000000);
            tree.Erase(1.000000000000000, 0.000000000000000);
            Assert.True(tree.Find(1.019602415984148, 9.297211112753262, 1.245206892298305, 9.498120926197352, out id));
            Assert.True((new List<ulong> { 35, 40, 44 }).Contains(id));
            // Step 82
            tree.Erase(2.000000000000000, 9.000000000000000);
            tree.Erase(1.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(0.836859774607438, 6.822626776557193, 2.013914167082228, 3.541225137669998, out id));
            // Step 83
            tree.Insert(3.000000000000000, 5.000000000000000, 45);
            tree.Erase(4.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(3.438372201027043, 9.501598642653379, 4.246470581582190, 5.760803596664431, out id));
            // Step 84
            tree.Erase(10.000000000000000, 6.000000000000000);
            tree.Erase(7.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(1.432302502208149, 6.923605610253199, 0.297483835315385, 3.636963672369212, out id));
            // Step 85
            tree.Insert(7.000000000000000, 3.000000000000000, 46);
            tree.Erase(1.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(4.288352131131530, 5.429461200220978, 2.934672604090930, 6.971581051335041, out id));
            // Step 86
            tree.Insert(7.000000000000000, 10.000000000000000, 47);
            tree.Erase(3.000000000000000, 7.000000000000000);
            Assert.True(tree.Find(3.523804606204860, 8.236964975548759, 0.941437765526474, 5.777012708581775, out id));
            Assert.True((new List<ulong> { 44, 46 }).Contains(id));
            // Step 87
            tree.Insert(8.000000000000000, 3.000000000000000, 48);
            tree.Erase(5.000000000000000, 10.000000000000000);
            Assert.True(tree.Find(5.645703483892329, 8.651028106381698, 0.914174746761726, 8.552724091133376, out id));
            Assert.True((new List<ulong> { 44, 46, 48 }).Contains(id));
            // Step 88
            tree.Erase(5.000000000000000, 0.000000000000000);
            tree.Erase(7.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(2.819303456146105, 4.809952182658359, 0.044830420065871, 3.583202020260367, out id));
            // Step 89
            tree.Erase(0.000000000000000, 7.000000000000000);
            tree.Erase(1.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(8.257366847711985, 9.037646970665739, 4.873328364984218, 6.289478978038455, out id));
            // Step 90
            tree.Insert(7.000000000000000, 0.000000000000000, 49);
            tree.Erase(4.000000000000000, 8.000000000000000);
            Assert.True(tree.Find(1.646417258980275, 6.299580034735433, 4.322268269494938, 8.942500017749490, out id));
            Assert.True((new List<ulong> { 40, 45 }).Contains(id));
            // Step 91
            tree.Insert(5.000000000000000, 1.000000000000000, 50);
            tree.Erase(1.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(4.771391150273584, 7.640596017577929, 5.260510688487011, 8.039826598832018, out id));
            // Step 92
            tree.Erase(5.000000000000000, 1.000000000000000);
            tree.Erase(1.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(9.339788399715843, 9.435164278730257, 4.349969953644165, 4.658250179968989, out id));
            // Step 93
            tree.Insert(3.000000000000000, 10.000000000000000, 51);
            tree.Erase(7.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(7.679770651855517, 8.676825136733164, 3.473605103999071, 5.591852088906137, out id));
            // Step 94
            tree.Insert(10.000000000000000, 2.000000000000000, 52);
            tree.Erase(2.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(0.284129508909848, 2.224857546583630, 4.380226914524533, 9.008944560787905, out id));
            // Step 95
            tree.Erase(8.000000000000000, 3.000000000000000);
            tree.Erase(4.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(5.872657613294666, 6.210633359495157, 0.342701516888629, 1.582838359869918, out id));
            // Step 96
            tree.Erase(7.000000000000000, 0.000000000000000);
            tree.Erase(9.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(5.058561735938274, 9.117258767862516, 0.439421295571397, 9.835893949554984, out id));
            Assert.True((new List<ulong> { 44, 46 }).Contains(id));
            // Step 97
            tree.Erase(4.000000000000000, 6.000000000000000);
            tree.Erase(7.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(1.873576321704851, 8.910952121469544, 1.000825115444671, 4.727927391016547, out id));
            Assert.True((new List<ulong> { 44, 46 }).Contains(id));
            // Step 98
            tree.Insert(5.000000000000000, 9.000000000000000, 53);
            tree.Erase(10.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(4.373578071118961, 7.297757564564318, 1.222967197193516, 4.575557253902560, out id));
            Assert.True((new List<ulong> { 44, 46 }).Contains(id));
            // Step 99
            tree.Insert(7.000000000000000, 6.000000000000000, 54);
            tree.Erase(0.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(0.716545258094387, 5.298878076918106, 0.980325345980282, 1.178717063965558, out id));
            // Step 100
            tree.Insert(9.000000000000000, 7.000000000000000, 55);
            tree.Erase(10.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(3.235259534680244, 4.289115769699804, 6.274771826586406, 7.285919485241658, out id));
            // Step 101
            tree.Erase(10.000000000000000, 2.000000000000000);
            tree.Erase(6.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(2.974629966262692, 7.231670002747173, 1.679714479400379, 5.356912739095093, out id));
            Assert.True((new List<ulong> { 44, 45, 46 }).Contains(id));
            // Step 102
            tree.Erase(7.000000000000000, 10.000000000000000);
            tree.Erase(9.000000000000000, 2.000000000000000);
            Assert.True(tree.Find(4.586634159664246, 6.473209487414186, 5.098865068946380, 9.952192030971132, out id));
            Assert.True((new List<ulong> { 53 }).Contains(id));
            // Step 103
            tree.Erase(3.000000000000000, 10.000000000000000);
            tree.Erase(0.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(0.889630922821821, 3.123759278610604, 7.877553007182369, 9.986088900792968, out id));
            // Step 104
            tree.Insert(4.000000000000000, 1.000000000000000, 56);
            tree.Erase(4.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(2.047695588185335, 8.459568642971387, 3.045720104822346, 3.737194690228488, out id));
            // Step 105
            tree.Erase(4.000000000000000, 1.000000000000000);
            tree.Erase(3.000000000000000, 7.000000000000000);
            Assert.True(tree.Find(6.918086301968927, 7.191902317083786, 1.406920075984192, 8.289496176905303, out id));
            Assert.True((new List<ulong> { 44, 46, 54 }).Contains(id));
            // Step 106
            tree.Insert(8.000000000000000, 9.000000000000000, 57);
            tree.Erase(9.000000000000000, 6.000000000000000);
            Assert.True(tree.Find(6.706102040560818, 8.623718767736353, 3.328297780412159, 8.680763195247810, out id));
            Assert.True((new List<ulong> { 44, 54 }).Contains(id));
            // Step 107
            tree.Insert(8.000000000000000, 6.000000000000000, 58);
            tree.Erase(4.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(0.274954449313801, 3.071454770898421, 0.000007946516253, 2.255695403683780, out id));
            // Step 108
            tree.Erase(7.000000000000000, 4.000000000000000);
            tree.Erase(10.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(0.210976116798413, 0.475737405067400, 0.529629077456314, 3.314474806184216, out id));
            // Step 109
            tree.Erase(5.000000000000000, 9.000000000000000);
            tree.Erase(10.000000000000000, 6.000000000000000);
            Assert.True(tree.Find(6.033946760656109, 8.851936522847852, 1.441122340571588, 5.236488410099403, out id));
            Assert.True((new List<ulong> { 46 }).Contains(id));
            // Step 110
            tree.Insert(0.000000000000000, 8.000000000000000, 59);
            tree.Erase(7.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(7.238273591641050, 9.086781764738845, 0.240819909981644, 2.626134474179662, out id));
            // Step 111
            tree.Erase(7.000000000000000, 3.000000000000000);
            tree.Erase(3.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(4.348671298697820, 8.131159293041433, 8.766551015870323, 8.943820003137230, out id));
            // Step 112
            tree.Erase(8.000000000000000, 6.000000000000000);
            tree.Erase(9.000000000000000, 8.000000000000000);
            Assert.True(tree.Find(0.561127858764588, 7.479575990998781, 3.577769728348619, 6.637937757460510, out id));
            Assert.True((new List<ulong> { 45, 54 }).Contains(id));
            // Step 113
            tree.Erase(2.000000000000000, 10.000000000000000);
            tree.Erase(0.000000000000000, 5.000000000000000);
            Assert.True(tree.Find(1.421951116833150, 5.301300685279538, 4.069537984900522, 7.628426744123732, out id));
            Assert.True((new List<ulong> { 45 }).Contains(id));
            // Step 114
            tree.Insert(10.000000000000000, 9.000000000000000, 60);
            tree.Erase(10.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(7.116681470013119, 7.424242595829686, 0.467513631099472, 2.474520745067001, out id));
            // Step 115
            tree.Erase(7.000000000000000, 6.000000000000000);
            tree.Erase(5.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(0.039859880214338, 9.049044700984361, 0.597399181314001, 7.991835442833973, out id));
            Assert.True((new List<ulong> { 45, 55 }).Contains(id));
            // Step 116
            tree.Insert(10.000000000000000, 3.000000000000000, 61);
            tree.Erase(0.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(2.044100132666995, 2.412858487212599, 4.233531238529293, 6.755524668403742, out id));
            // Step 117
            tree.Insert(1.000000000000000, 7.000000000000000, 62);
            tree.Erase(4.000000000000000, 4.000000000000000);
            Assert.True(tree.Find(4.242859402018412, 8.400722034865643, 7.256666787932136, 9.888341674029340, out id));
            Assert.True((new List<ulong> { 57 }).Contains(id));
            // Step 118
            tree.Insert(2.000000000000000, 2.000000000000000, 63);
            tree.Erase(2.000000000000000, 10.000000000000000);
            Assert.True(tree.Find(0.908132336238270, 4.244091036916078, 0.183040552531223, 7.226610533643358, out id));
            Assert.True((new List<ulong> { 45, 62, 63 }).Contains(id));
            // Step 119
            tree.Erase(0.000000000000000, 8.000000000000000);
            tree.Erase(6.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(3.050059412100493, 7.554931411858310, 3.459502214224281, 6.023722979818523, out id));
            // Step 120
            tree.Insert(2.000000000000000, 8.000000000000000, 64);
            tree.Erase(5.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(4.961030403021893, 7.280335739448978, 0.542916954247046, 2.851515085076448, out id));
            // Step 121
            tree.Erase(1.000000000000000, 7.000000000000000);
            tree.Erase(0.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(0.781697111890820, 4.123322499208041, 8.104915969372689, 9.265383340804389, out id));
            // Step 122
            tree.Erase(10.000000000000000, 9.000000000000000);
            tree.Erase(5.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(5.381646030086119, 5.864554972133558, 5.849291658740862, 9.014383803898436, out id));
            // Step 123
            tree.Insert(5.000000000000000, 5.000000000000000, 65);
            tree.Erase(2.000000000000000, 6.000000000000000);
            Assert.False(tree.Find(1.198266174145650, 1.454702744138306, 5.622268433246907, 9.927060698244311, out id));
            // Step 124
            tree.Erase(8.000000000000000, 9.000000000000000);
            tree.Erase(1.000000000000000, 10.000000000000000);
            Assert.True(tree.Find(2.663911639976678, 7.900104620164459, 2.358707184996496, 5.407409905500673, out id));
            Assert.True((new List<ulong> { 45, 65 }).Contains(id));
            // Step 125
            tree.Insert(0.000000000000000, 1.000000000000000, 66);
            tree.Erase(8.000000000000000, 6.000000000000000);
            Assert.True(tree.Find(0.642501059570165, 4.262607858649728, 0.562400946730560, 4.553064586908013, out id));
            Assert.True((new List<ulong> { 63 }).Contains(id));
            // Step 126
            tree.Erase(2.000000000000000, 2.000000000000000);
            tree.Erase(4.000000000000000, 8.000000000000000);
            Assert.True(tree.Find(0.028685074191984, 3.304743531353243, 4.684883466667253, 9.913359689690369, out id));
            Assert.True((new List<ulong> { 45, 64 }).Contains(id));
            // Step 127
            tree.Erase(9.000000000000000, 7.000000000000000);
            tree.Erase(2.000000000000000, 0.000000000000000);
            Assert.True(tree.Find(0.854839030697448, 4.421460132787058, 1.963268918852675, 7.444520832628721, out id));
            Assert.True((new List<ulong> { 45 }).Contains(id));
            // Step 128
            tree.Insert(0.000000000000000, 7.000000000000000, 67);
            tree.Erase(7.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(5.335486279938064, 8.880612210072197, 5.725218021974077, 7.380771117914911, out id));
            // Step 129
            tree.Erase(5.000000000000000, 5.000000000000000);
            tree.Erase(5.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(1.853324837292574, 6.244306305394649, 3.037999559928267, 4.722908033851397, out id));
            // Step 130
            tree.Insert(7.000000000000000, 8.000000000000000, 68);
            tree.Erase(0.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(7.782238612445039, 9.204265946663574, 0.822640728010879, 7.143520796415643, out id));
            // Step 131
            tree.Insert(5.000000000000000, 7.000000000000000, 69);
            tree.Erase(2.000000000000000, 2.000000000000000);
            Assert.True(tree.Find(0.460282104187135, 3.713613968711467, 3.726578260456348, 8.720594150302675, out id));
            Assert.True((new List<ulong> { 45, 64 }).Contains(id));
            // Step 132
            tree.Erase(3.000000000000000, 5.000000000000000);
            tree.Erase(8.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(6.906565496652623, 9.550205192833847, 8.760457190446129, 9.049744124807006, out id));
            // Step 133
            tree.Erase(0.000000000000000, 7.000000000000000);
            tree.Erase(2.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(4.557169640975816, 8.936305318751506, 1.287100901434880, 3.198131987694669, out id));
            // Step 134
            tree.Erase(2.000000000000000, 8.000000000000000);
            tree.Erase(9.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(1.882618872603382, 6.053032835588741, 4.911387232899448, 5.725095295548687, out id));
            // Step 135
            tree.Insert(7.000000000000000, 6.000000000000000, 70);
            tree.Erase(6.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(2.069360404849721, 2.915756777877029, 1.587391763400834, 3.641677010359083, out id));
            // Step 136
            tree.Insert(4.000000000000000, 1.000000000000000, 71);
            tree.Erase(0.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(2.741989481102979, 4.975293523928751, 5.257339062212813, 8.601991349267289, out id));
            // Step 137
            tree.Erase(7.000000000000000, 8.000000000000000);
            tree.Erase(0.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(8.244231794815843, 8.548752287117866, 3.744181115931275, 9.210534788572627, out id));
            // Step 138
            tree.Erase(10.000000000000000, 3.000000000000000);
            tree.Erase(8.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(4.282777837378169, 7.649181998827936, 0.189901503622525, 2.015497638912633, out id));
            // Step 139
            tree.Insert(7.000000000000000, 4.000000000000000, 72);
            tree.Erase(2.000000000000000, 0.000000000000000);
            Assert.True(tree.Find(1.897437495459064, 7.609052211973891, 3.616300402821003, 8.591132535141533, out id));
            Assert.True((new List<ulong> { 69, 70, 72 }).Contains(id));
            // Step 140
            tree.Insert(3.000000000000000, 9.000000000000000, 73);
            tree.Erase(9.000000000000000, 6.000000000000000);
            Assert.True(tree.Find(5.340731059433916, 8.016794400140920, 4.145863803025316, 8.414778853777809, out id));
            Assert.True((new List<ulong> { 70 }).Contains(id));
            // Step 141
            tree.Insert(1.000000000000000, 7.000000000000000, 74);
            tree.Erase(10.000000000000000, 7.000000000000000);
            Assert.True(tree.Find(5.956866057375354, 7.454322191923840, 1.359317847008306, 4.402352535026295, out id));
            Assert.True((new List<ulong> { 72 }).Contains(id));
            // Step 142
            tree.Insert(3.000000000000000, 2.000000000000000, 75);
            tree.Erase(9.000000000000000, 6.000000000000000);
            Assert.True(tree.Find(0.580183184152904, 7.703299212045466, 3.063936170445611, 8.745058943120622, out id));
            Assert.True((new List<ulong> { 69, 70, 72, 74 }).Contains(id));
            // Step 143
            tree.Insert(3.000000000000000, 4.000000000000000, 76);
            tree.Erase(1.000000000000000, 2.000000000000000);
            Assert.True(tree.Find(0.223369555044552, 9.219672867080998, 0.266979399212236, 2.966240579020007, out id));
            Assert.True((new List<ulong> { 71, 75 }).Contains(id));
            // Step 144
            tree.Erase(3.000000000000000, 2.000000000000000);
            tree.Erase(8.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(2.679497584175175, 6.026722444675730, 6.016978306458417, 7.310036457861457, out id));
            Assert.True((new List<ulong> { 69 }).Contains(id));
            // Step 145
            tree.Insert(8.000000000000000, 10.000000000000000, 77);
            tree.Erase(0.000000000000000, 4.000000000000000);
            Assert.True(tree.Find(1.830069794314571, 7.196325763786388, 5.930680316797714, 7.914630245596058, out id));
            Assert.True((new List<ulong> { 69, 70 }).Contains(id));
            // Step 146
            tree.Insert(2.000000000000000, 4.000000000000000, 78);
            tree.Erase(2.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(0.015713828556921, 5.932668044519537, 0.399227135215552, 4.176860490578981, out id));
            Assert.True((new List<ulong> { 71, 76, 78 }).Contains(id));
            // Step 147
            tree.Erase(8.000000000000000, 10.000000000000000);
            tree.Erase(5.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(0.746783909638666, 2.699279565120110, 6.122477443496928, 7.739172989759063, out id));
            Assert.True((new List<ulong> { 74 }).Contains(id));
            // Step 148
            tree.Insert(6.000000000000000, 5.000000000000000, 79);
            tree.Erase(3.000000000000000, 0.000000000000000);
            Assert.True(tree.Find(1.731242351348085, 5.282938191981281, 3.844988624560062, 9.814086672224523, out id));
            Assert.True((new List<ulong> { 69, 73, 76, 78 }).Contains(id));
            // Step 149
            tree.Erase(2.000000000000000, 4.000000000000000);
            tree.Erase(5.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(1.000916457571269, 4.109376512819491, 8.771836010716251, 9.654970984996799, out id));
            Assert.True((new List<ulong> { 73 }).Contains(id));
            // Step 150
            tree.Insert(6.000000000000000, 1.000000000000000, 80);
            tree.Erase(0.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(8.376168427641137, 8.605411281708010, 1.275164490291621, 9.726973708367041, out id));
            // Step 151
            tree.Insert(4.000000000000000, 7.000000000000000, 81);
            tree.Erase(9.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(3.070403904417716, 4.876407338077488, 2.153212552839666, 7.128514416409954, out id));
            Assert.True((new List<ulong> { 81 }).Contains(id));
            // Step 152
            tree.Erase(4.000000000000000, 7.000000000000000);
            tree.Erase(10.000000000000000, 6.000000000000000);
            Assert.True(tree.Find(1.777147034658435, 7.791354350360463, 5.964412502108329, 7.639696612424778, out id));
            Assert.True((new List<ulong> { 69, 70 }).Contains(id));
            // Step 153
            tree.Erase(6.000000000000000, 1.000000000000000);
            tree.Erase(7.000000000000000, 5.000000000000000);
            Assert.False(tree.Find(2.009812121573083, 7.948899783615867, 5.477125989128949, 5.679640385532108, out id));
            // Step 154
            tree.Erase(6.000000000000000, 5.000000000000000);
            tree.Erase(3.000000000000000, 10.000000000000000);
            Assert.True(tree.Find(0.622115494315996, 9.726278525957119, 0.874942054825094, 8.934013530292143, out id));
            Assert.True((new List<ulong> { 69, 70, 71, 72, 74, 76 }).Contains(id));
            // Step 155
            tree.Insert(6.000000000000000, 4.000000000000000, 82);
            tree.Erase(4.000000000000000, 0.000000000000000);
            Assert.True(tree.Find(1.296502441921049, 7.721312445561964, 0.766242504636127, 8.139733327543349, out id));
            Assert.True((new List<ulong> { 69, 70, 71, 72, 76, 82 }).Contains(id));
            // Step 156
            tree.Erase(7.000000000000000, 6.000000000000000);
            tree.Erase(8.000000000000000, 5.000000000000000);
            Assert.True(tree.Find(5.592892143548509, 7.868827388859000, 3.355122614396138, 7.517947374823624, out id));
            Assert.True((new List<ulong> { 72, 82 }).Contains(id));
            // Step 157
            tree.Erase(1.000000000000000, 7.000000000000000);
            tree.Erase(2.000000000000000, 10.000000000000000);
            Assert.True(tree.Find(2.421770889087794, 9.213441896451846, 2.327722713881678, 9.888744246162441, out id));
            Assert.True((new List<ulong> { 69, 72, 73, 76, 82 }).Contains(id));
            // Step 158
            tree.Insert(3.000000000000000, 10.000000000000000, 83);
            tree.Erase(7.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(6.341282232497056, 9.403879404650366, 2.003513279438472, 3.450091910295518, out id));
            // Step 159
            tree.Erase(0.000000000000000, 1.000000000000000);
            tree.Erase(10.000000000000000, 9.000000000000000);
            Assert.False(tree.Find(7.209193770138801, 9.599193243548703, 4.335642391710580, 7.699630292184578, out id));
            // Step 160
            tree.Insert(5.000000000000000, 8.000000000000000, 84);
            tree.Erase(9.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(6.758162823328054, 9.470383334812077, 1.369850475534377, 6.825079857843010, out id));
            Assert.True((new List<ulong> { 72 }).Contains(id));
            // Step 161
            tree.Erase(3.000000000000000, 9.000000000000000);
            tree.Erase(0.000000000000000, 2.000000000000000);
            Assert.True(tree.Find(3.667250191722990, 6.989376770178357, 6.196117548321616, 9.208465569840156, out id));
            Assert.True((new List<ulong> { 69, 84 }).Contains(id));
            // Step 162
            tree.Erase(5.000000000000000, 8.000000000000000);
            tree.Erase(7.000000000000000, 8.000000000000000);
            Assert.True(tree.Find(2.669484627588262, 8.488574743763394, 1.390213818496596, 9.050532753761876, out id));
            Assert.True((new List<ulong> { 69, 72, 76, 82 }).Contains(id));
            // Step 163
            tree.Insert(9.000000000000000, 6.000000000000000, 85);
            tree.Erase(0.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(1.463815575374418, 9.600634926144279, 6.286589078203233, 7.943988408213150, out id));
            Assert.True((new List<ulong> { 69 }).Contains(id));
            // Step 164
            tree.Erase(7.000000000000000, 4.000000000000000);
            tree.Erase(7.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(0.649227412500785, 1.745544069186297, 1.971974902497146, 5.232114383279983, out id));
            // Step 165
            tree.Erase(6.000000000000000, 4.000000000000000);
            tree.Erase(5.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(2.943757353085537, 6.667840214847223, 1.014848251561480, 3.476264676119435, out id));
            // Step 166
            tree.Insert(5.000000000000000, 3.000000000000000, 86);
            tree.Erase(8.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(1.920129131038810, 9.117897438664773, 4.737319554166296, 5.931585685441039, out id));
            // Step 167
            tree.Erase(4.000000000000000, 1.000000000000000);
            tree.Erase(6.000000000000000, 1.000000000000000);
            Assert.True(tree.Find(4.374233087208397, 7.596254404050368, 4.592666044648087, 8.281053207361458, out id));
            Assert.True((new List<ulong> { 69 }).Contains(id));
            // Step 168
            tree.Insert(9.000000000000000, 10.000000000000000, 87);
            tree.Erase(6.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(2.482159656859432, 4.768573099998275, 9.229152733679561, 9.596367811577537, out id));
            // Step 169
            tree.Insert(2.000000000000000, 8.000000000000000, 88);
            tree.Erase(8.000000000000000, 6.000000000000000);
            Assert.True(tree.Find(0.355298776902833, 5.394368288874488, 3.613672752373973, 8.416350964821030, out id));
            Assert.True((new List<ulong> { 69, 76, 88 }).Contains(id));
            // Step 170
            tree.Erase(3.000000000000000, 10.000000000000000);
            tree.Erase(8.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(0.410305616579308, 4.167309549437554, 8.245406646510716, 9.699714876044908, out id));
            // Step 171
            tree.Insert(10.000000000000000, 8.000000000000000, 89);
            tree.Erase(0.000000000000000, 8.000000000000000);
            Assert.True(tree.Find(0.416412627467606, 2.152544610366340, 7.239428817015092, 8.038407459297904, out id));
            Assert.True((new List<ulong> { 88 }).Contains(id));
            // Step 172
            tree.Erase(2.000000000000000, 8.000000000000000);
            tree.Erase(9.000000000000000, 2.000000000000000);
            Assert.True(tree.Find(0.024707896303119, 4.096104382650053, 2.965028099389978, 6.065770497627683, out id));
            Assert.True((new List<ulong> { 76 }).Contains(id));
            // Step 173
            tree.Erase(5.000000000000000, 3.000000000000000);
            tree.Erase(6.000000000000000, 1.000000000000000);
            Assert.False(tree.Find(2.201251553485846, 9.656521863789026, 0.608458833171277, 0.922687167479244, out id));
            // Step 174
            tree.Insert(2.000000000000000, 7.000000000000000, 90);
            tree.Erase(0.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(4.253382973510979, 4.929517212691579, 1.271044673329988, 4.455197481296533, out id));
            // Step 175
            tree.Insert(1.000000000000000, 10.000000000000000, 91);
            tree.Erase(3.000000000000000, 6.000000000000000);
            Assert.True(tree.Find(0.929679066670994, 8.801148880093198, 2.960219212486037, 8.508284148289205, out id));
            Assert.True((new List<ulong> { 69, 76, 90 }).Contains(id));
            // Step 176
            tree.Erase(9.000000000000000, 10.000000000000000);
            tree.Erase(3.000000000000000, 8.000000000000000);
            Assert.True(tree.Find(0.514623371801942, 8.121046529571041, 2.351150600958183, 6.690651084870409, out id));
            Assert.True((new List<ulong> { 76 }).Contains(id));
            // Step 177
            tree.Erase(2.000000000000000, 7.000000000000000);
            tree.Erase(2.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(4.279891710852567, 4.460138179636570, 2.716047667127282, 5.024175419575486, out id));
            // Step 178
            tree.Insert(5.000000000000000, 9.000000000000000, 92);
            tree.Erase(2.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(1.226280742037232, 7.242017951825019, 4.380957524885725, 5.762421075076086, out id));
            // Step 179
            tree.Insert(4.000000000000000, 2.000000000000000, 93);
            tree.Erase(8.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(7.022309074378470, 8.678751730833476, 1.977065322437531, 2.060652527304919, out id));
            // Step 180
            tree.Erase(5.000000000000000, 7.000000000000000);
            tree.Erase(1.000000000000000, 5.000000000000000);
            Assert.True(tree.Find(0.064364492738629, 7.911251211526027, 1.248653425984545, 2.578358846250255, out id));
            Assert.True((new List<ulong> { 93 }).Contains(id));
            // Step 181
            tree.Insert(6.000000000000000, 2.000000000000000, 94);
            tree.Erase(4.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(2.086729515424500, 2.588449472706154, 3.546593065325980, 4.708763749894071, out id));
            // Step 182
            tree.Erase(1.000000000000000, 10.000000000000000);
            tree.Erase(4.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(5.461113496843416, 5.856227423818652, 5.902076924779661, 9.524056309633743, out id));
            // Step 183
            tree.Insert(5.000000000000000, 10.000000000000000, 95);
            tree.Erase(4.000000000000000, 5.000000000000000);
            Assert.True(tree.Find(0.273215259629498, 3.341077530079981, 0.569388695645882, 4.428592218952848, out id));
            Assert.True((new List<ulong> { 76 }).Contains(id));
            // Step 184
            tree.Erase(6.000000000000000, 2.000000000000000);
            tree.Erase(9.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(0.315222523838815, 1.442511920192876, 1.528562425629846, 7.070783666992297, out id));
            // Step 185
            tree.Insert(3.000000000000000, 1.000000000000000, 96);
            tree.Erase(6.000000000000000, 0.000000000000000);
            Assert.False(tree.Find(3.435364678875072, 5.295281916692977, 0.832472780932362, 1.057699425525287, out id));
            // Step 186
            tree.Insert(9.000000000000000, 2.000000000000000, 97);
            tree.Erase(8.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(0.115827449659573, 2.024446627974295, 3.746890891808445, 5.114430663287463, out id));
            // Step 187
            tree.Erase(5.000000000000000, 10.000000000000000);
            tree.Erase(4.000000000000000, 7.000000000000000);
            Assert.True(tree.Find(4.783477255343474, 6.853313219683042, 3.892003043786876, 9.702620385098550, out id));
            Assert.True((new List<ulong> { 92 }).Contains(id));
            // Step 188
            tree.Insert(3.000000000000000, 6.000000000000000, 98);
            tree.Erase(8.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(1.790357503511479, 3.732837814668119, 1.591313768295509, 4.814976004488216, out id));
            Assert.True((new List<ulong> { 76 }).Contains(id));
            // Step 189
            tree.Insert(7.000000000000000, 8.000000000000000, 99);
            tree.Erase(3.000000000000000, 0.000000000000000);
            Assert.True(tree.Find(6.115297783824690, 9.187463570197922, 0.769200171220739, 6.389828008207186, out id));
            Assert.True((new List<ulong> { 85, 97 }).Contains(id));
            // Step 190
            tree.Erase(7.000000000000000, 8.000000000000000);
            tree.Erase(7.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(1.845214391090279, 5.389426542998916, 1.572602567567780, 5.612713241184522, out id));
            Assert.True((new List<ulong> { 76, 93 }).Contains(id));
            // Step 191
            tree.Erase(9.000000000000000, 6.000000000000000);
            tree.Erase(7.000000000000000, 4.000000000000000);
            Assert.False(tree.Find(5.177731491010001, 7.748307059486381, 7.110466391065850, 9.402844784846099, out id));
            // Step 192
            tree.Erase(3.000000000000000, 4.000000000000000);
            tree.Erase(7.000000000000000, 4.000000000000000);
            Assert.True(tree.Find(1.392662875218191, 6.943296304935495, 3.888947312967991, 8.581206105934710, out id));
            Assert.True((new List<ulong> { 98 }).Contains(id));
            // Step 193
            tree.Erase(4.000000000000000, 2.000000000000000);
            tree.Erase(7.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(3.151292233132574, 9.462730575175902, 3.722064600811901, 4.349424887668144, out id));
            // Step 194
            tree.Insert(4.000000000000000, 5.000000000000000, 100);
            tree.Erase(6.000000000000000, 3.000000000000000);
            Assert.False(tree.Find(6.946155913594469, 9.958866324893028, 3.679587042226228, 6.950646788807334, out id));
            // Step 195
            tree.Insert(3.000000000000000, 9.000000000000000, 101);
            tree.Erase(6.000000000000000, 3.000000000000000);
            Assert.True(tree.Find(4.807367388105850, 5.809722553441085, 4.983865716372541, 9.201925767738000, out id));
            Assert.True((new List<ulong> { 92 }).Contains(id));
            // Step 196
            tree.Insert(8.000000000000000, 5.000000000000000, 102);
            tree.Erase(5.000000000000000, 7.000000000000000);
            Assert.True(tree.Find(1.017752688429556, 4.637621337077052, 7.547211998966235, 9.595237199547894, out id));
            Assert.True((new List<ulong> { 101 }).Contains(id));
            // Step 197
            tree.Erase(10.000000000000000, 8.000000000000000);
            tree.Erase(4.000000000000000, 9.000000000000000);
            Assert.True(tree.Find(0.879109750203000, 7.652277878383430, 2.266148748246821, 9.735223037153538, out id));
            Assert.True((new List<ulong> { 92, 98, 100, 101 }).Contains(id));
            // Step 198
            tree.Erase(8.000000000000000, 5.000000000000000);
            tree.Erase(0.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(4.355257021146324, 8.973954930687126, 0.006192820767633, 3.692843650228403, out id));
            // Step 199
            tree.Insert(8.000000000000000, 2.000000000000000, 103);
            tree.Erase(8.000000000000000, 4.000000000000000);
            Assert.True(tree.Find(1.788338941711054, 4.369400580089463, 6.899678378827118, 9.699562816443489, out id));
            Assert.True((new List<ulong> { 101 }).Contains(id));
            // Step 200
            tree.Insert(2.000000000000000, 9.000000000000000, 104);
            tree.Erase(3.000000000000000, 2.000000000000000);
            Assert.False(tree.Find(2.000458513039588, 5.788022822500800, 6.721683039297146, 7.439247442444418, out id));
        }

        [Fact]
        public void SegmentTree1dTest()
        {
            var tree = new AdaptiveGrid.SegmentTree1d();
            ulong id;

            // Step 1
            tree.Insert(44.000000000000000, 1);
            tree.Erase(42.000000000000000);
            Assert.False(tree.Find(11.016737883485261, 11.301975406271808, out id));
            // Step 2
            tree.Insert(38.000000000000000, 2);
            tree.Erase(29.000000000000000);
            Assert.False(tree.Find(38.712920231745237, 43.844693581361504, out id));
            // Step 3
            tree.Insert(4.000000000000000, 3);
            tree.Erase(37.000000000000000);
            Assert.False(tree.Find(45.500648357140477, 48.567683993292206, out id));
            // Step 4
            tree.Erase(38.000000000000000);
            tree.Erase(26.000000000000000);
            Assert.True(tree.Find(41.708514831395398, 49.504925426628205, out id));
            Assert.True((new List<ulong> { 1 }).Contains(id));
            // Step 5
            tree.Insert(46.000000000000000, 4);
            tree.Erase(25.000000000000000);
            Assert.True(tree.Find(28.247346058558815, 47.986707303554596, out id));
            Assert.True((new List<ulong> { 1, 4 }).Contains(id));
            // Step 6
            tree.Insert(5.000000000000000, 5);
            tree.Erase(36.000000000000000);
            Assert.False(tree.Find(28.713026465820647, 31.705739139171889, out id));
            // Step 7
            tree.Insert(39.000000000000000, 6);
            tree.Erase(49.000000000000000);
            Assert.True(tree.Find(30.344404407465188, 49.221054559193931, out id));
            Assert.True((new List<ulong> { 1, 4, 6 }).Contains(id));
            // Step 8
            tree.Insert(48.000000000000000, 7);
            tree.Erase(15.000000000000000);
            Assert.False(tree.Find(19.929172599220841, 22.611240397922217, out id));
            // Step 9
            tree.Erase(4.000000000000000);
            tree.Erase(18.000000000000000);
            Assert.False(tree.Find(13.480317643498696, 26.380714710405080, out id));
            // Step 10
            tree.Insert(19.000000000000000, 8);
            tree.Erase(23.000000000000000);
            Assert.True(tree.Find(0.230211051685952, 18.620843500335894, out id));
            Assert.True((new List<ulong> { 5 }).Contains(id));
            // Step 11
            tree.Insert(6.000000000000000, 9);
            tree.Erase(38.000000000000000);
            Assert.False(tree.Find(19.550729893904567, 34.011209103944765, out id));
            // Step 12
            tree.Erase(5.000000000000000);
            tree.Erase(7.000000000000000);
            Assert.False(tree.Find(6.831387995743176, 13.154152446380408, out id));
            // Step 13
            tree.Erase(39.000000000000000);
            tree.Erase(18.000000000000000);
            Assert.True(tree.Find(5.822277688324284, 9.075354154983145, out id));
            Assert.True((new List<ulong> { 9 }).Contains(id));
            // Step 14
            tree.Insert(50.000000000000000, 10);
            tree.Erase(24.000000000000000);
            Assert.True(tree.Find(4.693195563223540, 31.228773057610454, out id));
            Assert.True((new List<ulong> { 8, 9 }).Contains(id));
            // Step 15
            tree.Insert(16.000000000000000, 11);
            tree.Erase(20.000000000000000);
            Assert.True(tree.Find(40.864928837541271, 44.091868726387780, out id));
            Assert.True((new List<ulong> { 1 }).Contains(id));
            // Step 16
            tree.Insert(20.000000000000000, 12);
            tree.Erase(12.000000000000000);
            Assert.True(tree.Find(37.966428146597700, 45.651811725603892, out id));
            Assert.True((new List<ulong> { 1 }).Contains(id));
            // Step 17
            tree.Insert(8.000000000000000, 13);
            tree.Erase(49.000000000000000);
            Assert.True(tree.Find(30.282466076349419, 48.629795203335846, out id));
            Assert.True((new List<ulong> { 1, 4, 7 }).Contains(id));
            // Step 18
            tree.Insert(12.000000000000000, 14);
            tree.Erase(31.000000000000000);
            Assert.False(tree.Find(24.973271474854560, 35.854214273510912, out id));
            // Step 19
            tree.Erase(48.000000000000000);
            tree.Erase(35.000000000000000);
            Assert.True(tree.Find(11.494765074626685, 22.714105032711579, out id));
            Assert.True((new List<ulong> { 8, 11, 12, 14 }).Contains(id));
            // Step 20
            tree.Erase(19.000000000000000);
            tree.Erase(45.000000000000000);
            Assert.False(tree.Find(48.084248406646914, 49.430995571781807, out id));
            // Step 21
            tree.Erase(50.000000000000000);
            tree.Erase(40.000000000000000);
            Assert.True(tree.Find(4.517970872607363, 35.062101724914058, out id));
            Assert.True((new List<ulong> { 9, 11, 12, 13, 14 }).Contains(id));
            // Step 22
            tree.Erase(46.000000000000000);
            tree.Erase(28.000000000000000);
            Assert.True(tree.Find(31.929894672110105, 49.650676285973013, out id));
            Assert.True((new List<ulong> { 1 }).Contains(id));
            // Step 23
            tree.Erase(20.000000000000000);
            tree.Erase(19.000000000000000);
            Assert.False(tree.Find(18.354661126357751, 29.819194006891337, out id));
            // Step 24
            tree.Insert(47.000000000000000, 15);
            tree.Erase(37.000000000000000);
            Assert.True(tree.Find(10.371095394792013, 14.947749446337360, out id));
            Assert.True((new List<ulong> { 14 }).Contains(id));
            // Step 25
            tree.Erase(6.000000000000000);
            tree.Erase(41.000000000000000);
            Assert.False(tree.Find(24.466914112260461, 41.232330591353772, out id));
            // Step 26
            tree.Insert(24.000000000000000, 16);
            tree.Erase(21.000000000000000);
            Assert.True(tree.Find(24.994724214542270, 45.292239036087793, out id));
            Assert.True((new List<ulong> { 1 }).Contains(id));
            // Step 27
            tree.Insert(9.000000000000000, 17);
            tree.Erase(30.000000000000000);
            Assert.True(tree.Find(2.118238667358496, 32.012942190226958, out id));
            Assert.True((new List<ulong> { 11, 13, 14, 16, 17 }).Contains(id));
            // Step 28
            tree.Insert(31.000000000000000, 18);
            tree.Erase(43.000000000000000);
            Assert.True(tree.Find(1.335350976647565, 28.844462950074611, out id));
            Assert.True((new List<ulong> { 11, 13, 14, 16, 17 }).Contains(id));
            // Step 29
            tree.Erase(44.000000000000000);
            tree.Erase(5.000000000000000);
            Assert.False(tree.Find(39.253951140442403, 43.936062826784614, out id));
            // Step 30
            tree.Erase(16.000000000000000);
            tree.Erase(10.000000000000000);
            Assert.True(tree.Find(18.545647134977933, 48.775591575902780, out id));
            Assert.True((new List<ulong> { 15, 16, 18 }).Contains(id));
            // Step 31
            tree.Insert(50.000000000000000, 19);
            tree.Erase(21.000000000000000);
            Assert.True(tree.Find(29.752024161006695, 44.744599968150574, out id));
            Assert.True((new List<ulong> { 18 }).Contains(id));
            // Step 32
            tree.Erase(31.000000000000000);
            tree.Erase(48.000000000000000);
            Assert.True(tree.Find(1.898739855178583, 12.525376828822649, out id));
            Assert.True((new List<ulong> { 13, 14, 17 }).Contains(id));
            // Step 33
            tree.Insert(11.000000000000000, 20);
            tree.Erase(1.000000000000000);
            Assert.True(tree.Find(12.383305230464298, 42.260263234218534, out id));
            Assert.True((new List<ulong> { 16 }).Contains(id));
            // Step 34
            tree.Erase(8.000000000000000);
            tree.Erase(37.000000000000000);
            Assert.True(tree.Find(10.226798933218229, 46.644122428257134, out id));
            Assert.True((new List<ulong> { 14, 16, 20 }).Contains(id));
            // Step 35
            tree.Insert(15.000000000000000, 21);
            tree.Erase(3.000000000000000);
            Assert.True(tree.Find(3.226215637238505, 28.334570865486477, out id));
            Assert.True((new List<ulong> { 14, 16, 17, 20, 21 }).Contains(id));
            // Step 36
            tree.Insert(35.000000000000000, 22);
            tree.Erase(5.000000000000000);
            Assert.True(tree.Find(19.407889461513360, 48.626011748435673, out id));
            Assert.True((new List<ulong> { 15, 16, 22 }).Contains(id));
            // Step 37
            tree.Insert(44.000000000000000, 23);
            tree.Erase(27.000000000000000);
            Assert.True(tree.Find(4.946158049955840, 15.731779331132401, out id));
            Assert.True((new List<ulong> { 14, 17, 20, 21 }).Contains(id));
            // Step 38
            tree.Insert(22.000000000000000, 24);
            tree.Erase(25.000000000000000);
            Assert.True(tree.Find(30.414333108805291, 49.884946445501306, out id));
            Assert.True((new List<ulong> { 15, 22, 23 }).Contains(id));
            // Step 39
            tree.Erase(44.000000000000000);
            tree.Erase(8.000000000000000);
            Assert.False(tree.Find(19.844248640023409, 19.976035906106262, out id));
            // Step 40
            tree.Erase(15.000000000000000);
            tree.Erase(25.000000000000000);
            Assert.True(tree.Find(11.013389410299673, 49.642573280157848, out id));
            Assert.True((new List<ulong> { 14, 15, 16, 22, 24 }).Contains(id));
            // Step 41
            tree.Erase(47.000000000000000);
            tree.Erase(28.000000000000000);
            Assert.True(tree.Find(26.222015377675774, 42.849230673899960, out id));
            Assert.True((new List<ulong> { 22 }).Contains(id));
            // Step 42
            tree.Insert(18.000000000000000, 25);
            tree.Erase(42.000000000000000);
            Assert.True(tree.Find(0.029192920071702, 27.357583362441947, out id));
            Assert.True((new List<ulong> { 14, 16, 17, 20, 24, 25 }).Contains(id));
            // Step 43
            tree.Erase(50.000000000000000);
            tree.Erase(13.000000000000000);
            Assert.True(tree.Find(10.889848219193293, 11.913139884108121, out id));
            Assert.True((new List<ulong> { 20 }).Contains(id));
            // Step 44
            tree.Erase(35.000000000000000);
            tree.Erase(4.000000000000000);
            Assert.True(tree.Find(15.869157272762157, 35.982552024033780, out id));
            Assert.True((new List<ulong> { 16, 24, 25 }).Contains(id));
            // Step 45
            tree.Insert(36.000000000000000, 26);
            tree.Erase(30.000000000000000);
            Assert.False(tree.Find(29.367582896535794, 30.095567408988984, out id));
            // Step 46
            tree.Insert(29.000000000000000, 27);
            tree.Erase(30.000000000000000);
            Assert.True(tree.Find(28.652061514637040, 48.774495142586986, out id));
            Assert.True((new List<ulong> { 26, 27 }).Contains(id));
            // Step 47
            tree.Insert(21.000000000000000, 28);
            tree.Erase(48.000000000000000);
            Assert.True(tree.Find(21.703508878133960, 27.666149058921370, out id));
            Assert.True((new List<ulong> { 16, 24 }).Contains(id));
            // Step 48
            tree.Erase(18.000000000000000);
            tree.Erase(27.000000000000000);
            Assert.False(tree.Find(2.377005781494762, 8.522266583280075, out id));
            // Step 49
            tree.Insert(16.000000000000000, 29);
            tree.Erase(20.000000000000000);
            Assert.True(tree.Find(26.238801353888590, 45.489897864202931, out id));
            Assert.True((new List<ulong> { 26, 27 }).Contains(id));
            // Step 50
            tree.Insert(37.000000000000000, 30);
            tree.Erase(38.000000000000000);
            Assert.True(tree.Find(20.701548683499450, 47.267406255163650, out id));
            Assert.True((new List<ulong> { 16, 24, 26, 27, 28, 30 }).Contains(id));
            // Step 51
            tree.Insert(23.000000000000000, 31);
            tree.Erase(4.000000000000000);
            Assert.True(tree.Find(11.303703767568734, 39.497812446370340, out id));
            Assert.True((new List<ulong> { 14, 16, 24, 26, 27, 28, 29, 30, 31 }).Contains(id));
            // Step 52
            tree.Erase(29.000000000000000);
            tree.Erase(14.000000000000000);
            Assert.True(tree.Find(21.688579866128293, 48.793562264120979, out id));
            Assert.True((new List<ulong> { 16, 24, 26, 30, 31 }).Contains(id));
            // Step 53
            tree.Insert(8.000000000000000, 32);
            tree.Erase(2.000000000000000);
            Assert.True(tree.Find(15.006000623095117, 40.373129913741899, out id));
            Assert.True((new List<ulong> { 16, 24, 26, 28, 29, 30, 31 }).Contains(id));
            // Step 54
            tree.Erase(11.000000000000000);
            tree.Erase(15.000000000000000);
            Assert.True(tree.Find(23.691670247014578, 38.325230233124799, out id));
            Assert.True((new List<ulong> { 16, 26, 30 }).Contains(id));
            // Step 55
            tree.Insert(10.000000000000000, 33);
            tree.Erase(20.000000000000000);
            Assert.True(tree.Find(14.116134833597371, 34.416547033127436, out id));
            Assert.True((new List<ulong> { 16, 24, 28, 29, 31 }).Contains(id));
            // Step 56
            tree.Erase(37.000000000000000);
            tree.Erase(31.000000000000000);
            Assert.True(tree.Find(6.516438039211741, 13.854002777387986, out id));
            Assert.True((new List<ulong> { 14, 17, 32, 33 }).Contains(id));
            // Step 57
            tree.Insert(26.000000000000000, 34);
            tree.Erase(37.000000000000000);
            Assert.True(tree.Find(25.020292551347406, 44.681438100161380, out id));
            Assert.True((new List<ulong> { 26, 34 }).Contains(id));
            // Step 58
            tree.Insert(29.000000000000000, 35);
            tree.Erase(17.000000000000000);
            Assert.True(tree.Find(23.799140912205313, 49.736054360629403, out id));
            Assert.True((new List<ulong> { 16, 26, 34, 35 }).Contains(id));
            // Step 59
            tree.Insert(38.000000000000000, 36);
            tree.Erase(20.000000000000000);
            Assert.True(tree.Find(10.839401304993185, 49.640144832313631, out id));
            Assert.True((new List<ulong> { 14, 16, 24, 26, 28, 29, 31, 34, 35, 36 }).Contains(id));
            // Step 60
            tree.Erase(24.000000000000000);
            tree.Erase(45.000000000000000);
            Assert.True(tree.Find(24.190401839371066, 34.714872571432920, out id));
            Assert.True((new List<ulong> { 34, 35 }).Contains(id));
            // Step 61
            tree.Insert(48.000000000000000, 37);
            tree.Erase(27.000000000000000);
            Assert.True(tree.Find(6.133826393883140, 47.746106842391093, out id));
            Assert.True((new List<ulong> { 14, 17, 24, 26, 28, 29, 31, 32, 33, 34, 35, 36 }).Contains(id));
            // Step 62
            tree.Insert(30.000000000000000, 38);
            tree.Erase(35.000000000000000);
            Assert.True(tree.Find(8.902975463875705, 24.974375328577310, out id));
            Assert.True((new List<ulong> { 14, 17, 24, 28, 29, 31, 33 }).Contains(id));
            // Step 63
            tree.Erase(48.000000000000000);
            tree.Erase(44.000000000000000);
            Assert.True(tree.Find(16.244174568172891, 49.985518212428467, out id));
            Assert.True((new List<ulong> { 24, 26, 28, 31, 34, 35, 36, 38 }).Contains(id));
            // Step 64
            tree.Insert(39.000000000000000, 39);
            tree.Erase(7.000000000000000);
            Assert.True(tree.Find(16.920912017502985, 24.161412560784228, out id));
            Assert.True((new List<ulong> { 24, 28, 31 }).Contains(id));
            // Step 65
            tree.Insert(1.000000000000000, 40);
            tree.Erase(13.000000000000000);
            Assert.True(tree.Find(7.603169758110146, 27.174711489304819, out id));
            Assert.True((new List<ulong> { 14, 17, 24, 28, 29, 31, 32, 33, 34 }).Contains(id));
            // Step 66
            tree.Erase(12.000000000000000);
            tree.Erase(44.000000000000000);
            Assert.False(tree.Find(16.878969186196780, 19.694570957312319, out id));
            // Step 67
            tree.Erase(21.000000000000000);
            tree.Erase(27.000000000000000);
            Assert.False(tree.Find(41.567281702667515, 43.844408267081491, out id));
            // Step 68
            tree.Insert(15.000000000000000, 41);
            tree.Erase(11.000000000000000);
            Assert.False(tree.Find(43.090615742437357, 45.051246160185102, out id));
            // Step 69
            tree.Erase(1.000000000000000);
            tree.Erase(6.000000000000000);
            Assert.True(tree.Find(35.621257074912997, 47.796850892751849, out id));
            Assert.True((new List<ulong> { 26, 36, 39 }).Contains(id));
            // Step 70
            tree.Erase(26.000000000000000);
            tree.Erase(26.000000000000000);
            Assert.True(tree.Find(12.781539786148095, 48.195318340004036, out id));
            Assert.True((new List<ulong> { 24, 26, 29, 31, 35, 36, 38, 39, 41 }).Contains(id));
            // Step 71
            tree.Erase(23.000000000000000);
            tree.Erase(18.000000000000000);
            Assert.True(tree.Find(35.169300074837949, 40.930487471002237, out id));
            Assert.True((new List<ulong> { 26, 36, 39 }).Contains(id));
            // Step 72
            tree.Insert(17.000000000000000, 42);
            tree.Erase(25.000000000000000);
            Assert.True(tree.Find(21.358595692706032, 34.513954241811795, out id));
            Assert.True((new List<ulong> { 24, 35, 38 }).Contains(id));
            // Step 73
            tree.Insert(42.000000000000000, 43);
            tree.Erase(21.000000000000000);
            Assert.False(tree.Find(44.344419304901038, 45.102416339283451, out id));
            // Step 74
            tree.Erase(9.000000000000000);
            tree.Erase(37.000000000000000);
            Assert.True(tree.Find(18.692335549743422, 22.486760709060849, out id));
            Assert.True((new List<ulong> { 24 }).Contains(id));
            // Step 75
            tree.Erase(22.000000000000000);
            tree.Erase(20.000000000000000);
            Assert.True(tree.Find(12.347347737279124, 40.659944585102380, out id));
            Assert.True((new List<ulong> { 26, 29, 35, 36, 38, 39, 41, 42 }).Contains(id));
            // Step 76
            tree.Erase(39.000000000000000);
            tree.Erase(27.000000000000000);
            Assert.True(tree.Find(36.782753885688777, 47.313374532369281, out id));
            Assert.True((new List<ulong> { 36, 43 }).Contains(id));
            // Step 77
            tree.Insert(50.000000000000000, 44);
            tree.Erase(23.000000000000000);
            Assert.True(tree.Find(24.862727570138798, 45.081742224566582, out id));
            Assert.True((new List<ulong> { 26, 35, 36, 38, 43 }).Contains(id));
            // Step 78
            tree.Insert(18.000000000000000, 45);
            tree.Erase(9.000000000000000);
            Assert.True(tree.Find(11.800481504036675, 44.310122865099174, out id));
            Assert.True((new List<ulong> { 26, 29, 35, 36, 38, 41, 42, 43, 45 }).Contains(id));
            // Step79
            tree.Erase(38.000000000000000);
            tree.Erase(14.000000000000000);
            Assert.True(tree.Find(1.303892416519836, 15.889853999867615, out id));
            Assert.True((new List<ulong> { 32, 33, 41 }).Contains(id));
            // Step 80
            tree.Erase(17.000000000000000);
            tree.Erase(6.000000000000000);
            Assert.True(tree.Find(10.471344400700467, 24.761625817389987, out id));
            Assert.True((new List<ulong> { 29, 41, 45 }).Contains(id));
            // Step 81
            tree.Insert(17.000000000000000, 46);
            tree.Erase(28.000000000000000);
            Assert.False(tree.Find(21.155287762408747, 21.393232440794009, out id));
            // Step 82
            tree.Insert(9.000000000000000, 47);
            tree.Erase(43.000000000000000);
            Assert.True(tree.Find(16.746992044491289, 33.745780854173930, out id));
            Assert.True((new List<ulong> { 35, 38, 45, 46 }).Contains(id));
            // Step 83
            tree.Insert(44.000000000000000, 48);
            tree.Erase(38.000000000000000);
            Assert.False(tree.Find(40.332681754353025, 41.120621812917165, out id));
            // Step 84
            tree.Erase(30.000000000000000);
            tree.Erase(19.000000000000000);
            Assert.True(tree.Find(8.469050271369472, 27.577306810994784, out id));
            Assert.True((new List<ulong> { 29, 33, 41, 45, 46, 47 }).Contains(id));
            // Step 85
            tree.Insert(45.000000000000000, 49);
            tree.Erase(30.000000000000000);
            Assert.True(tree.Find(22.056450651794879, 46.745315465836427, out id));
            Assert.True((new List<ulong> { 26, 35, 43, 48, 49 }).Contains(id));
            // Step 86
            tree.Insert(31.000000000000000, 50);
            tree.Erase(41.000000000000000);
            Assert.True(tree.Find(5.336954121209442, 48.913766990604579, out id));
            Assert.True((new List<ulong> { 26, 29, 32, 33, 35, 41, 43, 45, 46, 47, 48, 49, 50 }).Contains(id));
            // Step 87
            tree.Erase(17.000000000000000);
            tree.Erase(17.000000000000000);
            Assert.True(tree.Find(16.207975820672843, 41.104553223901902, out id));
            Assert.True((new List<ulong> { 26, 35, 45, 50 }).Contains(id));
            // Step 88
            tree.Erase(36.000000000000000);
            tree.Erase(26.000000000000000);
            Assert.True(tree.Find(5.597777415882643, 30.818637237165408, out id));
            Assert.True((new List<ulong> { 29, 32, 33, 35, 41, 45, 47 }).Contains(id));
            // Step 89
            tree.Erase(45.000000000000000);
            tree.Erase(38.000000000000000);
            Assert.True(tree.Find(9.421272862234826, 23.704702966613549, out id));
            Assert.True((new List<ulong> { 29, 33, 41, 45 }).Contains(id));
            // Step 90
            tree.Erase(31.000000000000000);
            tree.Erase(36.000000000000000);
            Assert.True(tree.Find(16.119553812569709, 37.699912543666962, out id));
            Assert.True((new List<ulong> { 35, 45 }).Contains(id));
            // Step 91
            tree.Erase(42.000000000000000);
            tree.Erase(14.000000000000000);
            Assert.True(tree.Find(18.845670830411475, 44.054476672956774, out id));
            Assert.True((new List<ulong> { 35, 48 }).Contains(id));
            // Step 92
            tree.Erase(18.000000000000000);
            tree.Erase(4.000000000000000);
            Assert.True(tree.Find(27.947111389741146, 39.743879467990716, out id));
            Assert.True((new List<ulong> { 35 }).Contains(id));
            // Step 93
            tree.Erase(15.000000000000000);
            tree.Erase(22.000000000000000);
            Assert.False(tree.Find(29.085199319325898, 42.911191696349768, out id));
            // Step 94
            tree.Insert(3.000000000000000, 51);
            tree.Erase(46.000000000000000);
            Assert.True(tree.Find(13.818727140766063, 46.653004432428766, out id));
            Assert.True((new List<ulong> { 29, 35, 48 }).Contains(id));
            // Step 95
            tree.Erase(44.000000000000000);
            tree.Erase(4.000000000000000);
            Assert.False(tree.Find(17.251564280162807, 18.325669903260515, out id));
            // Step 96
            tree.Insert(44.000000000000000, 52);
            tree.Erase(46.000000000000000);
            Assert.True(tree.Find(6.895200826798131, 45.449147125012352, out id));
            Assert.True((new List<ulong> { 29, 32, 33, 35, 47, 52 }).Contains(id));
            // Step 97
            tree.Erase(44.000000000000000);
            tree.Erase(6.000000000000000);
            Assert.True(tree.Find(7.584456519513660, 19.462465682779513, out id));
            Assert.True((new List<ulong> { 29, 32, 33, 47 }).Contains(id));
            // Step 98
            tree.Insert(17.000000000000000, 53);
            tree.Erase(31.000000000000000);
            Assert.True(tree.Find(6.021708343571869, 45.980190857829342, out id));
            Assert.True((new List<ulong> { 29, 32, 33, 35, 47, 53 }).Contains(id));
            // Step 99
            tree.Erase(29.000000000000000);
            tree.Erase(49.000000000000000);
            Assert.False(tree.Find(27.678913519597899, 41.129001704116270, out id));
            // Step 100
            tree.Erase(8.000000000000000);
            tree.Erase(27.000000000000000);
            Assert.True(tree.Find(7.120735359705193, 36.195996408938541, out id));
            Assert.True((new List<ulong> { 29, 33, 47, 53 }).Contains(id));
            // Step 101
            tree.Erase(16.000000000000000);
            tree.Erase(36.000000000000000);
            Assert.True(tree.Find(8.087883044809645, 46.562503212204653, out id));
            Assert.True((new List<ulong> { 33, 47, 53 }).Contains(id));
            // Step 102
            tree.Erase(9.000000000000000);
            tree.Erase(9.000000000000000);
            Assert.True(tree.Find(6.192812677795101, 14.738220324071245, out id));
            Assert.True((new List<ulong> { 33 }).Contains(id));
            // Step 103
            tree.Insert(22.000000000000000, 54);
            tree.Erase(23.000000000000000);
            Assert.True(tree.Find(9.763765355878839, 31.609044525716200, out id));
            Assert.True((new List<ulong> { 33, 53, 54 }).Contains(id));
            // Step 104
            tree.Erase(50.000000000000000);
            tree.Erase(14.000000000000000);
            Assert.True(tree.Find(0.930847426511772, 21.747626026548527, out id));
            Assert.True((new List<ulong> { 33, 51, 53 }).Contains(id));
            // Step 105
            tree.Insert(5.000000000000000, 55);
            tree.Erase(18.000000000000000);
            Assert.False(tree.Find(30.220071144957977, 46.074851211239967, out id));
            // Step 106
            tree.Insert(23.000000000000000, 56);
            tree.Erase(39.000000000000000);
            Assert.True(tree.Find(16.821710545481167, 20.676239753961845, out id));
            Assert.True((new List<ulong> { 53 }).Contains(id));
            // Step 107
            tree.Erase(23.000000000000000);
            tree.Erase(33.000000000000000);
            Assert.True(tree.Find(18.285837381479187, 32.217556861516719, out id));
            Assert.True((new List<ulong> { 54 }).Contains(id));
            // Step 108
            tree.Insert(13.000000000000000, 57);
            tree.Erase(31.000000000000000);
            Assert.True(tree.Find(21.762664331312603, 26.837745060677559, out id));
            Assert.True((new List<ulong> { 54 }).Contains(id));
            // Step 109
            tree.Insert(9.000000000000000, 58);
            tree.Erase(41.000000000000000);
            Assert.True(tree.Find(13.771472249799000, 18.204928854705614, out id));
            Assert.True((new List<ulong> { 53 }).Contains(id));
            // Step 110
            tree.Insert(11.000000000000000, 59);
            tree.Erase(19.000000000000000);
            Assert.True(tree.Find(6.997623238434791, 38.867714793821165, out id));
            Assert.True((new List<ulong> { 33, 53, 54, 57, 58, 59 }).Contains(id));
            // Step 111
            tree.Insert(38.000000000000000, 60);
            tree.Erase(32.000000000000000);
            Assert.True(tree.Find(1.995342936339234, 33.575946575805013, out id));
            Assert.True((new List<ulong> { 33, 51, 53, 54, 55, 57, 58, 59 }).Contains(id));
            // Step 112
            tree.Insert(14.000000000000000, 61);
            tree.Erase(24.000000000000000);
            Assert.False(tree.Find(41.884030540165327, 43.201026324551641, out id));
            // Step 113
            tree.Insert(0.000000000000000, 62);
            tree.Erase(7.000000000000000);
            Assert.True(tree.Find(5.785040014831388, 35.853562521416571, out id));
            Assert.True((new List<ulong> { 33, 53, 54, 57, 58, 59, 61 }).Contains(id));
            // Step 114
            tree.Erase(5.000000000000000);
            tree.Erase(2.000000000000000);
            Assert.False(tree.Find(25.870525608967583, 33.523866506113329, out id));
            // Step 115
            tree.Erase(38.000000000000000);
            tree.Erase(1.000000000000000);
            Assert.True(tree.Find(1.938719922022797, 17.006670769504133, out id));
            Assert.True((new List<ulong> { 33, 51, 53, 57, 58, 59, 61 }).Contains(id));
            // Step 116
            tree.Insert(40.000000000000000, 63);
            tree.Erase(24.000000000000000);
            Assert.True(tree.Find(1.115458763255334, 33.068933142525239, out id));
            Assert.True((new List<ulong> { 33, 51, 53, 54, 57, 58, 59, 61 }).Contains(id));
            // Step 117
            tree.Erase(9.000000000000000);
            tree.Erase(19.000000000000000);
            Assert.False(tree.Find(17.016881773491477, 18.086352278945700, out id));
            // Step 118
            tree.Erase(3.000000000000000);
            tree.Erase(15.000000000000000);
            Assert.True(tree.Find(26.353378013989616, 41.688699492572162, out id));
            Assert.True((new List<ulong> { 63 }).Contains(id));
            // Step 119
            tree.Insert(2.000000000000000, 64);
            tree.Erase(38.000000000000000);
            Assert.True(tree.Find(15.374413550548560, 48.234227282056416, out id));
            Assert.True((new List<ulong> { 53, 54, 63 }).Contains(id));
            // Step 120
            tree.Insert(3.000000000000000, 65);
            tree.Erase(16.000000000000000);
            Assert.True(tree.Find(18.967724259836533, 43.487674474396101, out id));
            Assert.True((new List<ulong> { 54, 63 }).Contains(id));
            // Step 121
            tree.Erase(14.000000000000000);
            tree.Erase(20.000000000000000);
            Assert.True(tree.Find(19.352352072651470, 47.422578988389219, out id));
            Assert.True((new List<ulong> { 54, 63 }).Contains(id));
            // Step 122
            tree.Insert(14.000000000000000, 66);
            tree.Erase(9.000000000000000);
            Assert.False(tree.Find(20.927348375683742, 21.666416506670632, out id));
            // Step 123
            tree.Insert(9.000000000000000, 67);
            tree.Erase(42.000000000000000);
            Assert.True(tree.Find(6.994715225246095, 11.941316087006520, out id));
            Assert.True((new List<ulong> { 33, 59, 67 }).Contains(id));
            // Step 124
            tree.Erase(40.000000000000000);
            tree.Erase(23.000000000000000);
            Assert.True(tree.Find(3.724384790223340, 20.694262038225240, out id));
            Assert.True((new List<ulong> { 33, 53, 57, 59, 66, 67 }).Contains(id));
            // Step 125
            tree.Insert(1.000000000000000, 68);
            tree.Erase(41.000000000000000);
            Assert.True(tree.Find(16.094703456398250, 28.925695635211124, out id));
            Assert.True((new List<ulong> { 53, 54 }).Contains(id));
            // Step 126
            tree.Insert(5.000000000000000, 69);
            tree.Erase(45.000000000000000);
            Assert.True(tree.Find(10.245835465625735, 26.267743312452790, out id));
            Assert.True((new List<ulong> { 53, 54, 57, 59, 66 }).Contains(id));
            // Step 127
            tree.Erase(22.000000000000000);
            tree.Erase(38.000000000000000);
            Assert.True(tree.Find(8.240947285396983, 10.897741105158559, out id));
            Assert.True((new List<ulong> { 33, 67 }).Contains(id));
            // Step 128
            tree.Insert(47.000000000000000, 70);
            tree.Erase(28.000000000000000);
            Assert.True(tree.Find(15.193063554840730, 46.243152626671225, out id));
            Assert.True((new List<ulong> { 53 }).Contains(id));
            // Step 129
            tree.Erase(14.000000000000000);
            tree.Erase(27.000000000000000);
            Assert.True(tree.Find(12.842412809797359, 24.149337949608640, out id));
            Assert.True((new List<ulong> { 53, 57 }).Contains(id));
            // Step 130
            tree.Erase(9.000000000000000);
            tree.Erase(19.000000000000000);
            Assert.True(tree.Find(7.895465234570487, 26.170865886164218, out id));
            Assert.True((new List<ulong> { 33, 53, 57, 59 }).Contains(id));
            // Step 131
            tree.Erase(0.000000000000000);
            tree.Erase(35.000000000000000);
            Assert.True(tree.Find(2.455652154817711, 15.230421436744844, out id));
            Assert.True((new List<ulong> { 33, 57, 59, 65, 69 }).Contains(id));
            // Step 132
            tree.Erase(1.000000000000000);
            tree.Erase(22.000000000000000);
            Assert.False(tree.Find(28.040450738581974, 33.997710078400928, out id));
            // Step 133
            tree.Erase(5.000000000000000);
            tree.Erase(31.000000000000000);
            Assert.True(tree.Find(0.182536904919750, 43.265261454131874, out id));
            Assert.True((new List<ulong> { 33, 53, 57, 59, 64, 65 }).Contains(id));
            // Step 134
            tree.Insert(21.000000000000000, 71);
            tree.Erase(40.000000000000000);
            Assert.True(tree.Find(45.958491978734408, 47.358280673189249, out id));
            Assert.True((new List<ulong> { 70 }).Contains(id));
            // Step 135
            tree.Insert(29.000000000000000, 72);
            tree.Erase(37.000000000000000);
            Assert.True(tree.Find(3.340190360316292, 16.844718175431328, out id));
            Assert.True((new List<ulong> { 33, 57, 59 }).Contains(id));
            // Step 136
            tree.Erase(3.000000000000000);
            tree.Erase(22.000000000000000);
            Assert.True(tree.Find(0.925829506292702, 11.532959672730286, out id));
            Assert.True((new List<ulong> { 33, 59, 64 }).Contains(id));
            // Step 137
            tree.Insert(30.000000000000000, 73);
            tree.Erase(48.000000000000000);
            Assert.True(tree.Find(14.357718733577229, 26.639914937446679, out id));
            Assert.True((new List<ulong> { 53, 71 }).Contains(id));
            // Step 138
            tree.Insert(25.000000000000000, 74);
            tree.Erase(49.000000000000000);
            Assert.True(tree.Find(5.969905493290173, 12.241882505455354, out id));
            Assert.True((new List<ulong> { 33, 59 }).Contains(id));
            // Step 139
            tree.Erase(13.000000000000000);
            tree.Erase(50.000000000000000);
            Assert.True(tree.Find(4.211566245732856, 46.486055563766307, out id));
            Assert.True((new List<ulong> { 33, 53, 59, 71, 72, 73, 74 }).Contains(id));
            // Step 140
            tree.Erase(17.000000000000000);
            tree.Erase(7.000000000000000);
            Assert.True(tree.Find(30.882008820536548, 49.871096535696786, out id));
            Assert.True((new List<ulong> { 70 }).Contains(id));
            // Step 141
            tree.Erase(25.000000000000000);
            tree.Erase(5.000000000000000);
            Assert.True(tree.Find(19.463945684627632, 38.012012169283409, out id));
            Assert.True((new List<ulong> { 71, 72, 73 }).Contains(id));
            // Step 142
            tree.Erase(21.000000000000000);
            tree.Erase(12.000000000000000);
            Assert.True(tree.Find(18.093691309999599, 44.527042607464942, out id));
            Assert.True((new List<ulong> { 72, 73 }).Contains(id));
            // Step 143
            tree.Erase(2.000000000000000);
            tree.Erase(13.000000000000000);
            Assert.False(tree.Find(21.232352907910951, 28.804017983322154, out id));
            // Step 144
            tree.Insert(16.000000000000000, 75);
            tree.Erase(31.000000000000000);
            Assert.False(tree.Find(22.881190159630123, 28.643924628332464, out id));
            // Step 145
            tree.Insert(5.000000000000000, 76);
            tree.Erase(1.000000000000000);
            Assert.True(tree.Find(13.703214187471740, 22.463786138500293, out id));
            Assert.True((new List<ulong> { 75 }).Contains(id));
            // Step 146
            tree.Insert(4.000000000000000, 77);
            tree.Erase(39.000000000000000);
            Assert.False(tree.Find(21.441760655657649, 27.147306001104894, out id));
            // Step 147
            tree.Insert(18.000000000000000, 78);
            tree.Erase(50.000000000000000);
            Assert.True(tree.Find(3.199112589809245, 39.002331211926673, out id));
            Assert.True((new List<ulong> { 33, 59, 72, 73, 75, 76, 77, 78 }).Contains(id));
            // Step 148
            tree.Erase(4.000000000000000);
            tree.Erase(22.000000000000000);
            Assert.True(tree.Find(23.168649739660797, 40.803755754119344, out id));
            Assert.True((new List<ulong> { 72, 73 }).Contains(id));
            // Step 149
            tree.Erase(18.000000000000000);
            tree.Erase(32.000000000000000);
            Assert.True(tree.Find(11.030941955031343, 32.477580221209799, out id));
            Assert.True((new List<ulong> { 72, 73, 75 }).Contains(id));
            // Step 150
            tree.Insert(46.000000000000000, 79);
            tree.Erase(36.000000000000000);
            Assert.True(tree.Find(4.570873733808628, 9.705940385727329, out id));
            Assert.True((new List<ulong> { 76 }).Contains(id));
            // Step 151
            tree.Insert(27.000000000000000, 80);
            tree.Erase(23.000000000000000);
            Assert.True(tree.Find(14.096517280730525, 17.916010101301833, out id));
            Assert.True((new List<ulong> { 75 }).Contains(id));
            // Step 152
            tree.Erase(10.000000000000000);
            tree.Erase(45.000000000000000);
            Assert.True(tree.Find(25.907124416523498, 27.816583069744343, out id));
            Assert.True((new List<ulong> { 80 }).Contains(id));
            // Step 153
            tree.Erase(16.000000000000000);
            tree.Erase(48.000000000000000);
            Assert.True(tree.Find(24.366641824921086, 31.447394890192271, out id));
            Assert.True((new List<ulong> { 72, 73, 80 }).Contains(id));
            // Step 154
            tree.Insert(31.000000000000000, 81);
            tree.Erase(2.000000000000000);
            Assert.True(tree.Find(27.472721274926510, 48.292202246075369, out id));
            Assert.True((new List<ulong> { 70, 72, 73, 79, 81 }).Contains(id));
            // Step 155
            tree.Insert(24.000000000000000, 82);
            tree.Erase(32.000000000000000);
            Assert.True(tree.Find(21.611341347474688, 37.919910893700788, out id));
            Assert.True((new List<ulong> { 72, 73, 80, 81, 82 }).Contains(id));
            // Step 156
            tree.Erase(47.000000000000000);
            tree.Erase(39.000000000000000);
            Assert.True(tree.Find(23.856955751367920, 38.202980087889642, out id));
            Assert.True((new List<ulong> { 72, 73, 80, 81, 82 }).Contains(id));
            // Step 157
            tree.Insert(33.000000000000000, 83);
            tree.Erase(17.000000000000000);
            Assert.True(tree.Find(14.099416076540816, 41.531303038939200, out id));
            Assert.True((new List<ulong> { 72, 73, 80, 81, 82, 83 }).Contains(id));
            // Step 158
            tree.Insert(7.000000000000000, 84);
            tree.Erase(41.000000000000000);
            Assert.False(tree.Find(46.698941998579215, 47.175821393651283, out id));
            // Step 159
            tree.Erase(31.000000000000000);
            tree.Erase(25.000000000000000);
            Assert.True(tree.Find(9.527952107538956, 47.671114004020886, out id));
            Assert.True((new List<ulong> { 59, 72, 73, 79, 80, 82, 83 }).Contains(id));
            // Step 160
            tree.Erase(24.000000000000000);
            tree.Erase(39.000000000000000);
            Assert.True(tree.Find(27.959260444530688, 38.398853259277580, out id));
            Assert.True((new List<ulong> { 72, 73, 83 }).Contains(id));
            // Step 161
            tree.Erase(29.000000000000000);
            tree.Erase(47.000000000000000);
            Assert.True(tree.Find(32.686529365199839, 39.544362939710211, out id));
            Assert.True((new List<ulong> { 83 }).Contains(id));
            // Step 162
            tree.Erase(11.000000000000000);
            tree.Erase(45.000000000000000);
            Assert.False(tree.Find(11.124287732918148, 21.901134572622666, out id));
            // Step 163
            tree.Insert(24.000000000000000, 85);
            tree.Erase(19.000000000000000);
            Assert.True(tree.Find(2.947821686888397, 10.891563676693783, out id));
            Assert.True((new List<ulong> { 76, 84 }).Contains(id));
            // Step 164
            tree.Insert(2.000000000000000, 86);
            tree.Erase(13.000000000000000);
            Assert.True(tree.Find(28.695009725319853, 42.695709466992234, out id));
            Assert.True((new List<ulong> { 73, 83 }).Contains(id));
            // Step 165
            tree.Insert(47.000000000000000, 87);
            tree.Erase(50.000000000000000);
            Assert.True(tree.Find(5.378811233473874, 8.744112076505672, out id));
            Assert.True((new List<ulong> { 84 }).Contains(id));
            // Step 166
            tree.Insert(38.000000000000000, 88);
            tree.Erase(11.000000000000000);
            Assert.True(tree.Find(12.856043539972045, 35.669110891518265, out id));
            Assert.True((new List<ulong> { 73, 80, 83, 85 }).Contains(id));
            // Step 167
            tree.Erase(7.000000000000000);
            tree.Erase(22.000000000000000);
            Assert.True(tree.Find(28.314704983442201, 30.769647156012514, out id));
            Assert.True((new List<ulong> { 73 }).Contains(id));
            // Step 168
            tree.Erase(5.000000000000000);
            tree.Erase(29.000000000000000);
            Assert.True(tree.Find(18.047090902479162, 44.763604521093754, out id));
            Assert.True((new List<ulong> { 73, 80, 83, 85, 88 }).Contains(id));
            // Step 169
            tree.Insert(14.000000000000000, 89);
            tree.Erase(4.000000000000000);
            Assert.False(tree.Find(32.164786799949297, 32.753011036622446, out id));
            // Step 170
            tree.Insert(4.000000000000000, 90);
            tree.Erase(48.000000000000000);
            Assert.True(tree.Find(23.042468621659477, 48.838455814450199, out id));
            Assert.True((new List<ulong> { 73, 79, 80, 83, 85, 87, 88 }).Contains(id));
            // Step 171
            tree.Insert(44.000000000000000, 91);
            tree.Erase(31.000000000000000);
            Assert.False(tree.Find(16.176297673401219, 21.445578848499018, out id));
            // Step 172
            tree.Insert(40.000000000000000, 92);
            tree.Erase(11.000000000000000);
            Assert.True(tree.Find(21.124942744936444, 45.417103842305679, out id));
            Assert.True((new List<ulong> { 73, 80, 83, 85, 88, 91, 92 }).Contains(id));
            // Step 173
            tree.Insert(19.000000000000000, 93);
            tree.Erase(36.000000000000000);
            Assert.True(tree.Find(8.398572397001896, 26.784563695475466, out id));
            Assert.True((new List<ulong> { 85, 89, 93 }).Contains(id));
            // Step 174
            tree.Erase(4.000000000000000);
            tree.Erase(49.000000000000000);
            Assert.True(tree.Find(31.212795204261106, 35.251784801900051, out id));
            Assert.True((new List<ulong> { 83 }).Contains(id));
            // Step 175
            tree.Insert(29.000000000000000, 94);
            tree.Erase(32.000000000000000);
            Assert.True(tree.Find(12.139212452331588, 24.662732471617289, out id));
            Assert.True((new List<ulong> { 85, 89, 93 }).Contains(id));
            // Step 176
            tree.Erase(38.000000000000000);
            tree.Erase(5.000000000000000);
            Assert.True(tree.Find(6.098441150924533, 15.970171536414062, out id));
            Assert.True((new List<ulong> { 89 }).Contains(id));
            // Step 177
            tree.Insert(34.000000000000000, 95);
            tree.Erase(41.000000000000000);
            Assert.True(tree.Find(14.682302655780244, 49.858915244696732, out id));
            Assert.True((new List<ulong> { 73, 79, 80, 83, 85, 87, 91, 92, 93, 94, 95 }).Contains(id));
            // Step 178
            tree.Insert(17.000000000000000, 96);
            tree.Erase(13.000000000000000);
            Assert.True(tree.Find(10.238477940926677, 42.297843214856940, out id));
            Assert.True((new List<ulong> { 73, 80, 83, 85, 89, 92, 93, 94, 95, 96 }).Contains(id));
            // Step 179
            tree.Erase(2.000000000000000);
            tree.Erase(2.000000000000000);
            Assert.True(tree.Find(19.407836185614325, 38.952232315385451, out id));
            Assert.True((new List<ulong> { 73, 80, 83, 85, 94, 95 }).Contains(id));
            // Step 180
            tree.Insert(35.000000000000000, 97);
            tree.Erase(9.000000000000000);
            Assert.True(tree.Find(15.644579296828720, 30.380928452666705, out id));
            Assert.True((new List<ulong> { 73, 80, 85, 93, 94, 96 }).Contains(id));
            // Step 181
            tree.Insert(37.000000000000000, 98);
            tree.Erase(39.000000000000000);
            Assert.True(tree.Find(19.479679265011796, 49.582664918381795, out id));
            Assert.True((new List<ulong> { 73, 79, 80, 83, 85, 87, 91, 92, 94, 95, 97, 98 }).Contains(id));
            // Step 182
            tree.Insert(21.000000000000000, 99);
            tree.Erase(39.000000000000000);
            Assert.True(tree.Find(26.519850418225076, 38.904427134442294, out id));
            Assert.True((new List<ulong> { 73, 80, 83, 94, 95, 97, 98 }).Contains(id));
            // Step 183
            tree.Insert(25.000000000000000, 100);
            tree.Erase(1.000000000000000);
            Assert.False(tree.Find(5.023733153939541, 7.451947892883970, out id));
            // Step 184
            tree.Insert(13.000000000000000, 101);
            tree.Erase(7.000000000000000);
            Assert.True(tree.Find(1.054880583992063, 31.594818597731706, out id));
            Assert.True((new List<ulong> { 73, 80, 85, 89, 93, 94, 96, 99, 100, 101 }).Contains(id));
            // Step 185
            tree.Erase(29.000000000000000);
            tree.Erase(3.000000000000000);
            Assert.False(tree.Find(4.975576044816582, 7.294612752237361, out id));
            // Step 186
            tree.Insert(38.000000000000000, 102);
            tree.Erase(32.000000000000000);
            Assert.True(tree.Find(7.205611702857939, 26.182442050497013, out id));
            Assert.True((new List<ulong> { 85, 89, 93, 96, 99, 100, 101 }).Contains(id));
            // Step 187
            tree.Insert(3.000000000000000, 103);
            tree.Erase(29.000000000000000);
            Assert.True(tree.Find(45.433908823694225, 48.691884285148163, out id));
            Assert.True((new List<ulong> { 79, 87 }).Contains(id));
            // Step 188
            tree.Insert(1.000000000000000, 104);
            tree.Erase(7.000000000000000);
            Assert.True(tree.Find(5.283350843679796, 13.130672370898310, out id));
            Assert.True((new List<ulong> { 101 }).Contains(id));
            // Step 189
            tree.Insert(15.000000000000000, 105);
            tree.Erase(39.000000000000000);
            Assert.True(tree.Find(21.743356493489095, 40.655796465207168, out id));
            Assert.True((new List<ulong> { 73, 80, 83, 85, 92, 95, 97, 98, 100, 102 }).Contains(id));
            // Step 190
            tree.Insert(10.000000000000000, 106);
            tree.Erase(45.000000000000000);
            Assert.True(tree.Find(28.778596508570729, 38.176953339000981, out id));
            Assert.True((new List<ulong> { 73, 83, 95, 97, 98, 102 }).Contains(id));
            // Step 191
            tree.Insert(42.000000000000000, 107);
            tree.Erase(28.000000000000000);
            Assert.True(tree.Find(4.076443643777622, 17.888848641743095, out id));
            Assert.True((new List<ulong> { 89, 96, 101, 105, 106 }).Contains(id));
            // Step 192
            tree.Erase(34.000000000000000);
            tree.Erase(9.000000000000000);
            Assert.True(tree.Find(11.715232120023172, 41.142040270177198, out id));
            Assert.True((new List<ulong> { 73, 80, 83, 85, 89, 92, 93, 96, 97, 98, 99, 100, 101, 102, 105 }).Contains(id));
            // Step 193
            tree.Erase(10.000000000000000);
            tree.Erase(41.000000000000000);
            Assert.True(tree.Find(33.081151810164798, 39.024305247673482, out id));
            Assert.True((new List<ulong> { 97, 98, 102 }).Contains(id));
            // Step 194
            tree.Erase(44.000000000000000);
            tree.Erase(2.000000000000000);
            Assert.True(tree.Find(13.455054615423107, 36.876006527825567, out id));
            Assert.True((new List<ulong> { 73, 80, 83, 85, 89, 93, 96, 97, 99, 100, 105 }).Contains(id));
            // Step 195
            tree.Erase(35.000000000000000);
            tree.Erase(2.000000000000000);
            Assert.True(tree.Find(0.199299401071690, 39.959177214169870, out id));
            Assert.True((new List<ulong> { 73, 80, 83, 85, 89, 93, 96, 98, 99, 100, 101, 102, 103, 104, 105 }).Contains(id));
            // Step 196
            tree.Erase(40.000000000000000);
            tree.Erase(35.000000000000000);
            Assert.True(tree.Find(12.064292436062996, 33.777623342018707, out id));
            Assert.True((new List<ulong> { 73, 80, 83, 85, 89, 93, 96, 99, 100, 101, 105 }).Contains(id));
            // Step 197
            tree.Erase(27.000000000000000);
            tree.Erase(28.000000000000000);
            Assert.True(tree.Find(15.334104638148609, 41.475926649127523, out id));
            Assert.True((new List<ulong> { 73, 83, 85, 93, 96, 98, 99, 100, 102 }).Contains(id));
            // Step 198
            tree.Erase(42.000000000000000);
            tree.Erase(27.000000000000000);
            Assert.False(tree.Find(45.646546776903477, 45.811750637615724, out id));
            // Step 199
            tree.Erase(33.000000000000000);
            tree.Erase(8.000000000000000);
            Assert.True(tree.Find(6.256182184112808, 38.249524925036297, out id));
            Assert.True((new List<ulong> { 73, 85, 89, 93, 96, 98, 99, 100, 101, 102, 105 }).Contains(id));
            // Step 200
            tree.Erase(46.000000000000000);
            tree.Erase(45.000000000000000);
            Assert.True(tree.Find(5.671556122489307, 36.133052668216791, out id));
            Assert.True((new List<ulong> { 73, 85, 89, 93, 96, 99, 100, 101, 105 }).Contains(id));
        }

        [Fact, Trait("Category", "Examples")]
        public void AdaptiveGridPolygonKeyPointsExample()
        {
            // <example>

            var adaptiveGrid = new AdaptiveGrid();
            var points = new List<Vector3>()
            {
                new Vector3(-6, -4),
                new Vector3(-2, -4),
                new Vector3(3, -4),
                new Vector3(1, 4.5),
                new Vector3(6, 3),
            };
            adaptiveGrid.AddFromPolygon(Polygon.Rectangle(15, 10).TransformedPolygon(
                new Transform(new Vector3(), new Vector3(10, 0, 10))), points);

            // </example>

            WriteToModelWithRandomMaterials(adaptiveGrid, "Elements_Spatial_AdaptiveGrid_AdaptiveGrid");
        }

        [Fact]
        public void AdaptiveGridBboxKeyPointsExample()
        {
            // <example2>

            var adaptiveGrid = new AdaptiveGrid();
            var points = new List<Vector3>()
            {
                new Vector3(-6, -4),
                new Vector3(-2, -4),
                new Vector3(3, -4),
                new Vector3(1, 4.5, 3),
                new Vector3(6, 3, -2),
            };
            adaptiveGrid.AddFromBbox(new BBox3(new Vector3(-7.5, -5, -3), new Vector3(10, 10, 3)), points);

            points = new List<Vector3>()
            {
                new Vector3(-6, -4, 3),
                new Vector3(-2, 0, 3),
                new Vector3(0, 4, 3),
                new Vector3(2, 6, 3)
            };
            var rectangle = Polygon.Rectangle(new Vector3(-10, -5), new Vector3(15, 10));
            adaptiveGrid.AddFromPolygon(rectangle.TransformedPolygon(new Transform(new Vector3(0, 0, 3))), points);
            points = new List<Vector3>()
            {
                new Vector3(-6, -4, 2),
                new Vector3(-2, 0, 2),
                new Vector3(0, 4, 2),
                new Vector3(2, 6, 2)
            };
            adaptiveGrid.AddFromPolygon(rectangle.TransformedPolygon(new Transform(new Vector3(0, 0, 2))), points);

            // </example2>

            WriteToModelWithRandomMaterials(adaptiveGrid, "Elements_Spatial_AdaptiveGrid_AdaptiveGridBboxKeyPoints");
        }

        [Fact]
        public void AdaptiveGridAddVertex()
        {
            var adaptiveGrid = new AdaptiveGrid();
            var points = new List<Vector3>()
            {
                new Vector3(-6, -4),
                new Vector3(-2, -4),
                new Vector3(3, -4),
                new Vector3(1, 4.5, 3),
                new Vector3(6, 3, -2),
            };
            adaptiveGrid.AddFromPolygon(Polygon.Rectangle(15, 10), points);

            ulong id;
            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(-2, -4), out id));
            var oldV = adaptiveGrid.GetVertex(id);
            var edgesBefore = oldV.Edges.Count;

            var newV = adaptiveGrid.AddVertex(new Vector3(-2, -4, 2), new ConnectVertexStrategy(oldV));
            Assert.NotNull(newV);
            Assert.False(newV.Id == 0);
            Assert.Single(newV.Edges);
            Assert.True(newV.Edges.First().StartId == id || newV.Edges.First().EndId == id);
            Assert.Equal(edgesBefore + 1, oldV.Edges.Count());
            Assert.Contains(oldV.Edges, e => e.StartId == newV.Id || e.EndId == newV.Id);
        }

        [Fact]
        public void AdaptiveGridSubtractBoxCutEdges()
        {
            var adaptiveGrid = new AdaptiveGrid();
            var polygon = Polygon.Rectangle(new Vector3(0, 0), new Vector3(10, 10));

            var points = new List<Vector3>();
            for (int i = 1; i < 10; i++)
            {
                points.Add(new Vector3(i, i, 1));
            }

            adaptiveGrid.AddFromExtrude(polygon, Vector3.ZAxis, 2, points);
            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(5, 5, 1), out _));
            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(5, 4.9, 1), out _));

            adaptiveGrid.TryGetVertexIndex(new Vector3(5, 4, 1), out var borderId);
            var borderV = adaptiveGrid.GetVertex(borderId);
            var numEdges = borderV.Edges.Count;
            var numVertices = adaptiveGrid.GetVertices().Count;

            var o = Obstacle.FromBBox(
                new BBox3(new Vector3(4.9, 4.9, 0), new Vector3(5.1, 5.1, 2)));
            adaptiveGrid.SubtractObstacle(o);
            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(5, 5, 1), out _));
            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(5, 4.9, 1), out _));

            Assert.Equal(numEdges - 1, borderV.Edges.Count);
            //On each elevation one vertex is removed and no added
            Assert.Equal(numVertices - (3 * 1), adaptiveGrid.GetVertices().Count);
        }

        [Fact]
        public void AdaptiveGridSubtractBoxAddPerimeter()
        {
            var adaptiveGrid = new AdaptiveGrid();
            var polygon = Polygon.Rectangle(new Vector3(0, 0), new Vector3(10, 10));

            var points = new List<Vector3>();
            for (int i = 1; i < 10; i++)
            {
                points.Add(new Vector3(i, i, 1));
            }

            adaptiveGrid.AddFromExtrude(polygon, Vector3.ZAxis, 2, points);
            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(5, 5, 1), out _));
            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(5, 4.9, 1), out _));

            adaptiveGrid.TryGetVertexIndex(new Vector3(5, 4, 1), out var borderId);
            var borderV = adaptiveGrid.GetVertex(borderId);
            var numEdges = borderV.Edges.Count;
            var numVertices = adaptiveGrid.GetVertices().Count;

            var o = Obstacle.FromBBox(
                new BBox3(new Vector3(4.9, 4.9, 0), new Vector3(5.1, 5.1, 2)),
                addPerimeterEdges: true);
            adaptiveGrid.SubtractObstacle(o);
            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(5, 5, 1), out _));
            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(5, 4.9, 1), out _));

            Assert.Equal(numEdges, borderV.Edges.Count);
            //There are 3 elevations: extrusion is done from 0 to 2 and split points are at  1.
            //On each elevation one vertex is removed and 8 added as box perimeter.
            //TODO: elevations are not connected!!!
            Assert.Equal(numVertices + (3 * 7), adaptiveGrid.GetVertices().Count);
        }

        [Fact]
        public void AdaptiveGridSubtractBoxSmallDifference()
        {
            var edgesNumber = 75;
            var adaptiveGrid = new AdaptiveGrid();
            var polygon = Polygon.Rectangle(new Vector3(-41, -51), new Vector3(-39, -49));

            var points = new List<Vector3>();
            points.Add(new Vector3(-40, -49.9, 1));
            points.Add(new Vector3(-40, -49.80979, 1));

            adaptiveGrid.AddFromExtrude(polygon, Vector3.ZAxis, 2, points);

            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(-40, -49.9, 0), out _));
            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(-40, -49.9, 1), out _));
            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(-40, -49.9, 2), out _));
            Assert.Equal(edgesNumber, adaptiveGrid.GetEdges().Count);

            var o = Obstacle.FromBBox(
                new BBox3(new Vector3(-40.2, -50.190211303259034, 0),
                          new Vector3(-39.8, -49.809788696740966, 2)));
            adaptiveGrid.SubtractObstacle(o);

            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(-40, -49.9, 0), out _));
            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(-40, -49.9, 1), out _));
            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(-40, -49.9, 2), out _));
            Assert.Equal(edgesNumber - 14, adaptiveGrid.GetEdges().Count);
        }

        [Fact]
        public void AdaptiveGridSubtractMisalignedPolygon()
        {
            var boundary = new Polygon(
                new Vector3(-15.0, 49.599999999999994, 0), //TODO: Root cause of an issue, coordinates of boundary vertices are slightly misaligned
                new Vector3(-45.0, 49.6, 0),
                new Vector3(-45.0, 0, 0),
                new Vector3(-15.0, 0, 0));

            var obstacles = new List<Obstacle>
            { 
                //Small box with x-axis aligned edges to subtract
                Obstacle.FromBBox(new BBox3(new Vector3(-30.41029, 19.60979, 0),
                                            new Vector3(-29.58971, 20.39021, 0))),
                //Big box intersecting one of the edges of boundary, it should remove edges and vertices 
                Obstacle.FromBBox(new BBox3(new Vector3(-22.08622, 17.62839, 0),
                                            new Vector3(-8.57565, 38.31022, 0))),
                //Small box with x-axis aligned edges to subtract and no vertices added to grid
                Obstacle.FromBBox(new BBox3(new Vector3(-30.1, 40.79, 0),
                                            new Vector3(-29.7, 41.39021, 0)))
            };

            var points = new List<Vector3>()
            {
                new Vector3(-29.8, 40.540211303259035, 0),
                new Vector3(-30.0, 49.599999999999994, 0),
                new Vector3(-29.8, 41.540211303259035, 0),
                
                //1st BBox vertices
                new Vector3(-30.41029, 19.60979, 0),
                new Vector3(-29.58971, 19.60979, 0),
                new Vector3(-29.58971, 20.39021, 0),
                new Vector3(-30.41029, 20.39021, 0),
                
                //2nd BBox vertices inside polygon
                new Vector3(-22.08622, 17.62839, 0),
                new Vector3(-22.08622, 38.31022, 0)
            };

            var adaptiveGrid = new AdaptiveGrid();
            adaptiveGrid.AddFromPolygon(boundary, points);

            var edgesCount = adaptiveGrid.GetEdges().Count();
            var verticiesCount = adaptiveGrid.GetVertices().Count();

            adaptiveGrid.SubtractObstacles(obstacles);

            Assert.Equal(edgesCount - 9, adaptiveGrid.GetEdges().Count);
            Assert.Equal(verticiesCount - 2, adaptiveGrid.GetVertices().Count);
        }

        [Fact]
        public void AdaptiveGridSubstructRotatedBox()
        {
            var polygon = Polygon.Rectangle(new Vector3(0, 0), new Vector3(10, 10));
            var transfrom = new Transform().Rotated(Vector3.ZAxis, 45);

            var points = new List<Vector3>();
            for (int i = 1; i < 10; i++)
            {
                for (int j = 1; j < 10; j++)
                {
                    points.Add(new Vector3(i, j));
                }
            }

            var adaptiveGrid = new AdaptiveGrid(transfrom);
            adaptiveGrid.AddFromPolygon(polygon, points);

            //Obstacle aligned with adaptive grid transformation.
            //Forms big (3;1) -> (5;3) -> (3;5) -> (1;3) rectangle.
            var bbox = new BBox3(new Vector3(2, 2), new Vector3(4, 4));
            var withoutTransfrom = Obstacle.FromBBox(bbox, addPerimeterEdges: true);
            adaptiveGrid.SubtractObstacle(withoutTransfrom);

            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(3, 3), out _, adaptiveGrid.Tolerance));
            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(3, 2), out _, adaptiveGrid.Tolerance));
            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(3, 4), out _, adaptiveGrid.Tolerance));
            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(2, 3), out _, adaptiveGrid.Tolerance));
            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(4, 3), out _, adaptiveGrid.Tolerance));

            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(2, 2), out var id, adaptiveGrid.Tolerance));
            var v = adaptiveGrid.GetVertex(id);
            Assert.Equal(3, v.Edges.Count);
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(1.5, 2.5), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(2.5, 1.5), adaptiveGrid.Tolerance));

            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(4, 2), out id, adaptiveGrid.Tolerance));
            v = adaptiveGrid.GetVertex(id);
            Assert.Equal(3, v.Edges.Count);
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(3.5, 1.5), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(4.5, 2.5), adaptiveGrid.Tolerance));

            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(4, 4), out id, adaptiveGrid.Tolerance));
            v = adaptiveGrid.GetVertex(id);
            Assert.Equal(3, v.Edges.Count);
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(3.5, 4.5), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(4.5, 3.5), adaptiveGrid.Tolerance));

            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(2, 4), out id, adaptiveGrid.Tolerance));
            v = adaptiveGrid.GetVertex(id);
            Assert.Equal(3, v.Edges.Count);
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(1.5, 3.5), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(2.5, 4.5), adaptiveGrid.Tolerance));

            //Obstacle aligned with global transformation.
            //Forms small (6;6) -> (8;6) -> (8;8) -> (6;8) rectangle.
            bbox = new BBox3(new Vector3(6, 6), new Vector3(8, 8));
            var withTransform = Obstacle.FromBBox(bbox, addPerimeterEdges: true);
            withTransform.Orientation = new Transform();
            adaptiveGrid.SubtractObstacle(withTransform);

            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(7, 7), out _, adaptiveGrid.Tolerance));

            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(6, 6), out id, adaptiveGrid.Tolerance));
            v = adaptiveGrid.GetVertex(id);
            Assert.Equal(5, v.Edges.Count);
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(6, 7), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(5.5, 6.5), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(7, 6), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(6.5, 5.5), adaptiveGrid.Tolerance));

            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(8, 6), out id, adaptiveGrid.Tolerance));
            v = adaptiveGrid.GetVertex(id);
            Assert.Equal(5, v.Edges.Count);
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(7, 6), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(7.5, 5.5), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(8, 7), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(8.5, 6.5), adaptiveGrid.Tolerance));

            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(8, 8), out id, adaptiveGrid.Tolerance));
            v = adaptiveGrid.GetVertex(id);
            Assert.Equal(5, v.Edges.Count);
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(8, 7), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(8.5, 7.5), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(7, 8), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(7.5, 8.5), adaptiveGrid.Tolerance));

            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(6, 8), out id, adaptiveGrid.Tolerance));
            v = adaptiveGrid.GetVertex(id);
            Assert.Equal(5, v.Edges.Count);
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(7, 8), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(6.5, 8.5), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(6, 7), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(5.5, 7.5), adaptiveGrid.Tolerance));

            WriteToModelWithRandomMaterials(adaptiveGrid);
        }

        [Fact]
        public void BrokenSubtractionForMisalignedPolygon()
        {
            var boundaryVerticies = new List<Vector3>
            {
                new Vector3(0.241, -40, 7),
                new Vector3(0.241, -60, 7),
                new Vector3(80, -60.000000000000014, 7),
                new Vector3(80, -40.000000000000014, 7)
            };

            var boundary = new Polygon(boundaryVerticies);

            var grid = new AdaptiveGrid()
            {
                Boundaries = boundary
            };

            grid.AddFromPolygon(boundary, new[] { Vector3.Origin });

            var profile = Polygon.Rectangle(0.2, 0.2);
            var column = new Column(
                new Vector3(0.5, -56.22727272727274),
                10,
                new Line(new Vector3(0.5, -56.22727272727274, 10), new Vector3(0.5, -56.22727272727274, 0)),
                profile);

            var obstacle = Obstacle.FromColumn(column, 0.2, true);
            var result = grid.SubtractObstacle(obstacle);

            Assert.True(result);
            Assert.Equal(8, grid.GetEdges().Count);
            Assert.All(grid.GetVertices(), x => Assert.Equal(2, x.Edges.Count));

            WriteToModelWithRandomMaterials(grid);
        }

        [Theory]
        [MemberData(nameof(GetObstaclesForAllowOutsideBoundaryTest))]
        public void AadaptiveGridSubtractObstacleAllowOutsideBoundaryTest(Obstacle obstacle, bool expectedResult, int additionalVertices, int additionalEdges)
        {
            var boundary = Polygon.Rectangle(20, 40);
            var grid = new AdaptiveGrid { Boundaries = boundary };
            grid.AddFromPolygon(boundary, new List<Vector3> { Vector3.Origin });
            grid.AddVertices(new List<Vector3> { new Vector3(0, 20), new Vector3(0, 50) }, AdaptiveGrid.VerticesInsertionMethod.ConnectAndCut);

            var edgesCount = grid.GetEdges().Count;
            var verticesCount = grid.GetVertices().Count;

            var result = grid.SubtractObstacle(obstacle);

            WriteToModelWithRandomMaterials(grid);

            Assert.Equal(expectedResult, result);
            Assert.Equal(verticesCount + additionalVertices, grid.GetVertices().Count);
            Assert.Equal(edgesCount + additionalEdges, grid.GetEdges().Count);
        }

        public static IEnumerable<object[]> GetObstaclesForAllowOutsideBoundaryTest()
        {
            var profile = Polygon.Rectangle(1, 1);

            //Column outside of boundary and does not intersect with any edge or vertex
            yield return new object[] { Obstacle.FromColumn(new Column(new Vector3(-15, 0), 5, null, profile), 0, true), false, 0, 0 };
            yield return new object[] { Obstacle.FromColumn(new Column(new Vector3(-15, 0), 5, null, profile), 0, true, true), false, 0, 0 };
            //Column intersects with boundary
            yield return new object[] { Obstacle.FromColumn(new Column(new Vector3(-10, 0), 5, null, profile), 0, true), true, 4, 4 };
            yield return new object[] { Obstacle.FromColumn(new Column(new Vector3(-10, 0), 5, null, profile), 0, true, true), true, 6, 7 };
            //Column fully inside in boundary
            yield return new object[] { Obstacle.FromColumn(new Column(Vector3.Origin, 5, null, profile), 0, true), true, 7, 8 };
            yield return new object[] { Obstacle.FromColumn(new Column(Vector3.Origin, 5, null, profile), 0, true, true), true, 7, 8 };
            //Column outside of boundary and intersects with grid edge
            yield return new object[] { Obstacle.FromColumn(new Column(new Vector3(0, 30), 5, null, profile), 0, true), true, 2, 1, };
            yield return new object[] { Obstacle.FromColumn(new Column(new Vector3(0, 30), 5, null, profile), 0, true, true), true, 6, 7 };
            //Column outside of boundary and intersects with grid vertex
            yield return new object[] { Obstacle.FromColumn(new Column(new Vector3(0, 50), 5, null, profile), 0, true), true, 0, 0, };
            yield return new object[] { Obstacle.FromColumn(new Column(new Vector3(0, 50), 5, null, profile), 0, true, true), true, 4, 5 };
        }

        [Fact]
        public void AdaptiveGridLongSectionDoNowThrow()
        {
            var adaptiveGrid = new AdaptiveGrid();
            var polygon = Polygon.Rectangle(new Vector3(0, 0), new Vector3(200000, 10));

            var points = new List<Vector3>();
            points.Add(new Vector3(1, 5));
            points.Add(new Vector3(1999, 5));

            adaptiveGrid.AddFromExtrude(polygon, Vector3.ZAxis, 2, points);
        }

        [Fact]
        public void AdaptiveGridTwoAlignedSections()
        {
            var adaptiveGrid = new AdaptiveGrid();
            var polygon1 = Polygon.Rectangle(new Vector3(0, 0), new Vector3(10, 10));
            var polygon2 = Polygon.Rectangle(new Vector3(10, 2), new Vector3(20, 12));

            var points = new List<Vector3>();
            points.AddRange(polygon1.Vertices);
            points.AddRange(polygon2.Vertices);

            adaptiveGrid.AddFromExtrude(polygon1, Vector3.ZAxis, 2, points);
            adaptiveGrid.AddFromExtrude(polygon2, Vector3.ZAxis, 2, points);

            ulong id;
            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(10, 2), out id));
            var vertex = adaptiveGrid.GetVertex(id);
            //Up, North, South, East, West
            Assert.Equal(5, vertex.Edges.Count);
            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(10, 10), out id));
            vertex = adaptiveGrid.GetVertex(id);
            Assert.Equal(5, vertex.Edges.Count);
        }

        [Fact]
        public void AdaptiveGridDoesntAddTheSameVertex()
        {
            var adaptiveGrid = new AdaptiveGrid();
            var polygon = Polygon.Rectangle(new Vector3(0, 0), new Vector3(10, 10));
            adaptiveGrid.AddFromPolygon(polygon, new List<Vector3>());
            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(0, 10), out var id));
            var vertex = adaptiveGrid.GetVertex(id);
            var halfTol = adaptiveGrid.Tolerance / 2;
            var modified = vertex.Point + new Vector3(0, 0, halfTol);
            adaptiveGrid.TryGetVertexIndex(new Vector3(10, 0), out var otherId);
            var newVertex = adaptiveGrid.AddVertex(modified,
                new ConnectVertexStrategy(adaptiveGrid.GetVertex(otherId)));
            Assert.Equal(id, newVertex.Id);
            modified = vertex.Point + new Vector3(-halfTol, -halfTol, -halfTol);
            adaptiveGrid.TryGetVertexIndex(modified, out otherId, adaptiveGrid.Tolerance);
            Assert.Equal(id, otherId);
        }

        [Fact]
        public void AdaptiveGridAddVertices()
        {
            var grid = new AdaptiveGrid();

            //Just add
            var simpleLine = new Vector3[] { new Vector3(10, 0), new Vector3(20, 0) };
            var added = grid.AddVertices(simpleLine, AdaptiveGrid.VerticesInsertionMethod.Insert);
            Assert.Equal(2, added.Count);
            Assert.True(grid.TryGetVertexIndex(new Vector3(10, 0), out var id0));
            Assert.True(grid.TryGetVertexIndex(new Vector3(20, 0), out var id1));
            var v0 = grid.GetVertex(id0);
            var v1 = grid.GetVertex(id1);
            Assert.Empty(v0.Edges);
            Assert.Empty(v1.Edges);

            //Add and connect
            simpleLine = new Vector3[] { new Vector3(0, 0), new Vector3(2, 0), new Vector3(2, 0), new Vector3(5, 0) };
            added = grid.AddVertices(simpleLine, AdaptiveGrid.VerticesInsertionMethod.Connect);
            //Duplicates are ignored
            Assert.Equal(3, added.Count);
            Assert.True(grid.TryGetVertexIndex(new Vector3(0, 0), out id0));
            Assert.True(grid.TryGetVertexIndex(new Vector3(2, 0), out id1));
            Assert.True(grid.TryGetVertexIndex(new Vector3(5, 0), out var id2));
            v0 = grid.GetVertex(id0);
            v1 = grid.GetVertex(id1);
            var v2 = grid.GetVertex(id2);
            Assert.Single(v0.Edges);
            Assert.Equal(2, v1.Edges.Count);
            Assert.Single(v2.Edges);
            Assert.Equal(v0.Edges.First().OtherVertexId(v0.Id), v1.Id);
            Assert.Equal(v2.Edges.First().OtherVertexId(v2.Id), v1.Id);

            //Add, connect and self intersect
            var singleIntersection = new Vector3[] {
                new Vector3(0, 5),
                new Vector3(5, 5),
                new Vector3(10, 5),
                new Vector3(10, 10),
                new Vector3(8, 10),
                new Vector3(8, 2)
            };
            added = grid.AddVertices(singleIntersection, AdaptiveGrid.VerticesInsertionMethod.ConnectAndSelfIntersect);
            Assert.Equal(8, added.Count); //Single intersection point represented twice.
            Assert.True(grid.TryGetVertexIndex(new Vector3(8, 5), out var id));
            var v = grid.GetVertex(id);
            Assert.Equal(4, v.Edges.Count);
            Assert.True(grid.TryGetVertexIndex(new Vector3(5, 5), out id0));
            Assert.True(grid.TryGetVertexIndex(new Vector3(10, 5), out id1));
            Assert.True(grid.TryGetVertexIndex(new Vector3(8, 10), out id2));
            Assert.True(grid.TryGetVertexIndex(new Vector3(8, 2), out var id3));
            Assert.Contains(v.Edges, e => e.StartId == id0 || e.EndId == id0);
            Assert.Contains(v.Edges, e => e.StartId == id1 || e.EndId == id1);
            Assert.Contains(v.Edges, e => e.StartId == id2 || e.EndId == id2);
            Assert.Contains(v.Edges, e => e.StartId == id3 || e.EndId == id3);

            var douleIntersection = new Vector3[] {
                new Vector3(10, 0),
                new Vector3(20, 0),
                new Vector3(20, 5),
                new Vector3(15, 5),
                new Vector3(15, -5),
                new Vector3(12, -5),
                new Vector3(12, 5),
            };
            added = grid.AddVertices(douleIntersection, AdaptiveGrid.VerticesInsertionMethod.ConnectAndSelfIntersect);
            Assert.Equal(11, added.Count); //Two intersection points represented twice.
            Assert.True(grid.TryGetVertexIndex(new Vector3(15, 0), out id0));
            Assert.True(grid.TryGetVertexIndex(new Vector3(12, 0), out id1));
            v0 = grid.GetVertex(id0);
            v1 = grid.GetVertex(id1);
            Assert.Equal(4, v0.Edges.Count);
            Assert.Equal(4, v1.Edges.Count);
            Assert.Contains(v0.Edges, e => e.StartId == id1 || e.EndId == id1);
            Assert.True(grid.TryGetVertexIndex(new Vector3(10, 0), out id2));
            Assert.True(grid.TryGetVertexIndex(new Vector3(20, 0), out id3));
            v2 = grid.GetVertex(id2);
            var v3 = grid.GetVertex(id3);
            Assert.Single(v2.Edges);
            Assert.Equal(2, v3.Edges.Count);
            Assert.Contains(v2.Edges, e => e.StartId == id1 || e.EndId == id1);
            Assert.Contains(v3.Edges, e => e.StartId == id0 || e.EndId == id0);

            //Add connect and cut
            simpleLine = new Vector3[] { new Vector3(2, 10), new Vector3(2, 0) };
            added = grid.AddVertices(simpleLine, AdaptiveGrid.VerticesInsertionMethod.ConnectAndCut);
            Assert.Equal(3, added.Count);
            Assert.Contains(added, v => v.Point.IsAlmostEqualTo(new Vector3(2, 10)));
            Assert.Contains(added, v => v.Point.IsAlmostEqualTo(new Vector3(2, 5)));
            Assert.Contains(added, v => v.Point.IsAlmostEqualTo(new Vector3(2, 0)));
            Assert.True(grid.TryGetVertexIndex(new Vector3(2, 5), out id0));
            Assert.True(grid.TryGetVertexIndex(new Vector3(2, 0), out id1));
            v0 = grid.GetVertex(id0);
            v1 = grid.GetVertex(id1);
            Assert.Equal(4, v0.Edges.Count);
            Assert.Equal(3, v1.Edges.Count);

            //Add cut and extend.
            grid = new AdaptiveGrid();
            grid.AddFromPolygon(Polygon.Rectangle(new Vector3(0, 0), new Vector3(10, 10)),
                                new List<Vector3> { new Vector3(5, 5) });

            var toExtend = new Vector3[] { new Vector3(1, 5), new Vector3(4, 2), new Vector3(8, 6) };
            added = grid.AddVertices(toExtend, AdaptiveGrid.VerticesInsertionMethod.ConnectCutAndExtend);
            Assert.Equal(8, added.Count);
            Assert.Equal(new Vector3(0, 6), added[0].Point);
            Assert.Equal(new Vector3(1, 5), added[1].Point);
            Assert.Equal(new Vector3(5, 1), added[2].Point);
            Assert.Equal(new Vector3(2, 0), added[3].Point);
            Assert.Equal(new Vector3(4, 2), added[4].Point);
            Assert.Equal(new Vector3(5, 3), added[5].Point);
            Assert.Equal(new Vector3(7, 5), added[6].Point);
            Assert.Equal(new Vector3(10, 8), added[7].Point);
            Assert.Equal(3, added[0].Edges.Count);
            Assert.Equal(4, added[1].Edges.Count);
            Assert.Equal(3, added[2].Edges.Count);
            Assert.Equal(3, added[3].Edges.Count);
            Assert.Equal(4, added[4].Edges.Count);
            Assert.Equal(4, added[5].Edges.Count);
            Assert.Equal(4, added[6].Edges.Count);
            Assert.Equal(3, added[7].Edges.Count);
        }

        [Fact]
        public void AddVerticesWithCustomExtension()
        {
            var grid = new AdaptiveGrid();
            grid.AddFromPolygon(Polygon.Rectangle(new Vector3(0, 0), new Vector3(10, 10)),
                                new List<Vector3> { });

            //Default HintExtendDistance is 3.
            var toExtend = new Vector3[] { new Vector3(1, 3), new Vector3(1, 6) };
            var added = grid.AddVerticesWithCustomExtension(toExtend, grid.HintExtendDistance);
            Assert.Equal(2, added.Count);
            Assert.Equal(new Vector3(1, 0), added[0].Point);
            Assert.Equal(new Vector3(1, 6), added[1].Point);
            Assert.Equal(3, added[0].Edges.Count);
            Assert.Single(added[1].Edges);

            toExtend = new Vector3[] { new Vector3(5, 3), new Vector3(5, 6) };
            added = grid.AddVerticesWithCustomExtension(toExtend, 4);
            Assert.Equal(2, added.Count);
            Assert.Equal(new Vector3(5, 0), added[0].Point);
            Assert.Equal(new Vector3(5, 10), added[1].Point);
            Assert.Equal(3, added[0].Edges.Count);
            Assert.Equal(3, added[1].Edges.Count);

            toExtend = new Vector3[] { new Vector3(8, 3), new Vector3(8, 6) };
            added = grid.AddVerticesWithCustomExtension(toExtend, 2);
            Assert.Equal(2, added.Count);
            Assert.Equal(new Vector3(8, 3), added[0].Point);
            Assert.Equal(new Vector3(8, 6), added[1].Point);
            Assert.Single(added[0].Edges);
            Assert.Single(added[1].Edges);
        }

        [Fact]
        public void AddAngledVerticesWithCustomExtension()
        {
            var grid = new AdaptiveGrid();
            grid.AddFromPolygon(Polygon.Rectangle(new Vector3(0, 0), new Vector3(10, 10)),
                                new List<Vector3> { });

            var toExtend = new Vector3[] { new Vector3(1, 7), new Vector3(2, 8) };
            var added = grid.AddVerticesWithCustomExtension(toExtend, 2);
            Assert.Equal(2, added.Count);
            Assert.Equal(new Vector3(0, 6), added[0].Point);
            Assert.Equal(new Vector3(2, 8), added[1].Point);
            Assert.Equal(3, added[0].Edges.Count);
            Assert.Single(added[1].Edges);
        }

        [Fact]
        public void Add3DVerticesWithCustomExtension()
        {
            var grid = new AdaptiveGrid();
            grid.AddFromPolygon(Polygon.Rectangle(new Vector3(0, 0), new Vector3(10, 10)),
                                new List<Vector3> { new Vector3(2, 2), new Vector3(5, 5), new Vector3(8, 8) });

            var toInsert = new Vector3[] {
                new Vector3(2, 5, 0),
                new Vector3(3, 5, 0),
                new Vector3(4, 5, 1),
                new Vector3(5, 5, 1),
                new Vector3(6, 5, 0),
                new Vector3(7, 5, 0)
            };

            var verticesBefore = grid.GetVertices().Count;
            grid.AddVerticesWithCustomExtension(toInsert, 2);
            //Start point already exist and the last one is snapped.
            Assert.Equal(verticesBefore + 4, grid.GetVertices().Count);

            Assert.True(grid.TryGetVertexIndex(new Vector3(3, 5, 0), out var id, grid.Tolerance));
            var vertex = grid.GetVertex(id);
            Assert.Equal(3, vertex.Edges.Count);
            Assert.Contains(vertex.Edges, e => grid.GetVertex(e.OtherVertexId(id)).Point.IsAlmostEqualTo(new Vector3(4, 5, 1)));
            Assert.Contains(vertex.Edges, e => grid.GetVertex(e.OtherVertexId(id)).Point.IsAlmostEqualTo(new Vector3(2, 5, 0)));
            Assert.Contains(vertex.Edges, e => grid.GetVertex(e.OtherVertexId(id)).Point.IsAlmostEqualTo(new Vector3(5, 5, 0)));

            Assert.True(grid.TryGetVertexIndex(new Vector3(4, 5, 1), out id, grid.Tolerance));
            vertex = grid.GetVertex(id);
            Assert.Equal(2, vertex.Edges.Count);
            Assert.Contains(vertex.Edges, e => grid.GetVertex(e.OtherVertexId(id)).Point.IsAlmostEqualTo(new Vector3(3, 5, 0)));
            Assert.Contains(vertex.Edges, e => grid.GetVertex(e.OtherVertexId(id)).Point.IsAlmostEqualTo(new Vector3(5, 5, 1)));

            Assert.True(grid.TryGetVertexIndex(new Vector3(5, 5, 1), out id, grid.Tolerance));
            vertex = grid.GetVertex(id);
            Assert.Equal(2, vertex.Edges.Count);
            Assert.Contains(vertex.Edges, e => grid.GetVertex(e.OtherVertexId(id)).Point.IsAlmostEqualTo(new Vector3(4, 5, 1)));
            Assert.Contains(vertex.Edges, e => grid.GetVertex(e.OtherVertexId(id)).Point.IsAlmostEqualTo(new Vector3(6, 5, 0)));

            Assert.True(grid.TryGetVertexIndex(new Vector3(6, 5, 0), out id, grid.Tolerance));
            vertex = grid.GetVertex(id);
            Assert.Equal(3, vertex.Edges.Count);
            Assert.Contains(vertex.Edges, e => grid.GetVertex(e.OtherVertexId(id)).Point.IsAlmostEqualTo(new Vector3(5, 5, 1)));
            Assert.Contains(vertex.Edges, e => grid.GetVertex(e.OtherVertexId(id)).Point.IsAlmostEqualTo(new Vector3(5, 5, 0)));
            Assert.Contains(vertex.Edges, e => grid.GetVertex(e.OtherVertexId(id)).Point.IsAlmostEqualTo(new Vector3(8, 5, 0)));
        }

        [Fact]
        public void AdaptiveGridVertexGetEdgeOtherVertexId()
        {
            var grid = SampleGrid();
            var vertex = grid.GetVertex(2);
            Assert.Null(vertex.GetEdge(4));
            Assert.Null(vertex.GetEdge(2));

            var edge = vertex.GetEdge(1);
            Assert.True(edge.OtherVertexId(2) == 1);
            Assert.Throws<ArgumentException>(() => edge.OtherVertexId(3));
            var startVertex = grid.GetVertex(edge.StartId);
            Assert.True(startVertex.Point.IsAlmostEqualTo(new Vector3(0, 0)));
        }

        [Fact]
        public void AdaptiveGridClosestVertex()
        {
            var grid = SampleGrid();
            var closest = grid.ClosestVertex(new Vector3(5, 4));
            Assert.Equal(4u, closest.Id);
        }

        [Fact]
        public void AdaptiveGridClosestEdge()
        {
            var grid = SampleGrid();
            var edge = grid.ClosestEdge(new Vector3(9, 3), out var closest);
            Assert.True(edge.StartId == 3 || edge.StartId == 4);
            Assert.True(edge.EndId == 3 || edge.EndId == 4);
            Assert.Equal(new Vector3(8, 2), closest);
        }

        [Fact]
        public void AdaptiveGridCutEdge()
        {
            var grid = SampleGrid();
            var vertex = grid.GetVertex(1);
            var edge = vertex.GetEdge(4);
            var cut = grid.CutEdge(edge, new Vector3(0, 5));
            Assert.DoesNotContain(edge, vertex.Edges);
            Assert.DoesNotContain(edge, grid.GetEdges());
            Assert.Equal(2, cut.Edges.Count);
            Assert.Contains(cut.Edges, e => e.OtherVertexId(cut.Id) == 1);
            Assert.Contains(cut.Edges, e => e.OtherVertexId(cut.Id) == 4);
        }

        [Fact]
        public void AdaptiveGridEdgeGetVerticesGetLine()
        {
            var grid = SampleGrid();
            var vertexA = grid.GetVertex(1);
            var vertexB = grid.GetVertex(4);
            var edge = vertexA.GetEdge(4);
            var vertices = grid.GetVertices(edge);
            Assert.Equal(2, vertices.Count);
            Assert.Contains(vertices, v => v == vertexA);
            Assert.Contains(vertices, v => v == vertexB);

            var line = grid.GetLine(edge);
            Assert.True(line.Start.IsAlmostEqualTo(vertexA.Point) || line.End.IsAlmostEqualTo(vertexA.Point));
            Assert.True(line.Start.IsAlmostEqualTo(vertexB.Point) || line.End.IsAlmostEqualTo(vertexB.Point));
        }

        [Fact]
        public void AdaptiveGridRemoveVertex()
        {
            var grid = SampleGrid();
            var oldVertexCount = grid.GetVertices().Count;
            var oldEdgeCount = grid.GetEdges().Count;
            var vertex = grid.GetVertex(1);
            var edges = vertex.Edges.ToList();
            var otherVertices = edges.Select(e => grid.GetVertex(e.OtherVertexId(1)));
            grid.RemoveVertex(vertex);
            Assert.DoesNotContain(vertex, grid.GetVertices());
            Assert.Equal(oldVertexCount - 1, grid.GetVertices().Count);
            Assert.Equal(oldEdgeCount - 2, grid.GetEdges().Count);
            foreach (var e in edges)
            {
                Assert.DoesNotContain(e, grid.GetEdges());
                Assert.DoesNotContain(otherVertices, v => v.Edges.Contains(e));
            }
        }

        [Fact]
        public void AdaptiveGridAddEdgeNoCut()
        {
            var grid = SampleGrid();
            var v0 = grid.GetVertex(4);
            var v0ec = v0.Edges.Count;
            var v1 = grid.GetVertex(5);
            var v1ec = v1.Edges.Count;
            var oldVertexCount = grid.GetVertices().Count;
            var oldEdgeCount = grid.GetEdges().Count;
            var newEdges = grid.AddEdge(v0, v1, cut: false);
            Assert.Equal(oldVertexCount, grid.GetVertices().Count);
            Assert.Equal(oldEdgeCount + 1, grid.GetEdges().Count);
            Assert.Equal(v0ec + 1, v0.Edges.Count);
            Assert.Equal(v1ec + 1, v1.Edges.Count);
            Assert.Contains(newEdges.First(), v0.Edges);
            Assert.Contains(newEdges.First(), v1.Edges);
            Assert.True(newEdges.First().StartId == v0.Id);
            Assert.True(newEdges.First().EndId == v1.Id);

            oldEdgeCount = grid.GetEdges().Count;
            var otherEdge = newEdges.First();
            newEdges = grid.AddEdge(new Vector3(4, 3), new Vector3(6, 3), cut: false);
            Assert.Equal(oldVertexCount + 2, grid.GetVertices().Count);
            Assert.Equal(oldEdgeCount + 1, grid.GetEdges().Count);
            v0 = grid.GetVertex(newEdges.First().StartId);
            v1 = grid.GetVertex(newEdges.First().EndId);
            Assert.Equal(new Vector3(4, 3), v0.Point);
            Assert.Equal(new Vector3(6, 3), v1.Point);
            Assert.True(grid.GetLine(otherEdge).Intersects(grid.GetLine(newEdges.First()), out _));
        }

        [Fact]
        public void AdaptiveGridRemoveEdge()
        {
            var grid = SampleGrid();
            var v0 = grid.GetVertex(2);
            var v1 = grid.GetVertex(5);
            var v0ec = v0.Edges.Count;
            var oldVertexCount = grid.GetVertices().Count;
            var oldEdgeCount = grid.GetEdges().Count;
            var edge = v0.GetEdge(v1.Id);
            grid.RemoveEdge(edge);
            Assert.Equal(oldVertexCount - 1, grid.GetVertices().Count);
            Assert.Equal(oldEdgeCount - 1, grid.GetEdges().Count);

            Assert.DoesNotContain(edge, grid.GetEdges());
            Assert.DoesNotContain(v1, grid.GetVertices()); //v1 had only one edge.
            Assert.Contains(v0, grid.GetVertices()); //v0 had two edges
            Assert.Equal(v0ec - 1, v0.Edges.Count);
            Assert.DoesNotContain(edge, v0.Edges);
        }

        [Fact]
        public void AdaptiveGridAddCutEdge()
        {
            var grid = SampleGrid();

            //1. Just intersection.
            var v0 = grid.AddVertex(new Vector3(4, 1));
            var v1 = grid.AddVertex(new Vector3(6, 1));
            var edges = grid.AddEdge(v0.Id, v1.Id);
            Assert.Equal(2, edges.Count);
            var intersectionVertex = grid.GetVertex(edges.First().EndId);
            Assert.Equal(new Vector3(5, 1), intersectionVertex.Point);
            Assert.Equal(4, intersectionVertex.Edges.Count);

            //2. Multiply intersections
            v0 = grid.AddVertex(new Vector3(0, 4));
            v1 = grid.AddVertex(new Vector3(10, 4));
            edges = grid.AddEdge(v0.Id, v1.Id);
            Assert.Equal(3, edges.Count);
            Assert.True(grid.TryGetVertexIndex(new Vector3(4, 4), out var otherId));
            Assert.True(edges.First().StartId == otherId || edges.First().EndId == otherId);
            intersectionVertex = grid.GetVertex(otherId);
            Assert.Equal(4, intersectionVertex.Edges.Count);
            Assert.True(grid.TryGetVertexIndex(new Vector3(6, 4), out otherId));
            Assert.True(edges.Last().StartId == otherId || edges.Last().EndId == otherId);
            intersectionVertex = grid.GetVertex(otherId);
            Assert.Equal(4, intersectionVertex.Edges.Count);

            //3. Miss
            v0 = grid.AddVertex(new Vector3(0, 7));
            v1 = grid.AddVertex(new Vector3(10, 7));
            edges = grid.AddEdge(v0.Id, v1.Id);
            Assert.Single(edges);
            var startVertex = grid.GetVertex(edges.First().StartId);
            var endVertex = grid.GetVertex(edges.First().EndId);
            Assert.Equal(new Vector3(0, 7), startVertex.Point);
            Assert.Equal(new Vector3(10, 7), endVertex.Point);
            Assert.Single(startVertex.Edges);
            Assert.Single(endVertex.Edges);

            //4. In Plane Touch
            v0 = grid.AddVertex(new Vector3(2, 0));
            v1 = grid.AddVertex(new Vector3(2, -5));
            edges = grid.AddEdge(v0.Id, v1.Id);
            Assert.Single(edges);
            startVertex = grid.GetVertex(edges.First().StartId);
            endVertex = grid.GetVertex(edges.First().EndId);
            Assert.Equal(new Vector3(2, 0), startVertex.Point);
            Assert.Equal(3, startVertex.Edges.Count);
            Assert.Single(endVertex.Edges);

            //5. Out Plane Touch
            v0 = grid.AddVertex(new Vector3(8, 0));
            v1 = grid.AddVertex(new Vector3(8, 0, 2));
            edges = grid.AddEdge(v0.Id, v1.Id);
            Assert.Single(edges);
            startVertex = grid.GetVertex(edges.First().StartId);
            Assert.Equal(new Vector3(8, 0), startVertex.Point);
            Assert.Equal(3, startVertex.Edges.Count);
            Assert.Single(endVertex.Edges);

            //6. Inside other edge
            v0 = grid.AddVertex(new Vector3(1, 1));
            v1 = grid.AddVertex(new Vector3(3, 3));
            edges = grid.AddEdge(v0.Id, v1.Id);
            Assert.Single(edges);
            startVertex = grid.GetVertex(edges.First().StartId);
            endVertex = grid.GetVertex(edges.First().EndId);
            Assert.Equal(2, startVertex.Edges.Count);
            Assert.Equal(2, endVertex.Edges.Count);
            var otherEdge = startVertex.Edges.First(e => e.StartId != endVertex.Id && e.EndId != endVertex.Id);
            var otherVertex = grid.GetVertex(otherEdge.StartId == startVertex.Id ? otherEdge.EndId : otherEdge.StartId);
            Assert.Equal(new Vector3(0, 0), otherVertex.Point);
            otherEdge = endVertex.Edges.First(e => e.StartId != startVertex.Id && e.EndId != startVertex.Id);
            otherVertex = grid.GetVertex(otherEdge.StartId == startVertex.Id ? otherEdge.EndId : otherEdge.StartId);
            Assert.Equal(new Vector3(4, 4), otherVertex.Point);

            //7. Overlaps other edges
            v0 = grid.AddVertex(new Vector3(4, 6));
            v1 = grid.AddVertex(new Vector3(11, -1));
            edges = grid.AddEdge(v0.Id, v1.Id);
            Assert.Equal(4, edges.Count);
            Assert.True(grid.TryGetVertexIndex(new Vector3(5, 5), out otherId));
            Assert.True(edges.First().StartId == otherId || edges.First().EndId == otherId);
            endVertex = grid.GetVertex(otherId);
            startVertex = grid.GetVertex(edges.First().StartId == otherId ? edges.First().EndId : edges.First().StartId);
            Assert.Single(startVertex.Edges);
            Assert.Equal(3, endVertex.Edges.Count);
            Assert.True(grid.TryGetVertexIndex(new Vector3(6, 4), out otherId));
            Assert.Contains(endVertex.Edges, e => e.StartId == otherId || e.EndId == otherId);
            otherVertex = grid.GetVertex(otherId);
            Assert.Equal(4, otherVertex.Edges.Count);
            startVertex = grid.GetVertex(edges.Last().StartId);
            endVertex = grid.GetVertex(edges.Last().EndId);
            Assert.Equal(3, startVertex.Edges.Count);
            Assert.Single(endVertex.Edges);
            Assert.Contains(startVertex.Edges, e => e.StartId == otherId || e.EndId == otherId);
            otherVertex = grid.GetVertex(otherId);
            Assert.Equal(new Vector3(6, 4), otherVertex.Point);
        }

        [Fact]
        public void AdaptiveGridAddVertexWithAngle()
        {
            var grid = new AdaptiveGrid();

            //1. Aligned with direction. 0 vertices exist.
            var s = new ConnectVertexWithAngleStrategy(new Vector3(0, 5), new Vector3(0, 1), 45);
            var startVertex = grid.AddVertex(new Vector3(0, 0), s);
            Assert.Null(s.MiddleVertex);
            Assert.Equal(new Vector3(0, 0), startVertex.Point);
            var id00 = startVertex.Id;
            Assert.Equal(new Vector3(0, 5), s.EndVertex.Point);
            var id05 = s.EndVertex.Id;

            //2. Ortho aligned with direction, 1 vertex exist.
            s = new ConnectVertexWithAngleStrategy(new Vector3(0, 0), new Vector3(0, 1), 45);
            startVertex = grid.AddVertex(new Vector3(5, 0), s);
            Assert.Null(s.MiddleVertex);
            Assert.Equal(new Vector3(5, 0), startVertex.Point);
            Assert.Equal(id00, s.EndVertex.Id);
            var id50 = startVertex.Id;

            //3. 0 degree, 2 vertices exist.
            s = new ConnectVertexWithAngleStrategy(new Vector3(5, 0), new Vector3(0, 1), 0);
            startVertex = grid.AddVertex(new Vector3(0, 5), s);
            Assert.Equal(new Vector3(5, 5), s.MiddleVertex.Point);
            Assert.Equal(new Vector3(0, 5), startVertex.Point);
            Assert.Equal(id05, startVertex.Id);
            Assert.Equal(id50, s.EndVertex.Id);

            //4. 90 degrees, 0 vertices exist.
            s = new ConnectVertexWithAngleStrategy(new Vector3(10, 0), new Vector3(0, 1), 90);
            startVertex = grid.AddVertex(new Vector3(15, 5), s);
            Assert.Equal(new Vector3(15, 0), s.MiddleVertex.Point);

            //5. 45 degrees, 1 intersection.
            s = new ConnectVertexWithAngleStrategy(new Vector3(13, -2), new Vector3(1, 0), 45);
            startVertex = grid.AddVertex(new Vector3(10, 5), s);
            Assert.Equal(new Vector3(10, 1), s.MiddleVertex.Point);
            Assert.Equal(45.0, (s.EndVertex.Point - s.MiddleVertex.Point).AngleTo(s.MiddleVertex.Point - startVertex.Point), 3);
            Assert.Contains(s.MiddleVertex.Edges, e =>
                e.StartId != s.MiddleVertex.Id && grid.GetVertex(e.StartId).Point.IsAlmostEqualTo(new Vector3(11, 0)) ||
                e.EndId != s.MiddleVertex.Id && grid.GetVertex(e.EndId).Point.IsAlmostEqualTo(new Vector3(11, 0)));

            //5. 45 degrees, tilted direction.
            s = new ConnectVertexWithAngleStrategy(new Vector3(11, 15), new Vector3(1, 1), 45);
            startVertex = grid.AddVertex(new Vector3(10, 10), s);
            Assert.Equal(new Vector3(11, 11), s.MiddleVertex.Point);
            Assert.Equal(45.0, (s.EndVertex.Point - s.MiddleVertex.Point).AngleTo(s.MiddleVertex.Point - startVertex.Point), 3);

            //6. 1 to 2 ration (26.565 degrees)
            s = new ConnectVertexWithAngleStrategy(new Vector3(15, 5), new Vector3(0, 1), 26.565);
            startVertex = grid.AddVertex(new Vector3(20, 0), s);
            Assert.Equal(new Vector3(17.5, 0), s.MiddleVertex.Point);
            var angle = (s.EndVertex.Point - s.MiddleVertex.Point).AngleTo(s.MiddleVertex.Point - startVertex.Point);
            Assert.True(angle.ApproximatelyEquals(26.565) || angle.ApproximatelyEquals(90 - 26.565));

            //7.  1 to 2 ration (26.565 degrees) full length
            s = new ConnectVertexWithAngleStrategy(new Vector3(20, 0), new Vector3(1, 0), 26.565);
            startVertex = grid.AddVertex(new Vector3(30, 5), s);
            Assert.Null(s.MiddleVertex);
            Assert.Contains(startVertex.Edges, e => e.StartId == s.EndVertex.Id || e.EndId == s.EndVertex.Id);
        }

        [Fact]
        public void AdaptiveGridStoreAndDuplicateElevation()
        {
            AdaptiveGrid grid = new AdaptiveGrid();
            var polygon = Polygon.Rectangle(Vector3.Origin, new Vector3(10, 10));
            grid.AddFromExtrude(polygon, Vector3.ZAxis, 1, new List<Vector3>() { new Vector3(5, 5) });
            grid.AddEdge(new Vector3(0, 5, 1), new Vector3(0, 5, 2), false);
            grid.AddEdge(new Vector3(10, 5, 1), new Vector3(10, 5, 4), false);

            var plane = new Plane(new Vector3(0, 0, 1), Vector3.ZAxis);
            var snapshot = grid.SnapshotEdgesOnPlane(plane);
            Assert.Equal(12, snapshot.Count);

            grid.TryGetVertexIndex(new Vector3(5, 0, 1), out var id, grid.Tolerance);
            grid.RemoveVertex(grid.GetVertex(id));
            var edgesBefore = grid.GetEdges().Count;

            var transform = new Transform(0, 0, 2);
            grid.InsertSnapshot(snapshot, transform);
            Assert.Equal(edgesBefore + 20, grid.GetEdges().Count);

            Assert.True(grid.TryGetVertexIndex(new Vector3(0, 5, 3), out id, grid.Tolerance));
            var v = grid.GetVertex(id);
            Assert.Equal(4, v.Edges.Count);
            var neighbourPoints = v.Edges.Select(e => grid.GetVertex(e.OtherVertexId(v.Id)).Point);
            Assert.Contains(new Vector3(0, 0, 3), neighbourPoints);
            Assert.Contains(new Vector3(0, 10, 3), neighbourPoints);
            Assert.Contains(new Vector3(5, 5, 3), neighbourPoints);
            Assert.Contains(new Vector3(0, 5, 2), neighbourPoints);
            Assert.DoesNotContain(new Vector3(0, 5, 1), neighbourPoints);

            Assert.True(grid.TryGetVertexIndex(new Vector3(5, 0, 3), out id, grid.Tolerance));
            v = grid.GetVertex(id);
            Assert.Equal(3, v.Edges.Count);
            neighbourPoints = v.Edges.Select(e => grid.GetVertex(e.OtherVertexId(v.Id)).Point);
            Assert.Contains(new Vector3(0, 0, 3), neighbourPoints);
            Assert.Contains(new Vector3(10, 0, 3), neighbourPoints);
            Assert.Contains(new Vector3(5, 5, 3), neighbourPoints);
            Assert.DoesNotContain(new Vector3(5, 0, 1), neighbourPoints);

            Assert.True(grid.TryGetVertexIndex(new Vector3(10, 5, 3), out id, grid.Tolerance));
            v = grid.GetVertex(id);
            Assert.Equal(5, v.Edges.Count);
            neighbourPoints = v.Edges.Select(e => grid.GetVertex(e.OtherVertexId(v.Id)).Point);
            Assert.Contains(new Vector3(10, 0, 3), neighbourPoints);
            Assert.Contains(new Vector3(10, 10, 3), neighbourPoints);
            Assert.Contains(new Vector3(5, 5, 3), neighbourPoints);
            Assert.Contains(new Vector3(10, 5, 1), neighbourPoints);
            Assert.Contains(new Vector3(10, 5, 4), neighbourPoints);
        }

        [Fact]
        public void EdgeInfoFlagsTest()
        {
            AdaptiveGrid grid = new AdaptiveGrid();
            var polygon = Polygon.Rectangle(Vector3.Origin, new Vector3(10, 10));
            grid.AddFromPolygon(polygon, new List<Vector3>() { new Vector3(5, 5) });
            grid.AddEdge(Vector3.Origin, new Vector3(0, 0, 5));

            grid.TryGetVertexIndex(Vector3.Origin, out var id0);
            grid.TryGetVertexIndex(new Vector3(0, 0, 5), out var id1);
            grid.TryGetVertexIndex(new Vector3(0, 5), out var id2);

            var verticalEdge = grid.GetVertex(id0).Edges.First(e => e.StartId == id1 || e.EndId == id1);
            var horizontalEdge = grid.GetVertex(id0).Edges.First(e => e.StartId == id2 || e.EndId == id2);
            EdgeInfo verticalEdgeInfo = new EdgeInfo(grid, verticalEdge);
            EdgeInfo horizontalEdgeInfo = new EdgeInfo(grid, horizontalEdge);
            Assert.True(verticalEdgeInfo.HasAnyFlag(EdgeFlags.HasVerticalChange));
            Assert.False(horizontalEdgeInfo.HasAnyFlag(EdgeFlags.HasVerticalChange));

            horizontalEdgeInfo.AddFlags(EdgeFlags.UserDefinedHint2D | EdgeFlags.HasVerticalChange);
            Assert.True(horizontalEdgeInfo.HasAnyFlag(EdgeFlags.HasVerticalChange));
            Assert.True(horizontalEdgeInfo.HasAnyFlag(EdgeFlags.UserDefinedHint2D));
            Assert.False(horizontalEdgeInfo.HasAnyFlag(EdgeFlags.UserDefinedHint3D));
            Assert.True(horizontalEdgeInfo.HasAnyFlag(EdgeFlags.UserDefinedHint2D | EdgeFlags.UserDefinedHint3D));
        }

        //          (4)
        //         /   \
        //        /     \
        //       /       \
        //      /   (5)   \
        //     /     |     \
        //    /      |      \
        //  (1)-----(2)-----(3)
        //
        private AdaptiveGrid SampleGrid()
        {
            AdaptiveGrid grid = new AdaptiveGrid();
            var strip = grid.AddVertices(new Vector3[] {
                new Vector3(0, 0), //1
                new Vector3(5, 0), //2
                new Vector3(10, 0) //3
            }, AdaptiveGrid.VerticesInsertionMethod.Connect);

            grid.AddVertex(new Vector3(5, 5), new ConnectVertexStrategy(strip[0], strip[2]), cut: false); //4
            grid.AddVertex(new Vector3(5, 2), new ConnectVertexStrategy(strip[1]), cut: false); //5
            return grid;
        }

        private void WriteToModelWithRandomMaterials(AdaptiveGrid grid, [CallerMemberName] string memberName = "")
        {
            var random = new Random();
            Name = memberName;
            foreach (var edge in grid.GetEdges())
            {
                Model.AddElement(new ModelCurve(grid.GetLine(edge), material: random.NextMaterial()));
            }
        }
    }
}
