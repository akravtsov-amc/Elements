using Elements.Geometry;
using Elements.Serialization.glTF;
using Elements.Spatial.AdaptiveGrid;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using Xunit;

namespace Elements.Tests
{
    public class AdaptiveGridTests : ModelTest
    {
        [Fact]
        public void Searchable3dTest()
        {
            var trees = new List<AdaptiveGrid.Searchable3d> {
                new AdaptiveGrid.DicDicDic(),
                new AdaptiveGrid.DicDicTree(),
                new AdaptiveGrid.DicTreeDic(),
                new AdaptiveGrid.DicTreeTree(),
                new AdaptiveGrid.TreeDicDic(),
                new AdaptiveGrid.TreeDicTree(),
                new AdaptiveGrid.TreeTreeDic(),
                new AdaptiveGrid.TreeTreeTree(),
            };
            ulong id;

            foreach (var tree in trees)
            {
                // Step 1
                tree.Insert(10.000000000000000, 3.000000000000000, 9.000000000000000, 1);
                tree.Erase(3.000000000000000, 3.000000000000000, 7.000000000000000);
                Assert.False(tree.Find(5.665417755480634, 6.034071720888596, 7.742584046349047, 9.629447866662256, 8.768938716272300, 9.731458485607606, out id));
                // Step 2
                tree.Erase(10.000000000000000, 3.000000000000000, 9.000000000000000);
                tree.Erase(4.000000000000000, 6.000000000000000, 4.000000000000000);
                Assert.False(tree.Find(3.632164567616905, 8.341702966279080, 4.025982958446958, 8.241413587897270, 2.001903873662214, 5.696821052274863, out id));
                // Step 3
                tree.Insert(1.000000000000000, 9.000000000000000, 9.000000000000000, 2);
                tree.Erase(8.000000000000000, 10.000000000000000, 6.000000000000000);
                Assert.False(tree.Find(0.762865299588348, 4.938180507289443, 6.068880881493037, 6.178265718888737, 5.926916704413545, 9.844210911838786, out id));
                // Step 4
                tree.Insert(6.000000000000000, 5.000000000000000, 7.000000000000000, 3);
                tree.Erase(4.000000000000000, 5.000000000000000, 1.000000000000000);
                Assert.False(tree.Find(2.078907794364654, 2.853017841995236, 1.365741828651300, 8.289349590334504, 2.982741287438363, 8.290008667720018, out id));
                // Step 5
                tree.Insert(2.000000000000000, 0.000000000000000, 1.000000000000000, 4);
                tree.Erase(7.000000000000000, 0.000000000000000, 1.000000000000000);
                Assert.False(tree.Find(6.021189346240058, 9.420310533063425, 2.492876357067710, 2.899456023442339, 2.630830489276081, 3.113931276922040, out id));
                // Step 6
                tree.Erase(6.000000000000000, 5.000000000000000, 7.000000000000000);
                tree.Erase(4.000000000000000, 4.000000000000000, 2.000000000000000);
                Assert.False(tree.Find(3.095439532134350, 6.622395637737052, 4.805246885663691, 7.822439890136481, 0.938639112644708, 9.024945004902921, out id));
                // Step 7
                tree.Insert(4.000000000000000, 5.000000000000000, 1.000000000000000, 5);
                tree.Erase(10.000000000000000, 4.000000000000000, 5.000000000000000);
                Assert.False(tree.Find(1.969067000823932, 9.778862801144165, 2.742329082468315, 5.222319032555384, 1.374331173992909, 6.056493215269883, out id));
                // Step 8
                tree.Insert(7.000000000000000, 3.000000000000000, 3.000000000000000, 6);
                tree.Erase(7.000000000000000, 9.000000000000000, 7.000000000000000);
                Assert.True(tree.Find(1.616437590341160, 8.073918819139909, 1.648774114241165, 7.034354872769365, 2.298953014925337, 4.542821006542316, out id));
                Assert.True((new List<ulong> { 6 }).Contains(id));
                // Step 9
                tree.Insert(2.000000000000000, 5.000000000000000, 7.000000000000000, 7);
                tree.Erase(0.000000000000000, 5.000000000000000, 3.000000000000000);
                Assert.False(tree.Find(1.325120675284264, 7.012420344982812, 0.903594174521473, 2.330853197954266, 2.076376710169074, 9.930135257194602, out id));
                // Step 10
                tree.Insert(2.000000000000000, 4.000000000000000, 6.000000000000000, 8);
                tree.Erase(4.000000000000000, 9.000000000000000, 6.000000000000000);
                Assert.False(tree.Find(3.670932225271550, 6.030276463581966, 1.092958058488909, 5.929869652347408, 2.152049414735658, 3.880131694115768, out id));
                // Step 11
                tree.Erase(2.000000000000000, 4.000000000000000, 6.000000000000000);
                tree.Erase(10.000000000000000, 7.000000000000000, 7.000000000000000);
                Assert.False(tree.Find(3.903184185154517, 6.121891714883281, 4.998944842908454, 9.058447807217560, 1.540731077809095, 4.769702889712586, out id));
                // Step 12
                tree.Insert(0.000000000000000, 10.000000000000000, 7.000000000000000, 9);
                tree.Erase(10.000000000000000, 9.000000000000000, 10.000000000000000);
                Assert.True(tree.Find(0.267070195329513, 3.050033549150547, 0.118232673932688, 7.850790228088481, 2.016155301222059, 8.787212565356924, out id));
                Assert.True((new List<ulong> { 7 }).Contains(id));
                // Step 13
                tree.Erase(2.000000000000000, 0.000000000000000, 1.000000000000000);
                tree.Erase(10.000000000000000, 5.000000000000000, 7.000000000000000);
                Assert.False(tree.Find(7.900347734653169, 8.120370687494500, 5.950404832201340, 8.948919993630115, 0.004322897392013, 7.078215163257047, out id));
                // Step 14
                tree.Erase(7.000000000000000, 3.000000000000000, 3.000000000000000);
                tree.Erase(6.000000000000000, 5.000000000000000, 2.000000000000000);
                Assert.True(tree.Find(0.208361807853376, 3.195748794649995, 2.034261232502329, 8.632686898443419, 5.830095926886979, 7.374903127889035, out id));
                Assert.True((new List<ulong> { 7 }).Contains(id));
                // Step 15
                tree.Insert(0.000000000000000, 3.000000000000000, 0.000000000000000, 10);
                tree.Erase(1.000000000000000, 10.000000000000000, 9.000000000000000);
                Assert.False(tree.Find(5.084117705762269, 6.643480177967199, 0.819686680149867, 9.716866227349101, 3.715268800760390, 5.759893504717963, out id));
                // Step 16
                tree.Insert(6.000000000000000, 5.000000000000000, 9.000000000000000, 11);
                tree.Erase(1.000000000000000, 9.000000000000000, 6.000000000000000);
                Assert.False(tree.Find(3.454882309042320, 6.082866621761058, 0.155738483597055, 9.976989289100262, 3.995207181221252, 5.072610612063295, out id));
                // Step 17
                tree.Insert(4.000000000000000, 6.000000000000000, 6.000000000000000, 12);
                tree.Erase(3.000000000000000, 1.000000000000000, 2.000000000000000);
                Assert.True(tree.Find(3.484728419830667, 4.436835462185763, 5.514540959669993, 7.519752438253126, 2.917570595206635, 6.291099069900098, out id));
                Assert.True((new List<ulong> { 12 }).Contains(id));
                // Step 18
                tree.Insert(0.000000000000000, 2.000000000000000, 6.000000000000000, 13);
                tree.Erase(6.000000000000000, 9.000000000000000, 3.000000000000000);
                Assert.True(tree.Find(2.042888121142756, 7.248994055260925, 3.718235144832952, 6.869341172753709, 3.474836950765391, 8.496110061518253, out id));
                Assert.True((new List<ulong> { 12 }).Contains(id));
                // Step 19
                tree.Erase(0.000000000000000, 2.000000000000000, 6.000000000000000);
                tree.Erase(9.000000000000000, 9.000000000000000, 9.000000000000000);
                Assert.False(tree.Find(0.644938681469235, 8.572355393829952, 2.911058736027841, 4.709970546740384, 4.477012352032425, 9.802164582572125, out id));
                // Step 20
                tree.Insert(5.000000000000000, 8.000000000000000, 6.000000000000000, 14);
                tree.Erase(6.000000000000000, 0.000000000000000, 0.000000000000000);
                Assert.False(tree.Find(3.640796052835728, 3.976674197967540, 0.475401156298952, 1.704453316656015, 2.617097941224340, 4.637364386828734, out id));
                // Step 21
                tree.Erase(6.000000000000000, 5.000000000000000, 9.000000000000000);
                tree.Erase(8.000000000000000, 1.000000000000000, 9.000000000000000);
                Assert.False(tree.Find(2.562100279841427, 3.861303373416947, 5.204210759254617, 6.049749772649118, 4.119588908608728, 6.076137471172993, out id));
                // Step 22
                tree.Erase(4.000000000000000, 5.000000000000000, 1.000000000000000);
                tree.Erase(1.000000000000000, 6.000000000000000, 3.000000000000000);
                Assert.False(tree.Find(4.337715973225658, 9.758712452824197, 1.285267027921783, 5.880835919371274, 3.001200124619023, 8.074625982748380, out id));
                // Step 23
                tree.Insert(3.000000000000000, 3.000000000000000, 8.000000000000000, 15);
                tree.Erase(7.000000000000000, 0.000000000000000, 2.000000000000000);
                Assert.False(tree.Find(2.579269209225466, 8.983874929566353, 2.823226966719474, 6.883309406625488, 4.681122660491912, 4.849231428610175, out id));
                // Step 24
                tree.Erase(2.000000000000000, 5.000000000000000, 7.000000000000000);
                tree.Erase(2.000000000000000, 6.000000000000000, 6.000000000000000);
                Assert.False(tree.Find(8.936287620032276, 9.053461222997793, 5.004058510269481, 8.747932699252701, 4.204920146733961, 9.316684190519153, out id));
                // Step 25
                tree.Erase(0.000000000000000, 3.000000000000000, 0.000000000000000);
                tree.Erase(7.000000000000000, 6.000000000000000, 5.000000000000000);
                Assert.False(tree.Find(3.267530872881628, 3.484821810954120, 1.396815420447888, 3.207284081769279, 0.647387259389705, 7.413424542866482, out id));
                // Step 26
                tree.Insert(7.000000000000000, 9.000000000000000, 10.000000000000000, 16);
                tree.Erase(9.000000000000000, 6.000000000000000, 9.000000000000000);
                Assert.True(tree.Find(1.226765278776628, 9.431949209047271, 5.519881881735288, 9.232268518501494, 2.964180050645732, 7.840228682246537, out id));
                Assert.True((new List<ulong> { 12, 14 }).Contains(id));
                // Step 27
                tree.Erase(7.000000000000000, 9.000000000000000, 10.000000000000000);
                tree.Erase(5.000000000000000, 1.000000000000000, 2.000000000000000);
                Assert.False(tree.Find(4.832282512156846, 6.235865884729032, 3.384182403500597, 9.339168350851267, 0.280807481088807, 1.520633951622029, out id));
                // Step 28
                tree.Insert(2.000000000000000, 6.000000000000000, 0.000000000000000, 17);
                tree.Erase(6.000000000000000, 5.000000000000000, 5.000000000000000);
                Assert.False(tree.Find(6.792875169951953, 9.030668223537525, 2.622419136117818, 4.289678698546302, 1.853601187092236, 4.036273378829510, out id));
                // Step 29
                tree.Insert(1.000000000000000, 8.000000000000000, 3.000000000000000, 18);
                tree.Erase(1.000000000000000, 10.000000000000000, 4.000000000000000);
                Assert.False(tree.Find(4.063519609265503, 4.540837889401734, 5.566414688202053, 6.087680720300838, 2.019936390738004, 2.367959490981573, out id));
                // Step 30
                tree.Insert(0.000000000000000, 4.000000000000000, 4.000000000000000, 19);
                tree.Erase(6.000000000000000, 6.000000000000000, 7.000000000000000);
                Assert.False(tree.Find(6.296962715259598, 6.716904703311547, 1.716631420109296, 3.353972203052669, 1.790037515774093, 9.673740453089763, out id));
                // Step 31
                tree.Erase(5.000000000000000, 8.000000000000000, 6.000000000000000);
                tree.Erase(7.000000000000000, 9.000000000000000, 9.000000000000000);
                Assert.False(tree.Find(3.738467109948684, 4.497352141812170, 0.013428166688356, 0.331153458032128, 3.202897743374026, 6.563668939988832, out id));
                // Step 32
                tree.Erase(4.000000000000000, 6.000000000000000, 6.000000000000000);
                tree.Erase(7.000000000000000, 6.000000000000000, 1.000000000000000);
                Assert.False(tree.Find(8.079430509173189, 9.462674906473856, 3.627392642321798, 7.902792083608033, 1.269398173049526, 3.132598660681736, out id));
                // Step 33
                tree.Insert(2.000000000000000, 3.000000000000000, 5.000000000000000, 20);
                tree.Erase(5.000000000000000, 2.000000000000000, 10.000000000000000);
                Assert.False(tree.Find(0.260778483303967, 3.142104240681891, 3.177970799973523, 5.155922182568805, 9.469950008391162, 9.494251065777760, out id));
                // Step 34
                tree.Erase(1.000000000000000, 9.000000000000000, 9.000000000000000);
                tree.Erase(7.000000000000000, 2.000000000000000, 4.000000000000000);
                Assert.False(tree.Find(0.555853279166352, 4.449923815419126, 1.731341230378000, 9.666772644359963, 6.789544249694037, 7.851430687188213, out id));
                // Step 35
                tree.Insert(10.000000000000000, 6.000000000000000, 2.000000000000000, 21);
                tree.Erase(9.000000000000000, 2.000000000000000, 10.000000000000000);
                Assert.False(tree.Find(1.488083958002382, 9.194550465290801, 2.906129149301424, 3.083679344620267, 6.793535554205023, 7.148198917126852, out id));
                // Step 36
                tree.Insert(10.000000000000000, 4.000000000000000, 7.000000000000000, 22);
                tree.Erase(10.000000000000000, 1.000000000000000, 2.000000000000000);
                Assert.False(tree.Find(3.327951256274390, 9.782753398120915, 2.662276277255975, 9.320177482110935, 8.025929020501007, 8.833437804876990, out id));
                // Step 37
                tree.Erase(10.000000000000000, 6.000000000000000, 2.000000000000000);
                tree.Erase(9.000000000000000, 6.000000000000000, 1.000000000000000);
                Assert.False(tree.Find(3.321895909551343, 5.739626726607543, 8.893171748997805, 9.827221690690152, 1.884254572446965, 8.037234664564240, out id));
                // Step 38
                tree.Insert(6.000000000000000, 8.000000000000000, 10.000000000000000, 23);
                tree.Erase(9.000000000000000, 2.000000000000000, 5.000000000000000);
                Assert.False(tree.Find(4.651639114390992, 7.819368919632154, 3.769134166082295, 8.001916499676270, 0.678189550540323, 8.810895334591354, out id));
                // Step 39
                tree.Erase(3.000000000000000, 3.000000000000000, 8.000000000000000);
                tree.Erase(8.000000000000000, 1.000000000000000, 4.000000000000000);
                Assert.False(tree.Find(4.534401397845148, 8.582238339269953, 5.817039863865180, 9.196561764264056, 0.565331930445530, 9.840889922778992, out id));
                // Step 40
                tree.Erase(2.000000000000000, 6.000000000000000, 0.000000000000000);
                tree.Erase(2.000000000000000, 3.000000000000000, 6.000000000000000);
                Assert.False(tree.Find(0.645480852203911, 2.425881577023371, 5.698721331448475, 8.690239711632374, 6.888525713385505, 9.853462282799750, out id));
                // Step 41
                tree.Insert(5.000000000000000, 5.000000000000000, 9.000000000000000, 24);
                tree.Erase(7.000000000000000, 1.000000000000000, 2.000000000000000);
                Assert.False(tree.Find(4.432782261762717, 5.044127102794457, 0.765681287459286, 2.632587812739555, 1.204341668714374, 9.196038171565867, out id));
                // Step 42
                tree.Erase(5.000000000000000, 5.000000000000000, 9.000000000000000);
                tree.Erase(3.000000000000000, 8.000000000000000, 4.000000000000000);
                Assert.True(tree.Find(1.779950452312831, 2.291387798975952, 1.424147071941039, 7.239199281787708, 2.301391416306529, 9.662268009973031, out id));
                Assert.True((new List<ulong> { 20 }).Contains(id));
                // Step 43
                tree.Erase(1.000000000000000, 8.000000000000000, 3.000000000000000);
                tree.Erase(2.000000000000000, 8.000000000000000, 5.000000000000000);
                Assert.True(tree.Find(1.547253302839726, 9.332053223539610, 1.330324288811163, 9.508650933036588, 3.659897717250949, 8.098493307476886, out id));
                Assert.True((new List<ulong> { 20 }).Contains(id));
                // Step 44
                tree.Erase(10.000000000000000, 4.000000000000000, 7.000000000000000);
                tree.Erase(3.000000000000000, 3.000000000000000, 0.000000000000000);
                Assert.False(tree.Find(0.935402246916516, 5.340211423855462, 0.747846892774356, 8.999811730238239, 6.044014228991595, 9.214970242247993, out id));
                // Step 45
                tree.Insert(0.000000000000000, 5.000000000000000, 9.000000000000000, 25);
                tree.Erase(6.000000000000000, 7.000000000000000, 5.000000000000000);
                Assert.False(tree.Find(3.408959481864777, 4.097624594668341, 5.240213695492679, 6.732717109152432, 9.583921177729401, 9.606131702923429, out id));
                // Step 46
                tree.Insert(5.000000000000000, 6.000000000000000, 3.000000000000000, 26);
                tree.Erase(8.000000000000000, 1.000000000000000, 2.000000000000000);
                Assert.False(tree.Find(3.640985770941123, 9.699698064600380, 2.754294449959800, 8.155493437240187, 8.487637502950244, 8.917994801626799, out id));
                // Step 47
                tree.Erase(6.000000000000000, 8.000000000000000, 10.000000000000000);
                tree.Erase(2.000000000000000, 9.000000000000000, 8.000000000000000);
                Assert.True(tree.Find(0.399068587267847, 6.715189315161004, 4.832827434919166, 9.916540177393466, 2.331258906336863, 8.640205264910328, out id));
                Assert.True((new List<ulong> { 26 }).Contains(id));
                // Step 48
                tree.Insert(10.000000000000000, 3.000000000000000, 2.000000000000000, 27);
                tree.Erase(0.000000000000000, 1.000000000000000, 0.000000000000000);
                Assert.False(tree.Find(1.157008002966278, 2.804803529803995, 3.061169984487263, 5.174105121793517, 1.573519938628525, 6.704773301222665, out id));
                // Step 49
                tree.Insert(5.000000000000000, 3.000000000000000, 0.000000000000000, 28);
                tree.Erase(10.000000000000000, 0.000000000000000, 10.000000000000000);
                Assert.False(tree.Find(8.359803996622244, 9.971482708322233, 0.223091752651067, 6.613786628505048, 3.077897328547082, 3.364329584830096, out id));
                // Step 50
                tree.Erase(2.000000000000000, 3.000000000000000, 5.000000000000000);
                tree.Erase(3.000000000000000, 3.000000000000000, 3.000000000000000);
                Assert.False(tree.Find(1.057531330471749, 5.270675602797922, 4.568045162184029, 8.337739898514432, 6.002307755104045, 6.314694883937135, out id));
                // Step 51
                tree.Insert(1.000000000000000, 9.000000000000000, 3.000000000000000, 29);
                tree.Erase(5.000000000000000, 0.000000000000000, 4.000000000000000);
                Assert.True(tree.Find(3.793544851967306, 8.697534894879221, 1.680661656118991, 9.968484962119259, 1.544427975047159, 3.168783109519748, out id));
                Assert.True((new List<ulong> { 26 }).Contains(id));
                // Step 52
                tree.Insert(5.000000000000000, 3.000000000000000, 2.000000000000000, 30);
                tree.Erase(6.000000000000000, 0.000000000000000, 6.000000000000000);
                Assert.False(tree.Find(8.140828305109746, 9.485405944321025, 1.431275357366326, 1.817274684603434, 1.398943045049219, 2.388263217401304, out id));
                // Step 53
                tree.Erase(1.000000000000000, 9.000000000000000, 3.000000000000000);
                tree.Erase(5.000000000000000, 6.000000000000000, 10.000000000000000);
                Assert.False(tree.Find(0.744876958044668, 8.793709239158785, 6.449224674842809, 8.227683679446452, 6.150304196664237, 9.795510819680915, out id));
                // Step 54
                tree.Insert(1.000000000000000, 8.000000000000000, 8.000000000000000, 31);
                tree.Erase(3.000000000000000, 2.000000000000000, 8.000000000000000);
                Assert.False(tree.Find(3.439781305406661, 8.677937468922515, 0.293318269015770, 5.954938174631805, 4.242750157512949, 6.599058713194958, out id));
                // Step 55
                tree.Erase(5.000000000000000, 3.000000000000000, 2.000000000000000);
                tree.Erase(9.000000000000000, 0.000000000000000, 7.000000000000000);
                Assert.False(tree.Find(3.873819595797863, 4.276598487559575, 2.149256672778346, 4.460130036781795, 3.121662253396012, 9.398382637801587, out id));
                // Step 56
                tree.Erase(0.000000000000000, 10.000000000000000, 7.000000000000000);
                tree.Erase(3.000000000000000, 4.000000000000000, 4.000000000000000);
                Assert.False(tree.Find(3.046084287348969, 9.953180145726115, 0.491130430963542, 2.529139566152670, 9.366187800516700, 9.796755460397137, out id));
                // Step 57
                tree.Insert(10.000000000000000, 1.000000000000000, 8.000000000000000, 32);
                tree.Erase(2.000000000000000, 6.000000000000000, 7.000000000000000);
                Assert.False(tree.Find(0.036507380983950, 8.653052290826375, 3.363136770758425, 4.474106760314704, 9.191698395746881, 9.471656134637850, out id));
                // Step 58
                tree.Insert(7.000000000000000, 9.000000000000000, 5.000000000000000, 33);
                tree.Erase(0.000000000000000, 1.000000000000000, 3.000000000000000);
                Assert.False(tree.Find(2.611987727956845, 3.695848312339034, 0.185165901258540, 2.306591934546057, 4.813903328882142, 5.784033649113290, out id));
                // Step 59
                tree.Erase(5.000000000000000, 6.000000000000000, 3.000000000000000);
                tree.Erase(8.000000000000000, 6.000000000000000, 1.000000000000000);
                Assert.False(tree.Find(0.336825344326916, 1.265033142375732, 7.890446788387844, 8.808178539876421, 0.564750874766790, 2.290094651427882, out id));
                // Step 60
                tree.Insert(1.000000000000000, 1.000000000000000, 6.000000000000000, 34);
                tree.Erase(9.000000000000000, 3.000000000000000, 1.000000000000000);
                Assert.False(tree.Find(0.746471858193180, 4.941470256722418, 3.892789136925527, 7.602402433856682, 2.314554434005128, 5.379258901405619, out id));
                // Step 61
                tree.Erase(1.000000000000000, 8.000000000000000, 8.000000000000000);
                tree.Erase(4.000000000000000, 5.000000000000000, 7.000000000000000);
                Assert.False(tree.Find(5.760803596664431, 9.501598642653379, 3.962589751604849, 4.246470581582190, 2.554422132494611, 5.728784925666492, out id));
                // Step 62
                tree.Insert(5.000000000000000, 1.000000000000000, 0.000000000000000, 35);
                tree.Erase(7.000000000000000, 4.000000000000000, 7.000000000000000);
                Assert.False(tree.Find(0.720061721442931, 7.056115880393872, 6.140843587281942, 9.904432039182344, 6.557812966194607, 9.278040624668245, out id));
                // Step 63
                tree.Insert(1.000000000000000, 7.000000000000000, 10.000000000000000, 36);
                tree.Erase(3.000000000000000, 7.000000000000000, 5.000000000000000);
                Assert.False(tree.Find(4.633729947932159, 8.160751150823868, 0.372971973876935, 7.942360078110707, 5.066865550027701, 7.442725817628926, out id));
                // Step 64
                tree.Erase(5.000000000000000, 1.000000000000000, 0.000000000000000);
                tree.Erase(9.000000000000000, 1.000000000000000, 3.000000000000000);
                Assert.False(tree.Find(1.986020092923901, 3.335153296604530, 3.745046055460747, 4.261169096901655, 4.124356434083211, 4.426477950686230, out id));
                // Step 65
                tree.Insert(8.000000000000000, 9.000000000000000, 8.000000000000000, 37);
                tree.Erase(9.000000000000000, 2.000000000000000, 1.000000000000000);
                Assert.False(tree.Find(2.868838297258069, 6.551102169138543, 0.946136536370805, 7.562424800346258, 4.542128051725841, 8.736083258637436, out id));
                // Step 66
                tree.Insert(4.000000000000000, 8.000000000000000, 10.000000000000000, 38);
                tree.Erase(2.000000000000000, 6.000000000000000, 8.000000000000000);
                Assert.False(tree.Find(4.322268269494938, 7.583982178740158, 0.701724113759824, 3.600558124115292, 4.771391150273584, 7.640596017577929, out id));
                // Step 67
                tree.Insert(8.000000000000000, 4.000000000000000, 4.000000000000000, 39);
                tree.Erase(8.000000000000000, 1.000000000000000, 10.000000000000000);
                Assert.False(tree.Find(9.339788399715843, 9.435164278730257, 4.349969953644165, 4.658250179968989, 1.905590421507791, 9.534222800804177, out id));
                // Step 68
                tree.Erase(1.000000000000000, 1.000000000000000, 6.000000000000000);
                tree.Erase(9.000000000000000, 8.000000000000000, 4.000000000000000);
                Assert.False(tree.Find(3.473605103999071, 8.193257162337487, 7.414028927004877, 9.795061249563886, 0.947763847441445, 1.520480970870762, out id));
                // Step 69
                tree.Insert(8.000000000000000, 7.000000000000000, 7.000000000000000, 40);
                tree.Erase(1.000000000000000, 6.000000000000000, 6.000000000000000);
                Assert.False(tree.Find(3.122766618352863, 5.872657613294666, 1.582838359869918, 6.210633359495157, 0.342701516888629, 2.100767258846327, out id));
                // Step 70
                tree.Erase(5.000000000000000, 3.000000000000000, 0.000000000000000);
                tree.Erase(8.000000000000000, 5.000000000000000, 0.000000000000000);
                Assert.False(tree.Find(1.257190712360756, 7.926409406578707, 4.619548304152676, 8.073170379487136, 1.873576321704851, 8.910952121469544, out id));
                // Step 71
                tree.Erase(0.000000000000000, 5.000000000000000, 9.000000000000000);
                tree.Erase(4.000000000000000, 5.000000000000000, 5.000000000000000);
                Assert.False(tree.Find(5.662940996688440, 6.153929431202503, 1.936209479702692, 9.810636052660399, 8.625841770884076, 8.952720904218751, out id));
                // Step 72
                tree.Erase(8.000000000000000, 4.000000000000000, 4.000000000000000);
                tree.Erase(6.000000000000000, 0.000000000000000, 3.000000000000000);
                Assert.False(tree.Find(0.716545258094387, 5.298878076918106, 0.980325345980282, 1.178717063965558, 5.688779164913994, 7.533570228276335, out id));
                // Step 73
                tree.Insert(7.000000000000000, 5.000000000000000, 6.000000000000000, 41);
                tree.Erase(6.000000000000000, 5.000000000000000, 10.000000000000000);
                Assert.False(tree.Find(8.282837509052690, 9.083420768461135, 4.224988548987288, 5.780982131001874, 5.712495262599830, 7.414479501356407, out id));
                // Step 74
                tree.Insert(1.000000000000000, 3.000000000000000, 5.000000000000000, 42);
                tree.Erase(9.000000000000000, 4.000000000000000, 9.000000000000000);
                Assert.False(tree.Find(0.268776748974875, 1.369044456431340, 3.016650938234218, 6.077324598671437, 2.427842490466317, 4.932546494323457, out id));
                // Step 75
                tree.Erase(8.000000000000000, 7.000000000000000, 7.000000000000000);
                tree.Erase(1.000000000000000, 1.000000000000000, 4.000000000000000);
                Assert.False(tree.Find(3.194034307282813, 6.823585405842132, 3.870449552841256, 6.515434033695314, 0.853438228158526, 4.937551985304928, out id));
                // Step 76
                tree.Erase(7.000000000000000, 9.000000000000000, 5.000000000000000);
                tree.Erase(4.000000000000000, 3.000000000000000, 4.000000000000000);
                Assert.False(tree.Find(0.416131495547050, 2.593177137801011, 4.379843085752432, 5.645868240225661, 2.157278021880535, 7.191902317083786, out id));
                // Step 77
                tree.Insert(2.000000000000000, 9.000000000000000, 5.000000000000000, 43);
                tree.Erase(8.000000000000000, 9.000000000000000, 9.000000000000000);
                Assert.True(tree.Find(3.895935853002359, 9.916532983676358, 3.372181380750967, 9.620237042611562, 3.825279066741243, 6.194363070882003, out id));
                Assert.True((new List<ulong> { 41 }).Contains(id));
                // Step 78
                tree.Erase(8.000000000000000, 9.000000000000000, 8.000000000000000);
                tree.Erase(6.000000000000000, 0.000000000000000, 2.000000000000000);
                Assert.False(tree.Find(0.000007946516253, 3.071454770898421, 2.255695403683780, 4.331339625772339, 1.159717562190917, 3.751939164183855, out id));
                // Step 79
                tree.Insert(5.000000000000000, 5.000000000000000, 0.000000000000000, 44);
                tree.Erase(2.000000000000000, 0.000000000000000, 1.000000000000000);
                Assert.False(tree.Find(2.445301686439919, 8.621045230560815, 6.033946760656109, 8.851936522847852, 1.441122340571588, 5.236488410099403, out id));
                // Step 80
                tree.Insert(0.000000000000000, 8.000000000000000, 7.000000000000000, 45);
                tree.Erase(9.000000000000000, 5.000000000000000, 9.000000000000000);
                Assert.False(tree.Find(0.240819909981644, 2.626134474179662, 1.056670168735959, 6.725154160429980, 9.370181876214202, 9.720360981281933, out id));
                // Step 81
                tree.Erase(0.000000000000000, 4.000000000000000, 4.000000000000000);
                tree.Erase(3.000000000000000, 2.000000000000000, 9.000000000000000);
                Assert.False(tree.Find(7.681819257403840, 7.824545186810404, 0.561127858764588, 8.527357617649692, 6.637937757460510, 7.479575990998781, out id));
                // Step 82
                tree.Erase(10.000000000000000, 1.000000000000000, 8.000000000000000);
                tree.Erase(1.000000000000000, 1.000000000000000, 0.000000000000000);
                Assert.False(tree.Find(3.180792818228160, 8.933446464733480, 3.423062722548478, 8.228408054035439, 2.343046424004634, 5.810724748656652, out id));
                // Step 83
                tree.Insert(9.000000000000000, 10.000000000000000, 10.000000000000000, 46);
                tree.Erase(5.000000000000000, 3.000000000000000, 3.000000000000000);
                Assert.True(tree.Find(0.467513631099472, 2.775583287261507, 2.119600664398580, 5.628582531608910, 3.169848788024214, 9.049044700984361, out id));
                Assert.True((new List<ulong> { 42 }).Contains(id));
                // Step 84
                tree.Erase(10.000000000000000, 3.000000000000000, 2.000000000000000);
                tree.Erase(1.000000000000000, 9.000000000000000, 10.000000000000000);
                Assert.False(tree.Find(2.296143327677428, 4.308062732548267, 4.139192154672180, 5.611062663889367, 2.441103713464225, 4.252427872704593, out id));
                // Step 85
                tree.Insert(1.000000000000000, 7.000000000000000, 4.000000000000000, 47);
                tree.Erase(4.000000000000000, 8.000000000000000, 6.000000000000000);
                Assert.False(tree.Find(9.129309355380697, 9.162350127523144, 0.775516862979975, 3.175934678113751, 1.251236436822561, 7.649904985007260, out id));
                // Step 86
                tree.Erase(4.000000000000000, 8.000000000000000, 10.000000000000000);
                tree.Erase(0.000000000000000, 1.000000000000000, 8.000000000000000);
                Assert.True(tree.Find(1.810370367429639, 2.134071469284295, 4.557143997099267, 9.295454644039715, 2.452632079518172, 7.204152316031776, out id));
                Assert.True((new List<ulong> { 43 }).Contains(id));
                // Step 87
                tree.Erase(0.000000000000000, 8.000000000000000, 7.000000000000000);
                tree.Erase(7.000000000000000, 7.000000000000000, 3.000000000000000);
                Assert.True(tree.Find(0.542916954247046, 2.851515085076448, 2.823465872921689, 9.933536694371055, 0.188742043386161, 7.076420139869311, out id));
                Assert.True((new List<ulong> { 42, 43, 47 }).Contains(id));
                // Step 88
                tree.Insert(1.000000000000000, 0.000000000000000, 1.000000000000000, 48);
                tree.Erase(1.000000000000000, 2.000000000000000, 6.000000000000000);
                Assert.False(tree.Find(7.785991231540833, 9.004682450882456, 4.090869466823682, 5.583284093920550, 3.058378614592431, 3.479245721170988, out id));
                // Step 89
                tree.Insert(4.000000000000000, 5.000000000000000, 5.000000000000000, 49);
                tree.Erase(2.000000000000000, 6.000000000000000, 1.000000000000000);
                Assert.False(tree.Find(3.433081593026985, 7.233608853982898, 2.636445040812097, 5.316519513182794, 1.046416261612558, 1.093093576311881, out id));
                // Step 90
                tree.Insert(4.000000000000000, 3.000000000000000, 8.000000000000000, 50);
                tree.Erase(3.000000000000000, 7.000000000000000, 8.000000000000000);
                Assert.False(tree.Find(0.351541765752064, 9.440642730552316, 0.671251382290016, 4.272294645328082, 2.142911706584698, 2.453100266028999, out id));
                // Step 91
                tree.Insert(6.000000000000000, 4.000000000000000, 6.000000000000000, 51);
                tree.Erase(4.000000000000000, 8.000000000000000, 5.000000000000000);
                Assert.False(tree.Find(5.485559701274035, 8.400928974365332, 4.397026335335399, 4.840842569632898, 1.767306406597299, 4.950087159360653, out id));
                // Step 92
                tree.Erase(1.000000000000000, 0.000000000000000, 1.000000000000000);
                tree.Erase(5.000000000000000, 3.000000000000000, 3.000000000000000);
                Assert.True(tree.Find(0.302377412120470, 3.741422518714258, 0.449538961999741, 4.624473116430730, 4.084949160631643, 5.312718517188818, out id));
                Assert.True((new List<ulong> { 42 }).Contains(id));
                // Step 93
                tree.Insert(0.000000000000000, 9.000000000000000, 8.000000000000000, 52);
                tree.Erase(2.000000000000000, 7.000000000000000, 5.000000000000000);
                Assert.False(tree.Find(6.244306305394649, 7.176055033501977, 1.853324837292574, 4.722908033851397, 3.037999559928267, 8.056694711377954, out id));
                // Step 94
                tree.Insert(7.000000000000000, 7.000000000000000, 8.000000000000000, 53);
                tree.Erase(0.000000000000000, 4.000000000000000, 5.000000000000000);
                Assert.False(tree.Find(0.822640728010879, 7.782238612445039, 7.143520796415643, 7.258162823381779, 7.791707053034483, 9.759134777464539, out id));
                // Step 95
                tree.Erase(1.000000000000000, 3.000000000000000, 5.000000000000000);
                tree.Erase(2.000000000000000, 0.000000000000000, 5.000000000000000);
                Assert.False(tree.Find(7.332643335466043, 9.549516243685620, 2.415144000656533, 3.663715601215534, 5.460175222266300, 9.550205192833847, out id));
                // Step 96
                tree.Insert(8.000000000000000, 0.000000000000000, 0.000000000000000, 54);
                tree.Erase(3.000000000000000, 6.000000000000000, 2.000000000000000);
                Assert.True(tree.Find(1.078324649908912, 5.322349734129795, 6.597142988429456, 9.232502440267062, 3.546612428162177, 8.697341623392470, out id));
                Assert.True((new List<ulong> { 43 }).Contains(id));
                // Step 97
                tree.Insert(10.000000000000000, 3.000000000000000, 9.000000000000000, 55);
                tree.Erase(7.000000000000000, 9.000000000000000, 5.000000000000000);
                Assert.False(tree.Find(4.911387232899448, 6.150116619773548, 4.696729288509615, 8.346585883490903, 7.787999340496203, 8.346846155428356, out id));
                // Step 98
                tree.Erase(5.000000000000000, 5.000000000000000, 0.000000000000000);
                tree.Erase(4.000000000000000, 0.000000000000000, 5.000000000000000);
                Assert.False(tree.Find(4.440228652860162, 5.929573586539560, 2.928222724414623, 7.971996201231656, 0.038653281984579, 2.741989481102979, out id));
                // Step 99
                tree.Erase(0.000000000000000, 9.000000000000000, 8.000000000000000);
                tree.Erase(8.000000000000000, 6.000000000000000, 3.000000000000000);
                Assert.True(tree.Find(3.321920210735417, 7.350317166215254, 0.605544735109450, 5.845082165630399, 2.987178517462172, 9.211763733703901, out id));
                Assert.True((new List<ulong> { 41, 49, 50, 51 }).Contains(id));
                // Step 100
                tree.Erase(9.000000000000000, 10.000000000000000, 10.000000000000000);
                tree.Erase(0.000000000000000, 8.000000000000000, 5.000000000000000);
                Assert.False(tree.Find(4.282777837378169, 7.649181998827936, 0.189901503622525, 2.015497638912633, 4.418666904820794, 9.542870438941190, out id));
                // Step 101
                tree.Erase(1.000000000000000, 7.000000000000000, 4.000000000000000);
                tree.Erase(0.000000000000000, 5.000000000000000, 6.000000000000000);
                Assert.False(tree.Find(1.881694763911494, 8.597554278857034, 5.340731059433916, 6.047180625392485, 4.145863803025316, 8.016794400140920, out id));
                // Step 102
                tree.Insert(9.000000000000000, 1.000000000000000, 7.000000000000000, 56);
                tree.Erase(0.000000000000000, 1.000000000000000, 10.000000000000000);
                Assert.True(tree.Find(5.956866057375354, 6.942690495710382, 1.359317847008306, 7.454322191923840, 4.402352535026295, 8.953601706426202, out id));
                Assert.True((new List<ulong> { 51 }).Contains(id));
                // Step 103
                tree.Insert(2.000000000000000, 9.000000000000000, 6.000000000000000, 57);
                tree.Erase(0.000000000000000, 4.000000000000000, 4.000000000000000);
                Assert.False(tree.Find(1.534230817546901, 3.855441049614596, 0.978319207421947, 2.408439837922263, 0.223369555044552, 9.219672867080998, out id));
                // Step 104
                tree.Erase(4.000000000000000, 3.000000000000000, 8.000000000000000);
                tree.Erase(1.000000000000000, 3.000000000000000, 5.000000000000000);
                Assert.False(tree.Find(4.495842820469194, 5.451265489763161, 2.361969222720694, 7.929480940302628, 3.810982376463548, 7.718136514053020, out id));
                // Step 105
                tree.Erase(2.000000000000000, 9.000000000000000, 5.000000000000000);
                tree.Erase(8.000000000000000, 10.000000000000000, 8.000000000000000);
                Assert.True(tree.Find(6.251173545357242, 8.570654450056127, 2.733696563765926, 9.874329024525924, 3.963273733337821, 7.614909543951081, out id));
                Assert.True((new List<ulong> { 41 }).Contains(id));
                // Step 106
                tree.Insert(6.000000000000000, 2.000000000000000, 4.000000000000000, 58);
                tree.Erase(2.000000000000000, 3.000000000000000, 9.000000000000000);
                Assert.False(tree.Find(4.367091584199868, 5.913615152356876, 5.218476238479175, 9.044580192691537, 1.889582467096310, 3.317735688243508, out id));
                // Step 107
                tree.Erase(7.000000000000000, 5.000000000000000, 6.000000000000000);
                tree.Erase(8.000000000000000, 9.000000000000000, 3.000000000000000);
                Assert.False(tree.Find(3.981124336222170, 7.614181430305092, 1.927435922866547, 5.282938191981281, 1.731242351348085, 3.844988624560062, out id));
                // Step 108
                tree.Insert(2.000000000000000, 8.000000000000000, 5.000000000000000, 59);
                tree.Erase(3.000000000000000, 6.000000000000000, 1.000000000000000);
                Assert.False(tree.Find(2.853024220256775, 9.746918899230442, 8.783821983714880, 9.512192573780759, 4.189206219826557, 8.369556283907722, out id));
                // Step 109
                tree.Erase(6.000000000000000, 4.000000000000000, 6.000000000000000);
                tree.Erase(1.000000000000000, 9.000000000000000, 2.000000000000000);
                Assert.True(tree.Find(1.275164490291621, 5.671638885750859, 4.924428388227842, 8.515023981891128, 1.923960991728334, 6.069194440956858, out id));
                Assert.True((new List<ulong> { 49, 59 }).Contains(id));
                // Step 110
                tree.Insert(5.000000000000000, 3.000000000000000, 10.000000000000000, 60);
                tree.Erase(8.000000000000000, 0.000000000000000, 10.000000000000000);
                Assert.False(tree.Find(4.176131991977648, 7.234094564573458, 7.313792538938646, 8.948297290333709, 1.928950294587108, 4.887775066166840, out id));
                // Step 111
                tree.Insert(7.000000000000000, 5.000000000000000, 3.000000000000000, 61);
                tree.Erase(10.000000000000000, 9.000000000000000, 8.000000000000000);
                Assert.True(tree.Find(6.230640345818559, 9.522784465581104, 2.243203073164818, 7.315721726535744, 7.449798258676088, 9.726278525957119, out id));
                Assert.True((new List<ulong> { 53 }).Contains(id));
                // Step 112
                tree.Erase(4.000000000000000, 5.000000000000000, 5.000000000000000);
                tree.Erase(7.000000000000000, 0.000000000000000, 6.000000000000000);
                Assert.False(tree.Find(0.039650408337357, 2.870797012108235, 2.101095175491590, 3.621450374249386, 3.748748018541739, 8.069290504900614, out id));
                // Step 113
                tree.Erase(5.000000000000000, 3.000000000000000, 10.000000000000000);
                tree.Erase(5.000000000000000, 6.000000000000000, 8.000000000000000);
                Assert.False(tree.Find(5.872391189300437, 6.456130799039805, 0.492996183693297, 4.465669702974776, 1.492281454406810, 3.267875533591268, out id));
                // Step 114
                tree.Insert(3.000000000000000, 10.000000000000000, 3.000000000000000, 62);
                tree.Erase(6.000000000000000, 8.000000000000000, 3.000000000000000);
                Assert.False(tree.Find(8.363875510753115, 8.744592343544777, 4.378388753148262, 6.341282232497056, 3.450091910295518, 9.403879404650366, out id));
                // Step 115
                tree.Erase(8.000000000000000, 0.000000000000000, 0.000000000000000);
                tree.Erase(0.000000000000000, 10.000000000000000, 9.000000000000000);
                Assert.False(tree.Find(7.209193770138801, 9.599193243548703, 4.335642391710580, 7.699630292184578, 8.929554113834495, 9.123079951117621, out id));
                // Step 116
                tree.Insert(3.000000000000000, 10.000000000000000, 7.000000000000000, 63);
                tree.Erase(2.000000000000000, 10.000000000000000, 3.000000000000000);
                Assert.True(tree.Find(2.263321265457666, 6.725178003189298, 0.269116622146429, 6.989376770178357, 3.667250191722990, 9.208465569840156, out id));
                Assert.True((new List<ulong> { 58 }).Contains(id));
                // Step 117
                tree.Insert(0.000000000000000, 7.000000000000000, 4.000000000000000, 64);
                tree.Erase(7.000000000000000, 8.000000000000000, 9.000000000000000);
                Assert.True(tree.Find(2.669484627588262, 9.050532753761876, 1.390213818496596, 9.916452436663217, 3.913787675509115, 7.550281403023203, out id));
                Assert.True((new List<ulong> { 58 }).Contains(id));
                // Step 118
                tree.Insert(0.000000000000000, 3.000000000000000, 2.000000000000000, 65);
                tree.Erase(1.000000000000000, 10.000000000000000, 4.000000000000000);
                Assert.False(tree.Find(3.594832808456816, 7.943988408213150, 4.806850189315846, 9.899116479696524, 0.649227412500785, 1.745544069186297, out id));
                // Step 119
                tree.Erase(9.000000000000000, 1.000000000000000, 7.000000000000000);
                tree.Erase(1.000000000000000, 2.000000000000000, 7.000000000000000);
                Assert.False(tree.Find(3.364094192550190, 9.015776545057633, 3.714434703199865, 5.446951709268669, 4.303826119573896, 6.755406417063238, out id));
                // Step 120
                tree.Insert(2.000000000000000, 5.000000000000000, 3.000000000000000, 66);
                tree.Erase(8.000000000000000, 0.000000000000000, 3.000000000000000);
                Assert.False(tree.Find(7.370173230257523, 9.434643423090275, 3.560321490179571, 4.137218895419296, 4.033866756364310, 4.374233087208397, out id));
                // Step 121
                tree.Insert(7.000000000000000, 3.000000000000000, 7.000000000000000, 67);
                tree.Erase(9.000000000000000, 10.000000000000000, 6.000000000000000);
                Assert.True(tree.Find(2.439575660840866, 9.676932653550603, 4.722269320705180, 7.283685278865455, 1.279459815130487, 4.527614351969687, out id));
                Assert.True((new List<ulong> { 61 }).Contains(id));
                // Step 122
                tree.Insert(8.000000000000000, 6.000000000000000, 8.000000000000000, 68);
                tree.Erase(9.000000000000000, 0.000000000000000, 7.000000000000000);
                Assert.True(tree.Find(3.613672752373973, 8.416350964821030, 1.384477148818735, 3.685546482307772, 2.517462701851945, 9.598212245183479, out id));
                Assert.True((new List<ulong> { 58, 67 }).Contains(id));
                // Step 123
                tree.Insert(10.000000000000000, 4.000000000000000, 10.000000000000000, 69);
                tree.Erase(3.000000000000000, 10.000000000000000, 8.000000000000000);
                Assert.False(tree.Find(2.614470947066589, 9.141157511286440, 5.620195347192976, 6.769212500397447, 5.925217399294889, 7.022015512275751, out id));
                // Step 124
                tree.Insert(1.000000000000000, 9.000000000000000, 2.000000000000000, 70);
                tree.Erase(6.000000000000000, 6.000000000000000, 0.000000000000000);
                Assert.False(tree.Find(4.761017061509401, 7.705464259280044, 3.540741421931481, 4.956281058289255, 4.192528136829888, 4.585078427493907, out id));
                // Step 125
                tree.Insert(3.000000000000000, 3.000000000000000, 0.000000000000000, 71);
                tree.Erase(3.000000000000000, 1.000000000000000, 8.000000000000000);
                Assert.True(tree.Find(6.632541481609360, 7.055240209723657, 4.866589383978165, 6.284243948232511, 0.424356492261461, 9.018527725868260, out id));
                Assert.True((new List<ulong> { 61 }).Contains(id));
                // Step 126
                tree.Insert(5.000000000000000, 9.000000000000000, 0.000000000000000, 72);
                tree.Erase(1.000000000000000, 10.000000000000000, 3.000000000000000);
                Assert.True(tree.Find(0.929679066670994, 9.860182582695970, 2.960219212486037, 8.801148880093198, 2.161961792177362, 8.508284148289205, out id));
                Assert.True((new List<ulong> { 53, 59, 61, 66, 67, 68 }).Contains(id));
                // Step 127
                tree.Erase(7.000000000000000, 5.000000000000000, 3.000000000000000);
                tree.Erase(8.000000000000000, 0.000000000000000, 6.000000000000000);
                Assert.False(tree.Find(2.351150600958183, 6.690651084870409, 3.458318786511779, 5.650363727051738, 4.460138179636570, 8.814436394792073, out id));
                // Step 128
                tree.Erase(5.000000000000000, 9.000000000000000, 0.000000000000000);
                tree.Erase(4.000000000000000, 10.000000000000000, 0.000000000000000);
                Assert.False(tree.Find(3.440833433624327, 7.800247233479787, 2.238252589419617, 5.629167491393392, 4.476029756523352, 5.086391462105669, out id));
                // Step 129
                tree.Erase(3.000000000000000, 3.000000000000000, 0.000000000000000);
                tree.Erase(4.000000000000000, 2.000000000000000, 8.000000000000000);
                Assert.True(tree.Find(0.091231977036235, 9.188536830412664, 0.412324234672377, 9.276861265753601, 5.685152959331373, 6.459346718171086, out id));
                Assert.True((new List<ulong> { 57 }).Contains(id));
                // Step 130
                tree.Erase(1.000000000000000, 7.000000000000000, 10.000000000000000);
                tree.Erase(9.000000000000000, 5.000000000000000, 1.000000000000000);
                Assert.False(tree.Find(5.895061810153416, 6.312410585700881, 1.278700076917069, 8.106156545076702, 4.704528917286169, 7.672926359414067, out id));
                // Step 131
                tree.Insert(7.000000000000000, 5.000000000000000, 5.000000000000000, 73);
                tree.Erase(7.000000000000000, 3.000000000000000, 1.000000000000000);
                Assert.False(tree.Find(3.013259564522544, 5.171113790539121, 5.461113496843416, 5.856227423818652, 5.902076924779661, 9.524056309633743, out id));
                // Step 132
                tree.Insert(5.000000000000000, 10.000000000000000, 4.000000000000000, 74);
                tree.Erase(5.000000000000000, 5.000000000000000, 8.000000000000000);
                Assert.False(tree.Find(0.273215259629498, 0.569388695645882, 1.596648792936862, 4.428592218952848, 5.909337635549572, 6.631187708602853, out id));
                // Step 133
                tree.Erase(10.000000000000000, 3.000000000000000, 9.000000000000000);
                tree.Erase(1.000000000000000, 2.000000000000000, 9.000000000000000);
                Assert.True(tree.Find(4.740431161225458, 7.070783666992297, 0.742867542817893, 8.607668445127297, 0.344720075244321, 7.978016685212886, out id));
                Assert.True((new List<ulong> { 58, 67, 73 }).Contains(id));
                // Step 134
                tree.Erase(2.000000000000000, 5.000000000000000, 3.000000000000000);
                tree.Erase(1.000000000000000, 6.000000000000000, 8.000000000000000);
                Assert.False(tree.Find(1.408851507490271, 4.658188490681015, 0.115827449659573, 5.162662082293786, 2.024446627974295, 3.746890891808445, out id));
                // Step 135
                tree.Erase(2.000000000000000, 9.000000000000000, 6.000000000000000);
                tree.Erase(4.000000000000000, 7.000000000000000, 7.000000000000000);
                Assert.False(tree.Find(9.151876917878637, 9.618222785760613, 3.734412445813440, 5.906159018765781, 4.012651931280522, 5.050126481041049, out id));
                // Step 136
                tree.Erase(7.000000000000000, 7.000000000000000, 8.000000000000000);
                tree.Erase(2.000000000000000, 10.000000000000000, 2.000000000000000);
                Assert.False(tree.Find(8.515741711966513, 9.696926306130440, 4.679654979325234, 6.590213084650869, 0.274294534232196, 5.280592532925667, out id));
                // Step 137
                tree.Insert(7.000000000000000, 10.000000000000000, 1.000000000000000, 75);
                tree.Erase(3.000000000000000, 1.000000000000000, 9.000000000000000);
                Assert.False(tree.Find(2.184124820360049, 5.455650747251278, 4.609101680534082, 5.389426542998916, 1.845214391090279, 5.612713241184522, out id));
                // Step 138
                tree.Erase(0.000000000000000, 7.000000000000000, 4.000000000000000);
                tree.Erase(3.000000000000000, 9.000000000000000, 8.000000000000000);
                Assert.False(tree.Find(4.466300405909173, 7.301739012025614, 5.177731491010001, 7.748307059486381, 7.110466391065850, 9.402844784846099, out id));
                // Step 139
                tree.Erase(6.000000000000000, 2.000000000000000, 4.000000000000000);
                tree.Erase(7.000000000000000, 4.000000000000000, 7.000000000000000);
                Assert.False(tree.Find(1.392662875218191, 3.888947312967991, 2.025634440748489, 8.581206105934710, 7.601406967888949, 9.050053316720795, out id));
                // Step 140
                tree.Insert(5.000000000000000, 6.000000000000000, 5.000000000000000, 76);
                tree.Erase(6.000000000000000, 6.000000000000000, 10.000000000000000);
                Assert.False(tree.Find(2.756881961760316, 4.772660569427529, 2.350586205414431, 7.662057681336191, 1.582852206723063, 5.056414059926918, out id));
                // Step 141
                tree.Erase(7.000000000000000, 3.000000000000000, 7.000000000000000);
                tree.Erase(7.000000000000000, 3.000000000000000, 9.000000000000000);
                Assert.True(tree.Find(2.362028105629403, 8.740837156732255, 1.433220988566930, 8.492861501752330, 3.108614975228352, 9.770450208642597, out id));
                Assert.True((new List<ulong> { 68, 73, 76 }).Contains(id));
                // Step 142
                tree.Insert(5.000000000000000, 5.000000000000000, 7.000000000000000, 77);
                tree.Erase(1.000000000000000, 5.000000000000000, 7.000000000000000);
                Assert.True(tree.Find(7.235586491191663, 9.186804127299874, 1.767436314339919, 6.544400901611224, 0.102683100924457, 9.036373839733766, out id));
                Assert.True((new List<ulong> { 68 }).Contains(id));
                // Step 143
                tree.Insert(1.000000000000000, 5.000000000000000, 3.000000000000000, 78);
                tree.Erase(10.000000000000000, 4.000000000000000, 1.000000000000000);
                Assert.True(tree.Find(0.230678764671886, 8.099844368638102, 2.234307668909095, 5.132465842032857, 1.971223754382458, 4.592882916377431, out id));
                Assert.True((new List<ulong> { 78 }).Contains(id));
                // Step 144
                tree.Insert(5.000000000000000, 8.000000000000000, 2.000000000000000, 79);
                tree.Erase(5.000000000000000, 9.000000000000000, 9.000000000000000);
                Assert.True(tree.Find(5.552646283409634, 9.833296178332077, 1.788338941711054, 7.927398852243288, 4.369400580089463, 6.899678378827118, out id));
                Assert.True((new List<ulong> { 73 }).Contains(id));
                // Step 145
                tree.Insert(9.000000000000000, 2.000000000000000, 9.000000000000000, 80);
                tree.Erase(3.000000000000000, 2.000000000000000, 9.000000000000000);
                Assert.True(tree.Find(2.848204687241155, 6.578431999099873, 5.870597715968247, 9.754700639003900, 0.827330323267740, 3.444241600710699, out id));
                Assert.True((new List<ulong> { 79 }).Contains(id));
                // Step 146
                tree.Insert(8.000000000000000, 3.000000000000000, 2.000000000000000, 81);
                tree.Erase(9.000000000000000, 3.000000000000000, 1.000000000000000);
                Assert.True(tree.Find(2.061182610922598, 6.848084578396604, 1.594765938925778, 6.445777803173317, 6.104770087462471, 7.495890431932163, out id));
                Assert.True((new List<ulong> { 77 }).Contains(id));
                // Step 147
                tree.Insert(2.000000000000000, 4.000000000000000, 0.000000000000000, 82);
                tree.Erase(7.000000000000000, 2.000000000000000, 9.000000000000000);
                Assert.False(tree.Find(5.508549997168172, 9.441714960943834, 3.814671615369552, 4.039312801570434, 5.560086063906709, 8.679890277885063, out id));
                // Step 148
                tree.Erase(7.000000000000000, 5.000000000000000, 5.000000000000000);
                tree.Erase(2.000000000000000, 7.000000000000000, 8.000000000000000);
                Assert.True(tree.Find(4.462833960829407, 9.103251587913155, 2.352084983635752, 5.356801199641314, 3.106990527999967, 7.601704796388180, out id));
                Assert.True((new List<ulong> { 77 }).Contains(id));
                // Step 149
                tree.Insert(10.000000000000000, 1.000000000000000, 9.000000000000000, 83);
                tree.Erase(8.000000000000000, 9.000000000000000, 5.000000000000000);
                Assert.False(tree.Find(3.822716497675538, 6.705587732957627, 8.258772206817635, 8.620046354302605, 1.220031295788241, 8.831617686897532, out id));
                // Step 150
                tree.Erase(8.000000000000000, 3.000000000000000, 2.000000000000000);
                tree.Erase(9.000000000000000, 3.000000000000000, 9.000000000000000);
                Assert.True(tree.Find(2.815967572541481, 6.942401372107366, 5.515166844019845, 7.185441178772756, 3.244920019592143, 5.956587452164755, out id));
                Assert.True((new List<ulong> { 76 }).Contains(id));
                // Step 151
                tree.Insert(9.000000000000000, 5.000000000000000, 1.000000000000000, 84);
                tree.Erase(7.000000000000000, 1.000000000000000, 4.000000000000000);
                Assert.False(tree.Find(5.083065758114868, 9.799095707770677, 1.469027892066559, 2.525770998377310, 5.688481908057273, 7.654521745728230, out id));
                // Step 152
                tree.Erase(5.000000000000000, 8.000000000000000, 2.000000000000000);
                tree.Erase(8.000000000000000, 6.000000000000000, 9.000000000000000);
                Assert.False(tree.Find(1.352674450512394, 9.642208346995734, 0.772674425828080, 4.890980563084963, 0.618318867242377, 2.119728326111079, out id));
                // Step 153
                tree.Erase(10.000000000000000, 1.000000000000000, 9.000000000000000);
                tree.Erase(9.000000000000000, 9.000000000000000, 1.000000000000000);
                Assert.False(tree.Find(2.660743867024873, 2.805090288786784, 5.920687482473682, 6.930619310363031, 6.784340250939404, 9.413642152339326, out id));
                // Step 154
                tree.Erase(5.000000000000000, 10.000000000000000, 4.000000000000000);
                tree.Erase(9.000000000000000, 4.000000000000000, 7.000000000000000);
                Assert.True(tree.Find(0.867632409411639, 7.152793634665599, 0.842133612157566, 5.516182839205350, 5.843904823213003, 8.767506364614237, out id));
                Assert.True((new List<ulong> { 77 }).Contains(id));
                // Step 155
                tree.Erase(2.000000000000000, 4.000000000000000, 0.000000000000000);
                tree.Erase(0.000000000000000, 7.000000000000000, 0.000000000000000);
                Assert.True(tree.Find(4.940473198532210, 9.009426334779320, 1.791637977260909, 5.814595820769165, 0.408315880082478, 1.739353777130352, out id));
                Assert.True((new List<ulong> { 84 }).Contains(id));
                // Step 156
                tree.Erase(3.000000000000000, 10.000000000000000, 7.000000000000000);
                tree.Erase(5.000000000000000, 3.000000000000000, 7.000000000000000);
                Assert.False(tree.Find(3.327850034996026, 5.413919356018252, 7.998108255553420, 9.631658158104576, 4.343869507226876, 8.729884906517903, out id));
                // Step 157
                tree.Erase(9.000000000000000, 5.000000000000000, 1.000000000000000);
                tree.Erase(6.000000000000000, 4.000000000000000, 8.000000000000000);
                Assert.False(tree.Find(0.460507695947994, 5.492648382541039, 6.000954736919208, 6.688473581146694, 1.025918549746518, 8.984093429130111, out id));
                // Step 158
                tree.Insert(7.000000000000000, 0.000000000000000, 9.000000000000000, 85);
                tree.Erase(4.000000000000000, 6.000000000000000, 8.000000000000000);
                Assert.False(tree.Find(5.636148993166426, 8.670572858484606, 7.386409594358238, 9.663832298867748, 5.565427368568080, 5.850381851101999, out id));
                // Step 159
                tree.Insert(9.000000000000000, 8.000000000000000, 5.000000000000000, 86);
                tree.Erase(8.000000000000000, 8.000000000000000, 0.000000000000000);
                Assert.False(tree.Find(6.250414080906390, 7.265685610663869, 2.456451393252840, 8.355477759079058, 0.135287998966853, 4.621829150951294, out id));
                // Step 160
                tree.Erase(5.000000000000000, 5.000000000000000, 7.000000000000000);
                tree.Erase(2.000000000000000, 7.000000000000000, 5.000000000000000);
                Assert.False(tree.Find(7.520544885070183, 7.616393867338943, 2.206200412382159, 4.257262224051201, 2.405177882877764, 3.606017616275695, out id));
                // Step 161
                tree.Insert(8.000000000000000, 2.000000000000000, 8.000000000000000, 87);
                tree.Erase(1.000000000000000, 8.000000000000000, 4.000000000000000);
                Assert.False(tree.Find(3.804470774703669, 5.769448353281383, 2.742861560411858, 3.808972576489980, 0.471750626747195, 1.695291637370144, out id));
                // Step 162
                tree.Insert(8.000000000000000, 1.000000000000000, 2.000000000000000, 88);
                tree.Erase(0.000000000000000, 8.000000000000000, 4.000000000000000);
                Assert.True(tree.Find(3.315581819030911, 7.794211208865071, 5.805961943178964, 8.816245527502762, 4.880346255797084, 5.445685475572092, out id));
                Assert.True((new List<ulong> { 76 }).Contains(id));
                // Step 163
                tree.Insert(4.000000000000000, 2.000000000000000, 5.000000000000000, 89);
                tree.Erase(9.000000000000000, 9.000000000000000, 1.000000000000000);
                Assert.True(tree.Find(4.500552012377874, 6.785802153459670, 0.073923578006807, 9.874480695645200, 1.859979926353809, 7.791330367324517, out id));
                Assert.True((new List<ulong> { 76 }).Contains(id));
                // Step 164
                tree.Insert(2.000000000000000, 5.000000000000000, 8.000000000000000, 90);
                tree.Erase(5.000000000000000, 4.000000000000000, 5.000000000000000);
                Assert.False(tree.Find(2.140958860027191, 3.875943980677373, 3.925291760443045, 9.311512854627710, 6.618077535372608, 9.851839661099728, out id));
                // Step 165
                tree.Erase(1.000000000000000, 5.000000000000000, 3.000000000000000);
                tree.Erase(0.000000000000000, 0.000000000000000, 3.000000000000000);
                Assert.False(tree.Find(0.247090623698727, 9.593615347722505, 2.721677052063826, 9.907958480388009, 8.556620255198311, 9.393448571861974, out id));
                // Step 166
                tree.Insert(6.000000000000000, 1.000000000000000, 4.000000000000000, 91);
                tree.Erase(3.000000000000000, 0.000000000000000, 9.000000000000000);
                Assert.True(tree.Find(7.508623093834269, 9.186762155110159, 3.698485938583898, 9.282310409574752, 2.013898853196171, 9.909009576253812, out id));
                Assert.True((new List<ulong> { 68, 86 }).Contains(id));
                // Step 167
                tree.Erase(8.000000000000000, 6.000000000000000, 8.000000000000000);
                tree.Erase(8.000000000000000, 9.000000000000000, 10.000000000000000);
                Assert.True(tree.Find(1.426200144734208, 9.983677251534912, 0.217197715213626, 4.490170444958896, 0.934890381042304, 7.162035568903768, out id));
                Assert.True((new List<ulong> { 88, 89, 91 }).Contains(id));
                // Step 168
                tree.Erase(8.000000000000000, 2.000000000000000, 8.000000000000000);
                tree.Erase(0.000000000000000, 10.000000000000000, 5.000000000000000);
                Assert.False(tree.Find(4.008745327748118, 4.806264307607774, 0.648004627476073, 1.589814179306399, 6.119801577965129, 6.241547521099456, out id));
                // Step 169
                tree.Insert(9.000000000000000, 7.000000000000000, 4.000000000000000, 92);
                tree.Erase(4.000000000000000, 8.000000000000000, 2.000000000000000);
                Assert.False(tree.Find(6.615982010909697, 7.892244909898664, 1.413334037087095, 5.281283872797404, 0.790446148591465, 9.810181992184704, out id));
                // Step 170
                tree.Erase(9.000000000000000, 8.000000000000000, 5.000000000000000);
                tree.Erase(5.000000000000000, 6.000000000000000, 7.000000000000000);
                Assert.True(tree.Find(0.327396023479561, 2.921222477779211, 4.820858734550905, 8.338502973415675, 5.714288543399821, 9.240495673329995, out id));
                Assert.True((new List<ulong> { 90 }).Contains(id));
                // Step 171
                tree.Insert(10.000000000000000, 1.000000000000000, 4.000000000000000, 93);
                tree.Erase(0.000000000000000, 2.000000000000000, 3.000000000000000);
                Assert.True(tree.Find(4.074467131963322, 5.043711709278424, 3.090876213875191, 8.651187217143951, 1.833751940533781, 8.525752295539780, out id));
                Assert.True((new List<ulong> { 76 }).Contains(id));
                // Step 172
                tree.Insert(9.000000000000000, 3.000000000000000, 4.000000000000000, 94);
                tree.Erase(1.000000000000000, 4.000000000000000, 4.000000000000000);
                Assert.False(tree.Find(2.249486590334437, 3.859727518710660, 1.550033526292793, 5.397586687542068, 0.083005104434480, 0.798753757149954, out id));
                // Step 173
                tree.Erase(2.000000000000000, 8.000000000000000, 5.000000000000000);
                tree.Erase(5.000000000000000, 6.000000000000000, 9.000000000000000);
                Assert.True(tree.Find(4.885543550785875, 7.020169237256280, 0.389346958655653, 7.106194959186908, 0.179567005253731, 6.720852047716944, out id));
                Assert.True((new List<ulong> { 76, 91 }).Contains(id));
                // Step 174
                tree.Insert(0.000000000000000, 7.000000000000000, 4.000000000000000, 95);
                tree.Erase(9.000000000000000, 2.000000000000000, 0.000000000000000);
                Assert.False(tree.Find(2.551737438259495, 3.038289946693491, 7.827099887736509, 8.849429324510188, 7.743327175017189, 8.351513183286436, out id));
                // Step 175
                tree.Insert(8.000000000000000, 9.000000000000000, 7.000000000000000, 96);
                tree.Erase(10.000000000000000, 7.000000000000000, 2.000000000000000);
                Assert.False(tree.Find(1.407054595645627, 5.767772964110308, 3.329851307753505, 9.865883473381240, 5.050278668819937, 5.375310204739519, out id));
                // Step 176
                tree.Erase(0.000000000000000, 3.000000000000000, 2.000000000000000);
                tree.Erase(10.000000000000000, 1.000000000000000, 9.000000000000000);
                Assert.False(tree.Find(6.301608493832330, 7.592210658267157, 1.667590039818713, 6.413805390292414, 5.642321720438459, 5.763945881492385, out id));
                // Step 177
                tree.Insert(2.000000000000000, 2.000000000000000, 1.000000000000000, 97);
                tree.Erase(6.000000000000000, 7.000000000000000, 6.000000000000000);
                Assert.False(tree.Find(1.382026141813586, 2.216954890273489, 5.127937927273242, 5.946408837354475, 1.951711759970900, 4.884262815066686, out id));
                // Step 178
                tree.Insert(7.000000000000000, 3.000000000000000, 2.000000000000000, 98);
                tree.Erase(3.000000000000000, 5.000000000000000, 8.000000000000000);
                Assert.True(tree.Find(2.381767110462649, 9.807404871943881, 2.480895337277475, 9.441306515807749, 2.166967052077677, 6.717700503347896, out id));
                Assert.True((new List<ulong> { 76, 92, 94 }).Contains(id));
                // Step 179
                tree.Erase(3.000000000000000, 10.000000000000000, 3.000000000000000);
                tree.Erase(0.000000000000000, 0.000000000000000, 5.000000000000000);
                Assert.False(tree.Find(0.577761473016990, 1.085039646782749, 4.053893701311973, 4.713634737112100, 2.589544728790358, 6.040908863716036, out id));
                // Step 180
                tree.Erase(7.000000000000000, 3.000000000000000, 2.000000000000000);
                tree.Erase(8.000000000000000, 3.000000000000000, 8.000000000000000);
                Assert.False(tree.Find(1.035223048426503, 1.161995648988204, 2.038956590448702, 3.312177491192900, 3.955884517089274, 7.567059396408869, out id));
                // Step 181
                tree.Erase(1.000000000000000, 9.000000000000000, 2.000000000000000);
                tree.Erase(3.000000000000000, 5.000000000000000, 1.000000000000000);
                Assert.False(tree.Find(0.113323422687843, 4.625291802077483, 1.425477139729813, 1.498064886777436, 1.869942752222472, 6.476921017204377, out id));
                // Step 182
                tree.Erase(2.000000000000000, 5.000000000000000, 8.000000000000000);
                tree.Erase(8.000000000000000, 8.000000000000000, 3.000000000000000);
                Assert.False(tree.Find(1.828344818655738, 6.945724008837474, 3.428324260116919, 6.505991891785218, 6.121472017590140, 7.143239582795662, out id));
                // Step 183
                tree.Erase(5.000000000000000, 6.000000000000000, 5.000000000000000);
                tree.Erase(9.000000000000000, 4.000000000000000, 6.000000000000000);
                Assert.False(tree.Find(0.886982533406669, 3.332115155451564, 3.654231445002907, 7.765234323985065, 4.462219918953259, 5.465267337302984, out id));
                // Step 184
                tree.Erase(8.000000000000000, 1.000000000000000, 2.000000000000000);
                tree.Erase(5.000000000000000, 7.000000000000000, 3.000000000000000);
                Assert.False(tree.Find(4.807586640001014, 6.135790901569258, 2.510066452224296, 2.857248763035090, 1.225695597502885, 4.548285516952152, out id));
                // Step 185
                tree.Erase(0.000000000000000, 7.000000000000000, 4.000000000000000);
                tree.Erase(3.000000000000000, 2.000000000000000, 3.000000000000000);
                Assert.False(tree.Find(0.361820081508595, 4.676482753999103, 3.775664352286126, 7.186367516960010, 8.344628006008131, 9.198341926403728, out id));
                // Step 186
                tree.Erase(9.000000000000000, 7.000000000000000, 4.000000000000000);
                tree.Erase(7.000000000000000, 9.000000000000000, 7.000000000000000);
                Assert.False(tree.Find(6.701587561541791, 7.392737206720091, 1.739779999960736, 8.185104021027120, 4.107779013265027, 7.354404982635340, out id));
                // Step 187
                tree.Erase(2.000000000000000, 2.000000000000000, 1.000000000000000);
                tree.Erase(0.000000000000000, 5.000000000000000, 10.000000000000000);
                Assert.False(tree.Find(4.473595753756258, 4.533823825930742, 3.488397178548306, 7.305807820800014, 4.877418874237240, 6.325717886648182, out id));
                // Step 188
                tree.Insert(8.000000000000000, 0.000000000000000, 1.000000000000000, 99);
                tree.Erase(7.000000000000000, 1.000000000000000, 7.000000000000000);
                Assert.False(tree.Find(1.337647315907708, 3.262188105267495, 3.092822154760579, 8.693005064750391, 1.408812507765175, 4.653278896832322, out id));
                // Step 189
                tree.Insert(1.000000000000000, 9.000000000000000, 8.000000000000000, 100);
                tree.Erase(8.000000000000000, 8.000000000000000, 8.000000000000000);
                Assert.False(tree.Find(3.039325121078003, 7.668563951460094, 3.878761452975352, 4.101135612298384, 1.805446246916047, 2.054033864766284, out id));
                // Step 190
                tree.Erase(9.000000000000000, 2.000000000000000, 9.000000000000000);
                tree.Erase(9.000000000000000, 6.000000000000000, 4.000000000000000);
                Assert.False(tree.Find(2.953227312176777, 3.378494583897643, 0.695520538770105, 2.402728807936125, 6.269224702636572, 9.856274934833248, out id));
                // Step 191
                tree.Insert(9.000000000000000, 10.000000000000000, 7.000000000000000, 101);
                tree.Erase(3.000000000000000, 1.000000000000000, 5.000000000000000);
                Assert.False(tree.Find(4.737174386198781, 6.935713675384977, 1.595843655605534, 1.823333591287095, 6.750319958774032, 8.540117828185601, out id));
                // Step 192
                tree.Insert(1.000000000000000, 1.000000000000000, 6.000000000000000, 102);
                tree.Erase(0.000000000000000, 2.000000000000000, 10.000000000000000);
                Assert.False(tree.Find(1.401878005370270, 2.762960877576233, 0.021772370216340, 6.842205059141014, 2.482063449301106, 7.028530947295847, out id));
                // Step 193
                tree.Insert(8.000000000000000, 10.000000000000000, 10.000000000000000, 103);
                tree.Erase(6.000000000000000, 8.000000000000000, 7.000000000000000);
                Assert.False(tree.Find(0.705256167440941, 3.713340911460493, 6.787119024193684, 8.767744449897600, 3.234476414181067, 4.060262594328838, out id));
                // Step 194
                tree.Insert(3.000000000000000, 2.000000000000000, 10.000000000000000, 104);
                tree.Erase(6.000000000000000, 10.000000000000000, 0.000000000000000);
                Assert.False(tree.Find(1.730805281649834, 4.775737452852744, 6.113778224021953, 7.872251479276762, 3.247592259117080, 5.625626809796557, out id));
                // Step 195
                tree.Erase(9.000000000000000, 10.000000000000000, 7.000000000000000);
                tree.Erase(1.000000000000000, 6.000000000000000, 1.000000000000000);
                Assert.False(tree.Find(2.521603816258443, 5.261894206303785, 6.319333043629364, 9.679134296501337, 2.719901170406583, 6.677179993611185, out id));
                // Step 196
                tree.Insert(2.000000000000000, 1.000000000000000, 2.000000000000000, 105);
                tree.Erase(9.000000000000000, 9.000000000000000, 2.000000000000000);
                Assert.False(tree.Find(2.650751775414887, 8.758993419795173, 6.140328853142472, 7.236624067681099, 1.339315192881562, 9.733697215963327, out id));
                // Step 197
                tree.Erase(1.000000000000000, 9.000000000000000, 8.000000000000000);
                tree.Erase(2.000000000000000, 7.000000000000000, 7.000000000000000);
                Assert.False(tree.Find(7.849719189007375, 8.722557134897786, 1.126998283615679, 7.621156867308613, 5.878524824283289, 8.376605425878726, out id));
                // Step 198
                tree.Insert(0.000000000000000, 0.000000000000000, 5.000000000000000, 106);
                tree.Erase(6.000000000000000, 6.000000000000000, 6.000000000000000);
                Assert.False(tree.Find(3.470964736646196, 7.146435139415310, 1.635027997483652, 9.055762887239590, 1.304484341739246, 4.488850961789957, out id));
                // Step 199
                tree.Insert(1.000000000000000, 3.000000000000000, 5.000000000000000, 107);
                tree.Erase(9.000000000000000, 10.000000000000000, 2.000000000000000);
                Assert.False(tree.Find(7.062596135376714, 9.279402647683080, 0.054175239781751, 5.577512802980845, 9.005417078890702, 9.491369356771420, out id));
                // Step 200
                tree.Insert(10.000000000000000, 6.000000000000000, 0.000000000000000, 108);
                tree.Erase(2.000000000000000, 3.000000000000000, 7.000000000000000);
                Assert.False(tree.Find(3.891965325031259, 8.805588638973578, 4.872508257468718, 8.402385077070896, 5.570609645929184, 7.461704567112641, out id));
            }
        }

        [Fact, Trait("Category", "Examples")]
        public void AdaptiveGridPolygonKeyPointsExample()
        {
            // <example>

            var adaptiveGrid = new AdaptiveGrid();
            var points = new List<Vector3>()
            {
                new Vector3(-6, -4),
                new Vector3(-2, -4),
                new Vector3(3, -4),
                new Vector3(1, 4.5),
                new Vector3(6, 3),
            };
            adaptiveGrid.AddFromPolygon(Polygon.Rectangle(15, 10).TransformedPolygon(
                new Transform(new Vector3(), new Vector3(10, 0, 10))), points);

            // </example>

            WriteToModelWithRandomMaterials(adaptiveGrid, "Elements_Spatial_AdaptiveGrid_AdaptiveGrid");
        }

        [Fact]
        public void AdaptiveGridBboxKeyPointsExample()
        {
            // <example2>

            var adaptiveGrid = new AdaptiveGrid();
            var points = new List<Vector3>()
            {
                new Vector3(-6, -4),
                new Vector3(-2, -4),
                new Vector3(3, -4),
                new Vector3(1, 4.5, 3),
                new Vector3(6, 3, -2),
            };
            adaptiveGrid.AddFromBbox(new BBox3(new Vector3(-7.5, -5, -3), new Vector3(10, 10, 3)), points);

            points = new List<Vector3>()
            {
                new Vector3(-6, -4, 3),
                new Vector3(-2, 0, 3),
                new Vector3(0, 4, 3),
                new Vector3(2, 6, 3)
            };
            var rectangle = Polygon.Rectangle(new Vector3(-10, -5), new Vector3(15, 10));
            adaptiveGrid.AddFromPolygon(rectangle.TransformedPolygon(new Transform(new Vector3(0, 0, 3))), points);
            points = new List<Vector3>()
            {
                new Vector3(-6, -4, 2),
                new Vector3(-2, 0, 2),
                new Vector3(0, 4, 2),
                new Vector3(2, 6, 2)
            };
            adaptiveGrid.AddFromPolygon(rectangle.TransformedPolygon(new Transform(new Vector3(0, 0, 2))), points);

            // </example2>

            WriteToModelWithRandomMaterials(adaptiveGrid, "Elements_Spatial_AdaptiveGrid_AdaptiveGridBboxKeyPoints");
        }

        [Fact]
        public void AdaptiveGridAddVertex()
        {
            var adaptiveGrid = new AdaptiveGrid();
            var points = new List<Vector3>()
            {
                new Vector3(-6, -4),
                new Vector3(-2, -4),
                new Vector3(3, -4),
                new Vector3(1, 4.5, 3),
                new Vector3(6, 3, -2),
            };
            adaptiveGrid.AddFromPolygon(Polygon.Rectangle(15, 10), points);

            ulong id;
            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(-2, -4), out id));
            var oldV = adaptiveGrid.GetVertex(id);
            var edgesBefore = oldV.Edges.Count;

            var newV = adaptiveGrid.AddVertex(new Vector3(-2, -4, 2), new ConnectVertexStrategy(oldV));
            Assert.NotNull(newV);
            Assert.False(newV.Id == 0);
            Assert.Single(newV.Edges);
            Assert.True(newV.Edges.First().StartId == id || newV.Edges.First().EndId == id);
            Assert.Equal(edgesBefore + 1, oldV.Edges.Count());
            Assert.Contains(oldV.Edges, e => e.StartId == newV.Id || e.EndId == newV.Id);
        }

        [Fact]
        public void AdaptiveGridSubtractBoxCutEdges()
        {
            var adaptiveGrid = new AdaptiveGrid();
            var polygon = Polygon.Rectangle(new Vector3(0, 0), new Vector3(10, 10));

            var points = new List<Vector3>();
            for (int i = 1; i < 10; i++)
            {
                points.Add(new Vector3(i, i, 1));
            }

            adaptiveGrid.AddFromExtrude(polygon, Vector3.ZAxis, 2, points);
            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(5, 5, 1), out _));
            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(5, 4.9, 1), out _));

            adaptiveGrid.TryGetVertexIndex(new Vector3(5, 4, 1), out var borderId);
            var borderV = adaptiveGrid.GetVertex(borderId);
            var numEdges = borderV.Edges.Count;
            var numVertices = adaptiveGrid.GetVertices().Count;

            var o = Obstacle.FromBBox(
                new BBox3(new Vector3(4.9, 4.9, 0), new Vector3(5.1, 5.1, 2)));
            adaptiveGrid.SubtractObstacle(o);
            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(5, 5, 1), out _));
            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(5, 4.9, 1), out _));

            Assert.Equal(numEdges - 1, borderV.Edges.Count);
            //On each elevation one vertex is removed and no added
            Assert.Equal(numVertices - (3 * 1), adaptiveGrid.GetVertices().Count);
        }

        [Fact]
        public void AdaptiveGridSubtractBoxAddPerimeter()
        {
            var adaptiveGrid = new AdaptiveGrid();
            var polygon = Polygon.Rectangle(new Vector3(0, 0), new Vector3(10, 10));

            var points = new List<Vector3>();
            for (int i = 1; i < 10; i++)
            {
                points.Add(new Vector3(i, i, 1));
            }

            adaptiveGrid.AddFromExtrude(polygon, Vector3.ZAxis, 2, points);
            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(5, 5, 1), out _));
            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(5, 4.9, 1), out _));

            adaptiveGrid.TryGetVertexIndex(new Vector3(5, 4, 1), out var borderId);
            var borderV = adaptiveGrid.GetVertex(borderId);
            var numEdges = borderV.Edges.Count;
            var numVertices = adaptiveGrid.GetVertices().Count;

            var o = Obstacle.FromBBox(
                new BBox3(new Vector3(4.9, 4.9, 0), new Vector3(5.1, 5.1, 2)),
                addPerimeterEdges: true);
            adaptiveGrid.SubtractObstacle(o);
            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(5, 5, 1), out _));
            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(5, 4.9, 1), out _));

            Assert.Equal(numEdges, borderV.Edges.Count);
            //There are 3 elevations: extrusion is done from 0 to 2 and split points are at  1.
            //On each elevation one vertex is removed and 8 added as box perimeter.
            //TODO: elevations are not connected!!!
            Assert.Equal(numVertices + (3 * 7), adaptiveGrid.GetVertices().Count);
        }

        [Fact]
        public void AdaptiveGridSubtractBoxSmallDifference()
        {
            var edgesNumber = 75;
            var adaptiveGrid = new AdaptiveGrid();
            var polygon = Polygon.Rectangle(new Vector3(-41, -51), new Vector3(-39, -49));

            var points = new List<Vector3>();
            points.Add(new Vector3(-40, -49.9, 1));
            points.Add(new Vector3(-40, -49.80979, 1));

            adaptiveGrid.AddFromExtrude(polygon, Vector3.ZAxis, 2, points);

            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(-40, -49.9, 0), out _));
            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(-40, -49.9, 1), out _));
            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(-40, -49.9, 2), out _));
            Assert.Equal(edgesNumber, adaptiveGrid.GetEdges().Count);

            var o = Obstacle.FromBBox(
                new BBox3(new Vector3(-40.2, -50.190211303259034, 0),
                          new Vector3(-39.8, -49.809788696740966, 2)));
            adaptiveGrid.SubtractObstacle(o);

            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(-40, -49.9, 0), out _));
            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(-40, -49.9, 1), out _));
            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(-40, -49.9, 2), out _));
            Assert.Equal(edgesNumber - 14, adaptiveGrid.GetEdges().Count);
        }

        [Fact]
        public void AdaptiveGridSubtractMisalignedPolygon()
        {
            var boundary = new Polygon(
                new Vector3(-15.0, 49.599999999999994, 0), //TODO: Root cause of an issue, coordinates of boundary vertices are slightly misaligned
                new Vector3(-45.0, 49.6, 0),
                new Vector3(-45.0, 0, 0),
                new Vector3(-15.0, 0, 0));

            var obstacles = new List<Obstacle>
            { 
                //Small box with x-axis aligned edges to subtract
                Obstacle.FromBBox(new BBox3(new Vector3(-30.41029, 19.60979, 0),
                                            new Vector3(-29.58971, 20.39021, 0))),
                //Big box intersecting one of the edges of boundary, it should remove edges and vertices 
                Obstacle.FromBBox(new BBox3(new Vector3(-22.08622, 17.62839, 0),
                                            new Vector3(-8.57565, 38.31022, 0))),
                //Small box with x-axis aligned edges to subtract and no vertices added to grid
                Obstacle.FromBBox(new BBox3(new Vector3(-30.1, 40.79, 0),
                                            new Vector3(-29.7, 41.39021, 0)))
            };

            var points = new List<Vector3>()
            {
                new Vector3(-29.8, 40.540211303259035, 0),
                new Vector3(-30.0, 49.599999999999994, 0),
                new Vector3(-29.8, 41.540211303259035, 0),
                
                //1st BBox vertices
                new Vector3(-30.41029, 19.60979, 0),
                new Vector3(-29.58971, 19.60979, 0),
                new Vector3(-29.58971, 20.39021, 0),
                new Vector3(-30.41029, 20.39021, 0),
                
                //2nd BBox vertices inside polygon
                new Vector3(-22.08622, 17.62839, 0),
                new Vector3(-22.08622, 38.31022, 0)
            };

            var adaptiveGrid = new AdaptiveGrid();
            adaptiveGrid.AddFromPolygon(boundary, points);

            var edgesCount = adaptiveGrid.GetEdges().Count();
            var verticiesCount = adaptiveGrid.GetVertices().Count();

            adaptiveGrid.SubtractObstacles(obstacles);

            Assert.Equal(edgesCount - 9, adaptiveGrid.GetEdges().Count);
            Assert.Equal(verticiesCount - 2, adaptiveGrid.GetVertices().Count);
        }

        [Fact]
        public void AdaptiveGridSubstructRotatedBox()
        {
            var polygon = Polygon.Rectangle(new Vector3(0, 0), new Vector3(10, 10));
            var transfrom = new Transform().Rotated(Vector3.ZAxis, 45);

            var points = new List<Vector3>();
            for (int i = 1; i < 10; i++)
            {
                for (int j = 1; j < 10; j++)
                {
                    points.Add(new Vector3(i, j));
                }
            }

            var adaptiveGrid = new AdaptiveGrid(transfrom);
            adaptiveGrid.AddFromPolygon(polygon, points);

            //Obstacle aligned with adaptive grid transformation.
            //Forms big (3;1) -> (5;3) -> (3;5) -> (1;3) rectangle.
            var bbox = new BBox3(new Vector3(2, 2), new Vector3(4, 4));
            var withoutTransfrom = Obstacle.FromBBox(bbox, addPerimeterEdges: true);
            adaptiveGrid.SubtractObstacle(withoutTransfrom);

            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(3, 3), out _, adaptiveGrid.Tolerance));
            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(3, 2), out _, adaptiveGrid.Tolerance));
            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(3, 4), out _, adaptiveGrid.Tolerance));
            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(2, 3), out _, adaptiveGrid.Tolerance));
            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(4, 3), out _, adaptiveGrid.Tolerance));

            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(2, 2), out var id, adaptiveGrid.Tolerance));
            var v = adaptiveGrid.GetVertex(id);
            Assert.Equal(3, v.Edges.Count);
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(1.5, 2.5), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(2.5, 1.5), adaptiveGrid.Tolerance));

            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(4, 2), out id, adaptiveGrid.Tolerance));
            v = adaptiveGrid.GetVertex(id);
            Assert.Equal(3, v.Edges.Count);
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(3.5, 1.5), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(4.5, 2.5), adaptiveGrid.Tolerance));

            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(4, 4), out id, adaptiveGrid.Tolerance));
            v = adaptiveGrid.GetVertex(id);
            Assert.Equal(3, v.Edges.Count);
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(3.5, 4.5), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(4.5, 3.5), adaptiveGrid.Tolerance));

            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(2, 4), out id, adaptiveGrid.Tolerance));
            v = adaptiveGrid.GetVertex(id);
            Assert.Equal(3, v.Edges.Count);
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(1.5, 3.5), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(2.5, 4.5), adaptiveGrid.Tolerance));

            //Obstacle aligned with global transformation.
            //Forms small (6;6) -> (8;6) -> (8;8) -> (6;8) rectangle.
            bbox = new BBox3(new Vector3(6, 6), new Vector3(8, 8));
            var withTransform = Obstacle.FromBBox(bbox, addPerimeterEdges: true);
            withTransform.Orientation = new Transform();
            adaptiveGrid.SubtractObstacle(withTransform);

            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(7, 7), out _, adaptiveGrid.Tolerance));

            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(6, 6), out id, adaptiveGrid.Tolerance));
            v = adaptiveGrid.GetVertex(id);
            Assert.Equal(5, v.Edges.Count);
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(6, 7), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(5.5, 6.5), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(7, 6), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(6.5, 5.5), adaptiveGrid.Tolerance));

            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(8, 6), out id, adaptiveGrid.Tolerance));
            v = adaptiveGrid.GetVertex(id);
            Assert.Equal(5, v.Edges.Count);
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(7, 6), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(7.5, 5.5), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(8, 7), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(8.5, 6.5), adaptiveGrid.Tolerance));

            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(8, 8), out id, adaptiveGrid.Tolerance));
            v = adaptiveGrid.GetVertex(id);
            Assert.Equal(5, v.Edges.Count);
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(8, 7), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(8.5, 7.5), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(7, 8), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(7.5, 8.5), adaptiveGrid.Tolerance));

            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(6, 8), out id, adaptiveGrid.Tolerance));
            v = adaptiveGrid.GetVertex(id);
            Assert.Equal(5, v.Edges.Count);
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(7, 8), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(6.5, 8.5), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(6, 7), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(5.5, 7.5), adaptiveGrid.Tolerance));

            WriteToModelWithRandomMaterials(adaptiveGrid);
        }

        [Fact]
        public void BrokenSubtractionForMisalignedPolygon()
        {
            var boundaryVerticies = new List<Vector3>
            {
                new Vector3(0.241, -40, 7),
                new Vector3(0.241, -60, 7),
                new Vector3(80, -60.000000000000014, 7),
                new Vector3(80, -40.000000000000014, 7)
            };

            var boundary = new Polygon(boundaryVerticies);

            var grid = new AdaptiveGrid()
            {
                Boundaries = boundary
            };

            grid.AddFromPolygon(boundary, new[] { Vector3.Origin });

            var profile = Polygon.Rectangle(0.2, 0.2);
            var column = new Column(
                new Vector3(0.5, -56.22727272727274),
                10,
                new Line(new Vector3(0.5, -56.22727272727274, 10), new Vector3(0.5, -56.22727272727274, 0)),
                profile);

            var obstacle = Obstacle.FromColumn(column, 0.2, true);
            var result = grid.SubtractObstacle(obstacle);

            Assert.True(result);
            Assert.Equal(8, grid.GetEdges().Count);
            Assert.All(grid.GetVertices(), x => Assert.Equal(2, x.Edges.Count));

            WriteToModelWithRandomMaterials(grid);
        }

        [Theory]
        [MemberData(nameof(GetObstaclesForAllowOutsideBoundaryTest))]
        public void AadaptiveGridSubtractObstacleAllowOutsideBoundaryTest(Obstacle obstacle, bool expectedResult, int additionalVertices, int additionalEdges)
        {
            var boundary = Polygon.Rectangle(20, 40);
            var grid = new AdaptiveGrid { Boundaries = boundary };
            grid.AddFromPolygon(boundary, new List<Vector3> { Vector3.Origin });
            grid.AddVertices(new List<Vector3> { new Vector3(0, 20), new Vector3(0, 50) }, AdaptiveGrid.VerticesInsertionMethod.ConnectAndCut);

            var edgesCount = grid.GetEdges().Count;
            var verticesCount = grid.GetVertices().Count;

            var result = grid.SubtractObstacle(obstacle);

            WriteToModelWithRandomMaterials(grid);

            Assert.Equal(expectedResult, result);
            Assert.Equal(verticesCount + additionalVertices, grid.GetVertices().Count);
            Assert.Equal(edgesCount + additionalEdges, grid.GetEdges().Count);
        }

        public static IEnumerable<object[]> GetObstaclesForAllowOutsideBoundaryTest()
        {
            var profile = Polygon.Rectangle(1, 1);

            //Column outside of boundary and does not intersect with any edge or vertex
            yield return new object[] { Obstacle.FromColumn(new Column(new Vector3(-15, 0), 5, null, profile), 0, true), false, 0, 0 };
            yield return new object[] { Obstacle.FromColumn(new Column(new Vector3(-15, 0), 5, null, profile), 0, true, true), false, 0, 0 };
            //Column intersects with boundary
            yield return new object[] { Obstacle.FromColumn(new Column(new Vector3(-10, 0), 5, null, profile), 0, true), true, 4, 4 };
            yield return new object[] { Obstacle.FromColumn(new Column(new Vector3(-10, 0), 5, null, profile), 0, true, true), true, 6, 7 };
            //Column fully inside in boundary
            yield return new object[] { Obstacle.FromColumn(new Column(Vector3.Origin, 5, null, profile), 0, true), true, 7, 8 };
            yield return new object[] { Obstacle.FromColumn(new Column(Vector3.Origin, 5, null, profile), 0, true, true), true, 7, 8 };
            //Column outside of boundary and intersects with grid edge
            yield return new object[] { Obstacle.FromColumn(new Column(new Vector3(0, 30), 5, null, profile), 0, true), true, 2, 1, };
            yield return new object[] { Obstacle.FromColumn(new Column(new Vector3(0, 30), 5, null, profile), 0, true, true), true, 6, 7 };
            //Column outside of boundary and intersects with grid vertex
            yield return new object[] { Obstacle.FromColumn(new Column(new Vector3(0, 50), 5, null, profile), 0, true), true, 0, 0, };
            yield return new object[] { Obstacle.FromColumn(new Column(new Vector3(0, 50), 5, null, profile), 0, true, true), true, 4, 5 };
        }

        [Fact]
        public void AdaptiveGridLongSectionDoNowThrow()
        {
            var adaptiveGrid = new AdaptiveGrid();
            var polygon = Polygon.Rectangle(new Vector3(0, 0), new Vector3(200000, 10));

            var points = new List<Vector3>();
            points.Add(new Vector3(1, 5));
            points.Add(new Vector3(1999, 5));

            adaptiveGrid.AddFromExtrude(polygon, Vector3.ZAxis, 2, points);
        }

        [Fact]
        public void AdaptiveGridTwoAlignedSections()
        {
            var adaptiveGrid = new AdaptiveGrid();
            var polygon1 = Polygon.Rectangle(new Vector3(0, 0), new Vector3(10, 10));
            var polygon2 = Polygon.Rectangle(new Vector3(10, 2), new Vector3(20, 12));

            var points = new List<Vector3>();
            points.AddRange(polygon1.Vertices);
            points.AddRange(polygon2.Vertices);

            adaptiveGrid.AddFromExtrude(polygon1, Vector3.ZAxis, 2, points);
            adaptiveGrid.AddFromExtrude(polygon2, Vector3.ZAxis, 2, points);

            ulong id;
            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(10, 2), out id));
            var vertex = adaptiveGrid.GetVertex(id);
            //Up, North, South, East, West
            Assert.Equal(5, vertex.Edges.Count);
            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(10, 10), out id));
            vertex = adaptiveGrid.GetVertex(id);
            Assert.Equal(5, vertex.Edges.Count);
        }

        [Fact]
        public void AdaptiveGridDoesntAddTheSameVertex()
        {
            var adaptiveGrid = new AdaptiveGrid();
            var polygon = Polygon.Rectangle(new Vector3(0, 0), new Vector3(10, 10));
            adaptiveGrid.AddFromPolygon(polygon, new List<Vector3>());
            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(0, 10), out var id));
            var vertex = adaptiveGrid.GetVertex(id);
            var halfTol = adaptiveGrid.Tolerance / 2;
            var modified = vertex.Point + new Vector3(0, 0, halfTol);
            adaptiveGrid.TryGetVertexIndex(new Vector3(10, 0), out var otherId);
            var newVertex = adaptiveGrid.AddVertex(modified,
                new ConnectVertexStrategy(adaptiveGrid.GetVertex(otherId)));
            Assert.Equal(id, newVertex.Id);
            modified = vertex.Point + new Vector3(-halfTol, -halfTol, -halfTol);
            adaptiveGrid.TryGetVertexIndex(modified, out otherId, adaptiveGrid.Tolerance);
            Assert.Equal(id, otherId);
        }

        [Fact]
        public void AdaptiveGridAddVertices()
        {
            var grid = new AdaptiveGrid();

            //Just add
            var simpleLine = new Vector3[] { new Vector3(10, 0), new Vector3(20, 0) };
            var added = grid.AddVertices(simpleLine, AdaptiveGrid.VerticesInsertionMethod.Insert);
            Assert.Equal(2, added.Count);
            Assert.True(grid.TryGetVertexIndex(new Vector3(10, 0), out var id0));
            Assert.True(grid.TryGetVertexIndex(new Vector3(20, 0), out var id1));
            var v0 = grid.GetVertex(id0);
            var v1 = grid.GetVertex(id1);
            Assert.Empty(v0.Edges);
            Assert.Empty(v1.Edges);

            //Add and connect
            simpleLine = new Vector3[] { new Vector3(0, 0), new Vector3(2, 0), new Vector3(2, 0), new Vector3(5, 0) };
            added = grid.AddVertices(simpleLine, AdaptiveGrid.VerticesInsertionMethod.Connect);
            //Duplicates are ignored
            Assert.Equal(3, added.Count);
            Assert.True(grid.TryGetVertexIndex(new Vector3(0, 0), out id0));
            Assert.True(grid.TryGetVertexIndex(new Vector3(2, 0), out id1));
            Assert.True(grid.TryGetVertexIndex(new Vector3(5, 0), out var id2));
            v0 = grid.GetVertex(id0);
            v1 = grid.GetVertex(id1);
            var v2 = grid.GetVertex(id2);
            Assert.Single(v0.Edges);
            Assert.Equal(2, v1.Edges.Count);
            Assert.Single(v2.Edges);
            Assert.Equal(v0.Edges.First().OtherVertexId(v0.Id), v1.Id);
            Assert.Equal(v2.Edges.First().OtherVertexId(v2.Id), v1.Id);

            //Add, connect and self intersect
            var singleIntersection = new Vector3[] {
                new Vector3(0, 5),
                new Vector3(5, 5),
                new Vector3(10, 5),
                new Vector3(10, 10),
                new Vector3(8, 10),
                new Vector3(8, 2)
            };
            added = grid.AddVertices(singleIntersection, AdaptiveGrid.VerticesInsertionMethod.ConnectAndSelfIntersect);
            Assert.Equal(8, added.Count); //Single intersection point represented twice.
            Assert.True(grid.TryGetVertexIndex(new Vector3(8, 5), out var id));
            var v = grid.GetVertex(id);
            Assert.Equal(4, v.Edges.Count);
            Assert.True(grid.TryGetVertexIndex(new Vector3(5, 5), out id0));
            Assert.True(grid.TryGetVertexIndex(new Vector3(10, 5), out id1));
            Assert.True(grid.TryGetVertexIndex(new Vector3(8, 10), out id2));
            Assert.True(grid.TryGetVertexIndex(new Vector3(8, 2), out var id3));
            Assert.Contains(v.Edges, e => e.StartId == id0 || e.EndId == id0);
            Assert.Contains(v.Edges, e => e.StartId == id1 || e.EndId == id1);
            Assert.Contains(v.Edges, e => e.StartId == id2 || e.EndId == id2);
            Assert.Contains(v.Edges, e => e.StartId == id3 || e.EndId == id3);

            var douleIntersection = new Vector3[] {
                new Vector3(10, 0),
                new Vector3(20, 0),
                new Vector3(20, 5),
                new Vector3(15, 5),
                new Vector3(15, -5),
                new Vector3(12, -5),
                new Vector3(12, 5),
            };
            added = grid.AddVertices(douleIntersection, AdaptiveGrid.VerticesInsertionMethod.ConnectAndSelfIntersect);
            Assert.Equal(11, added.Count); //Two intersection points represented twice.
            Assert.True(grid.TryGetVertexIndex(new Vector3(15, 0), out id0));
            Assert.True(grid.TryGetVertexIndex(new Vector3(12, 0), out id1));
            v0 = grid.GetVertex(id0);
            v1 = grid.GetVertex(id1);
            Assert.Equal(4, v0.Edges.Count);
            Assert.Equal(4, v1.Edges.Count);
            Assert.Contains(v0.Edges, e => e.StartId == id1 || e.EndId == id1);
            Assert.True(grid.TryGetVertexIndex(new Vector3(10, 0), out id2));
            Assert.True(grid.TryGetVertexIndex(new Vector3(20, 0), out id3));
            v2 = grid.GetVertex(id2);
            var v3 = grid.GetVertex(id3);
            Assert.Single(v2.Edges);
            Assert.Equal(2, v3.Edges.Count);
            Assert.Contains(v2.Edges, e => e.StartId == id1 || e.EndId == id1);
            Assert.Contains(v3.Edges, e => e.StartId == id0 || e.EndId == id0);

            //Add connect and cut
            simpleLine = new Vector3[] { new Vector3(2, 10), new Vector3(2, 0) };
            added = grid.AddVertices(simpleLine, AdaptiveGrid.VerticesInsertionMethod.ConnectAndCut);
            Assert.Equal(3, added.Count);
            Assert.Contains(added, v => v.Point.IsAlmostEqualTo(new Vector3(2, 10)));
            Assert.Contains(added, v => v.Point.IsAlmostEqualTo(new Vector3(2, 5)));
            Assert.Contains(added, v => v.Point.IsAlmostEqualTo(new Vector3(2, 0)));
            Assert.True(grid.TryGetVertexIndex(new Vector3(2, 5), out id0));
            Assert.True(grid.TryGetVertexIndex(new Vector3(2, 0), out id1));
            v0 = grid.GetVertex(id0);
            v1 = grid.GetVertex(id1);
            Assert.Equal(4, v0.Edges.Count);
            Assert.Equal(3, v1.Edges.Count);

            //Add cut and extend.
            grid = new AdaptiveGrid();
            grid.AddFromPolygon(Polygon.Rectangle(new Vector3(0, 0), new Vector3(10, 10)),
                                new List<Vector3> { new Vector3(5, 5) });

            var toExtend = new Vector3[] { new Vector3(1, 5), new Vector3(4, 2), new Vector3(8, 6) };
            added = grid.AddVertices(toExtend, AdaptiveGrid.VerticesInsertionMethod.ConnectCutAndExtend);
            Assert.Equal(8, added.Count);
            Assert.Equal(new Vector3(0, 6), added[0].Point);
            Assert.Equal(new Vector3(1, 5), added[1].Point);
            Assert.Equal(new Vector3(5, 1), added[2].Point);
            Assert.Equal(new Vector3(2, 0), added[3].Point);
            Assert.Equal(new Vector3(4, 2), added[4].Point);
            Assert.Equal(new Vector3(5, 3), added[5].Point);
            Assert.Equal(new Vector3(7, 5), added[6].Point);
            Assert.Equal(new Vector3(10, 8), added[7].Point);
            Assert.Equal(3, added[0].Edges.Count);
            Assert.Equal(4, added[1].Edges.Count);
            Assert.Equal(3, added[2].Edges.Count);
            Assert.Equal(3, added[3].Edges.Count);
            Assert.Equal(4, added[4].Edges.Count);
            Assert.Equal(4, added[5].Edges.Count);
            Assert.Equal(4, added[6].Edges.Count);
            Assert.Equal(3, added[7].Edges.Count);
        }

        [Fact]
        public void AddVerticesWithCustomExtension()
        {
            var grid = new AdaptiveGrid();
            grid.AddFromPolygon(Polygon.Rectangle(new Vector3(0, 0), new Vector3(10, 10)),
                                new List<Vector3> { });

            //Default HintExtendDistance is 3.
            var toExtend = new Vector3[] { new Vector3(1, 3), new Vector3(1, 6) };
            var added = grid.AddVerticesWithCustomExtension(toExtend, grid.HintExtendDistance);
            Assert.Equal(2, added.Count);
            Assert.Equal(new Vector3(1, 0), added[0].Point);
            Assert.Equal(new Vector3(1, 6), added[1].Point);
            Assert.Equal(3, added[0].Edges.Count);
            Assert.Single(added[1].Edges);

            toExtend = new Vector3[] { new Vector3(5, 3), new Vector3(5, 6) };
            added = grid.AddVerticesWithCustomExtension(toExtend, 4);
            Assert.Equal(2, added.Count);
            Assert.Equal(new Vector3(5, 0), added[0].Point);
            Assert.Equal(new Vector3(5, 10), added[1].Point);
            Assert.Equal(3, added[0].Edges.Count);
            Assert.Equal(3, added[1].Edges.Count);

            toExtend = new Vector3[] { new Vector3(8, 3), new Vector3(8, 6) };
            added = grid.AddVerticesWithCustomExtension(toExtend, 2);
            Assert.Equal(2, added.Count);
            Assert.Equal(new Vector3(8, 3), added[0].Point);
            Assert.Equal(new Vector3(8, 6), added[1].Point);
            Assert.Single(added[0].Edges);
            Assert.Single(added[1].Edges);
        }

        [Fact]
        public void AddAngledVerticesWithCustomExtension()
        {
            var grid = new AdaptiveGrid();
            grid.AddFromPolygon(Polygon.Rectangle(new Vector3(0, 0), new Vector3(10, 10)),
                                new List<Vector3> { });

            var toExtend = new Vector3[] { new Vector3(1, 7), new Vector3(2, 8) };
            var added = grid.AddVerticesWithCustomExtension(toExtend, 2);
            Assert.Equal(2, added.Count);
            Assert.Equal(new Vector3(0, 6), added[0].Point);
            Assert.Equal(new Vector3(2, 8), added[1].Point);
            Assert.Equal(3, added[0].Edges.Count);
            Assert.Single(added[1].Edges);
        }

        [Fact]
        public void Add3DVerticesWithCustomExtension()
        {
            var grid = new AdaptiveGrid();
            grid.AddFromPolygon(Polygon.Rectangle(new Vector3(0, 0), new Vector3(10, 10)),
                                new List<Vector3> { new Vector3(2, 2), new Vector3(5, 5), new Vector3(8, 8) });

            var toInsert = new Vector3[] {
                new Vector3(2, 5, 0),
                new Vector3(3, 5, 0),
                new Vector3(4, 5, 1),
                new Vector3(5, 5, 1),
                new Vector3(6, 5, 0),
                new Vector3(7, 5, 0)
            };

            var verticesBefore = grid.GetVertices().Count;
            grid.AddVerticesWithCustomExtension(toInsert, 2);
            //Start point already exist and the last one is snapped.
            Assert.Equal(verticesBefore + 4, grid.GetVertices().Count);

            Assert.True(grid.TryGetVertexIndex(new Vector3(3, 5, 0), out var id, grid.Tolerance));
            var vertex = grid.GetVertex(id);
            Assert.Equal(3, vertex.Edges.Count);
            Assert.Contains(vertex.Edges, e => grid.GetVertex(e.OtherVertexId(id)).Point.IsAlmostEqualTo(new Vector3(4, 5, 1)));
            Assert.Contains(vertex.Edges, e => grid.GetVertex(e.OtherVertexId(id)).Point.IsAlmostEqualTo(new Vector3(2, 5, 0)));
            Assert.Contains(vertex.Edges, e => grid.GetVertex(e.OtherVertexId(id)).Point.IsAlmostEqualTo(new Vector3(5, 5, 0)));

            Assert.True(grid.TryGetVertexIndex(new Vector3(4, 5, 1), out id, grid.Tolerance));
            vertex = grid.GetVertex(id);
            Assert.Equal(2, vertex.Edges.Count);
            Assert.Contains(vertex.Edges, e => grid.GetVertex(e.OtherVertexId(id)).Point.IsAlmostEqualTo(new Vector3(3, 5, 0)));
            Assert.Contains(vertex.Edges, e => grid.GetVertex(e.OtherVertexId(id)).Point.IsAlmostEqualTo(new Vector3(5, 5, 1)));

            Assert.True(grid.TryGetVertexIndex(new Vector3(5, 5, 1), out id, grid.Tolerance));
            vertex = grid.GetVertex(id);
            Assert.Equal(2, vertex.Edges.Count);
            Assert.Contains(vertex.Edges, e => grid.GetVertex(e.OtherVertexId(id)).Point.IsAlmostEqualTo(new Vector3(4, 5, 1)));
            Assert.Contains(vertex.Edges, e => grid.GetVertex(e.OtherVertexId(id)).Point.IsAlmostEqualTo(new Vector3(6, 5, 0)));

            Assert.True(grid.TryGetVertexIndex(new Vector3(6, 5, 0), out id, grid.Tolerance));
            vertex = grid.GetVertex(id);
            Assert.Equal(3, vertex.Edges.Count);
            Assert.Contains(vertex.Edges, e => grid.GetVertex(e.OtherVertexId(id)).Point.IsAlmostEqualTo(new Vector3(5, 5, 1)));
            Assert.Contains(vertex.Edges, e => grid.GetVertex(e.OtherVertexId(id)).Point.IsAlmostEqualTo(new Vector3(5, 5, 0)));
            Assert.Contains(vertex.Edges, e => grid.GetVertex(e.OtherVertexId(id)).Point.IsAlmostEqualTo(new Vector3(8, 5, 0)));
        }

        [Fact]
        public void AdaptiveGridVertexGetEdgeOtherVertexId()
        {
            var grid = SampleGrid();
            var vertex = grid.GetVertex(2);
            Assert.Null(vertex.GetEdge(4));
            Assert.Null(vertex.GetEdge(2));

            var edge = vertex.GetEdge(1);
            Assert.True(edge.OtherVertexId(2) == 1);
            Assert.Throws<ArgumentException>(() => edge.OtherVertexId(3));
            var startVertex = grid.GetVertex(edge.StartId);
            Assert.True(startVertex.Point.IsAlmostEqualTo(new Vector3(0, 0)));
        }

        [Fact]
        public void AdaptiveGridClosestVertex()
        {
            var grid = SampleGrid();
            var closest = grid.ClosestVertex(new Vector3(5, 4));
            Assert.Equal(4u, closest.Id);
        }

        [Fact]
        public void AdaptiveGridClosestEdge()
        {
            var grid = SampleGrid();
            var edge = grid.ClosestEdge(new Vector3(9, 3), out var closest);
            Assert.True(edge.StartId == 3 || edge.StartId == 4);
            Assert.True(edge.EndId == 3 || edge.EndId == 4);
            Assert.Equal(new Vector3(8, 2), closest);
        }

        [Fact]
        public void AdaptiveGridCutEdge()
        {
            var grid = SampleGrid();
            var vertex = grid.GetVertex(1);
            var edge = vertex.GetEdge(4);
            var cut = grid.CutEdge(edge, new Vector3(0, 5));
            Assert.DoesNotContain(edge, vertex.Edges);
            Assert.DoesNotContain(edge, grid.GetEdges());
            Assert.Equal(2, cut.Edges.Count);
            Assert.Contains(cut.Edges, e => e.OtherVertexId(cut.Id) == 1);
            Assert.Contains(cut.Edges, e => e.OtherVertexId(cut.Id) == 4);
        }

        [Fact]
        public void AdaptiveGridEdgeGetVerticesGetLine()
        {
            var grid = SampleGrid();
            var vertexA = grid.GetVertex(1);
            var vertexB = grid.GetVertex(4);
            var edge = vertexA.GetEdge(4);
            var vertices = grid.GetVertices(edge);
            Assert.Equal(2, vertices.Count);
            Assert.Contains(vertices, v => v == vertexA);
            Assert.Contains(vertices, v => v == vertexB);

            var line = grid.GetLine(edge);
            Assert.True(line.Start.IsAlmostEqualTo(vertexA.Point) || line.End.IsAlmostEqualTo(vertexA.Point));
            Assert.True(line.Start.IsAlmostEqualTo(vertexB.Point) || line.End.IsAlmostEqualTo(vertexB.Point));
        }

        [Fact]
        public void AdaptiveGridRemoveVertex()
        {
            var grid = SampleGrid();
            var oldVertexCount = grid.GetVertices().Count;
            var oldEdgeCount = grid.GetEdges().Count;
            var vertex = grid.GetVertex(1);
            var edges = vertex.Edges.ToList();
            var otherVertices = edges.Select(e => grid.GetVertex(e.OtherVertexId(1)));
            grid.RemoveVertex(vertex);
            Assert.DoesNotContain(vertex, grid.GetVertices());
            Assert.Equal(oldVertexCount - 1, grid.GetVertices().Count);
            Assert.Equal(oldEdgeCount - 2, grid.GetEdges().Count);
            foreach (var e in edges)
            {
                Assert.DoesNotContain(e, grid.GetEdges());
                Assert.DoesNotContain(otherVertices, v => v.Edges.Contains(e));
            }
        }

        [Fact]
        public void AdaptiveGridAddEdgeNoCut()
        {
            var grid = SampleGrid();
            var v0 = grid.GetVertex(4);
            var v0ec = v0.Edges.Count;
            var v1 = grid.GetVertex(5);
            var v1ec = v1.Edges.Count;
            var oldVertexCount = grid.GetVertices().Count;
            var oldEdgeCount = grid.GetEdges().Count;
            var newEdges = grid.AddEdge(v0, v1, cut: false);
            Assert.Equal(oldVertexCount, grid.GetVertices().Count);
            Assert.Equal(oldEdgeCount + 1, grid.GetEdges().Count);
            Assert.Equal(v0ec + 1, v0.Edges.Count);
            Assert.Equal(v1ec + 1, v1.Edges.Count);
            Assert.Contains(newEdges.First(), v0.Edges);
            Assert.Contains(newEdges.First(), v1.Edges);
            Assert.True(newEdges.First().StartId == v0.Id);
            Assert.True(newEdges.First().EndId == v1.Id);

            oldEdgeCount = grid.GetEdges().Count;
            var otherEdge = newEdges.First();
            newEdges = grid.AddEdge(new Vector3(4, 3), new Vector3(6, 3), cut: false);
            Assert.Equal(oldVertexCount + 2, grid.GetVertices().Count);
            Assert.Equal(oldEdgeCount + 1, grid.GetEdges().Count);
            v0 = grid.GetVertex(newEdges.First().StartId);
            v1 = grid.GetVertex(newEdges.First().EndId);
            Assert.Equal(new Vector3(4, 3), v0.Point);
            Assert.Equal(new Vector3(6, 3), v1.Point);
            Assert.True(grid.GetLine(otherEdge).Intersects(grid.GetLine(newEdges.First()), out _));
        }

        [Fact]
        public void AdaptiveGridRemoveEdge()
        {
            var grid = SampleGrid();
            var v0 = grid.GetVertex(2);
            var v1 = grid.GetVertex(5);
            var v0ec = v0.Edges.Count;
            var oldVertexCount = grid.GetVertices().Count;
            var oldEdgeCount = grid.GetEdges().Count;
            var edge = v0.GetEdge(v1.Id);
            grid.RemoveEdge(edge);
            Assert.Equal(oldVertexCount - 1, grid.GetVertices().Count);
            Assert.Equal(oldEdgeCount - 1, grid.GetEdges().Count);

            Assert.DoesNotContain(edge, grid.GetEdges());
            Assert.DoesNotContain(v1, grid.GetVertices()); //v1 had only one edge.
            Assert.Contains(v0, grid.GetVertices()); //v0 had two edges
            Assert.Equal(v0ec - 1, v0.Edges.Count);
            Assert.DoesNotContain(edge, v0.Edges);
        }

        [Fact]
        public void AdaptiveGridAddCutEdge()
        {
            var grid = SampleGrid();

            //1. Just intersection.
            var v0 = grid.AddVertex(new Vector3(4, 1));
            var v1 = grid.AddVertex(new Vector3(6, 1));
            var edges = grid.AddEdge(v0.Id, v1.Id);
            Assert.Equal(2, edges.Count);
            var intersectionVertex = grid.GetVertex(edges.First().EndId);
            Assert.Equal(new Vector3(5, 1), intersectionVertex.Point);
            Assert.Equal(4, intersectionVertex.Edges.Count);

            //2. Multiply intersections
            v0 = grid.AddVertex(new Vector3(0, 4));
            v1 = grid.AddVertex(new Vector3(10, 4));
            edges = grid.AddEdge(v0.Id, v1.Id);
            Assert.Equal(3, edges.Count);
            Assert.True(grid.TryGetVertexIndex(new Vector3(4, 4), out var otherId));
            Assert.True(edges.First().StartId == otherId || edges.First().EndId == otherId);
            intersectionVertex = grid.GetVertex(otherId);
            Assert.Equal(4, intersectionVertex.Edges.Count);
            Assert.True(grid.TryGetVertexIndex(new Vector3(6, 4), out otherId));
            Assert.True(edges.Last().StartId == otherId || edges.Last().EndId == otherId);
            intersectionVertex = grid.GetVertex(otherId);
            Assert.Equal(4, intersectionVertex.Edges.Count);

            //3. Miss
            v0 = grid.AddVertex(new Vector3(0, 7));
            v1 = grid.AddVertex(new Vector3(10, 7));
            edges = grid.AddEdge(v0.Id, v1.Id);
            Assert.Single(edges);
            var startVertex = grid.GetVertex(edges.First().StartId);
            var endVertex = grid.GetVertex(edges.First().EndId);
            Assert.Equal(new Vector3(0, 7), startVertex.Point);
            Assert.Equal(new Vector3(10, 7), endVertex.Point);
            Assert.Single(startVertex.Edges);
            Assert.Single(endVertex.Edges);

            //4. In Plane Touch
            v0 = grid.AddVertex(new Vector3(2, 0));
            v1 = grid.AddVertex(new Vector3(2, -5));
            edges = grid.AddEdge(v0.Id, v1.Id);
            Assert.Single(edges);
            startVertex = grid.GetVertex(edges.First().StartId);
            endVertex = grid.GetVertex(edges.First().EndId);
            Assert.Equal(new Vector3(2, 0), startVertex.Point);
            Assert.Equal(3, startVertex.Edges.Count);
            Assert.Single(endVertex.Edges);

            //5. Out Plane Touch
            v0 = grid.AddVertex(new Vector3(8, 0));
            v1 = grid.AddVertex(new Vector3(8, 0, 2));
            edges = grid.AddEdge(v0.Id, v1.Id);
            Assert.Single(edges);
            startVertex = grid.GetVertex(edges.First().StartId);
            Assert.Equal(new Vector3(8, 0), startVertex.Point);
            Assert.Equal(3, startVertex.Edges.Count);
            Assert.Single(endVertex.Edges);

            //6. Inside other edge
            v0 = grid.AddVertex(new Vector3(1, 1));
            v1 = grid.AddVertex(new Vector3(3, 3));
            edges = grid.AddEdge(v0.Id, v1.Id);
            Assert.Single(edges);
            startVertex = grid.GetVertex(edges.First().StartId);
            endVertex = grid.GetVertex(edges.First().EndId);
            Assert.Equal(2, startVertex.Edges.Count);
            Assert.Equal(2, endVertex.Edges.Count);
            var otherEdge = startVertex.Edges.First(e => e.StartId != endVertex.Id && e.EndId != endVertex.Id);
            var otherVertex = grid.GetVertex(otherEdge.StartId == startVertex.Id ? otherEdge.EndId : otherEdge.StartId);
            Assert.Equal(new Vector3(0, 0), otherVertex.Point);
            otherEdge = endVertex.Edges.First(e => e.StartId != startVertex.Id && e.EndId != startVertex.Id);
            otherVertex = grid.GetVertex(otherEdge.StartId == startVertex.Id ? otherEdge.EndId : otherEdge.StartId);
            Assert.Equal(new Vector3(4, 4), otherVertex.Point);

            //7. Overlaps other edges
            v0 = grid.AddVertex(new Vector3(4, 6));
            v1 = grid.AddVertex(new Vector3(11, -1));
            edges = grid.AddEdge(v0.Id, v1.Id);
            Assert.Equal(4, edges.Count);
            Assert.True(grid.TryGetVertexIndex(new Vector3(5, 5), out otherId));
            Assert.True(edges.First().StartId == otherId || edges.First().EndId == otherId);
            endVertex = grid.GetVertex(otherId);
            startVertex = grid.GetVertex(edges.First().StartId == otherId ? edges.First().EndId : edges.First().StartId);
            Assert.Single(startVertex.Edges);
            Assert.Equal(3, endVertex.Edges.Count);
            Assert.True(grid.TryGetVertexIndex(new Vector3(6, 4), out otherId));
            Assert.Contains(endVertex.Edges, e => e.StartId == otherId || e.EndId == otherId);
            otherVertex = grid.GetVertex(otherId);
            Assert.Equal(4, otherVertex.Edges.Count);
            startVertex = grid.GetVertex(edges.Last().StartId);
            endVertex = grid.GetVertex(edges.Last().EndId);
            Assert.Equal(3, startVertex.Edges.Count);
            Assert.Single(endVertex.Edges);
            Assert.Contains(startVertex.Edges, e => e.StartId == otherId || e.EndId == otherId);
            otherVertex = grid.GetVertex(otherId);
            Assert.Equal(new Vector3(6, 4), otherVertex.Point);
        }

        [Fact]
        public void AdaptiveGridAddVertexWithAngle()
        {
            var grid = new AdaptiveGrid();

            //1. Aligned with direction. 0 vertices exist.
            var s = new ConnectVertexWithAngleStrategy(new Vector3(0, 5), new Vector3(0, 1), 45);
            var startVertex = grid.AddVertex(new Vector3(0, 0), s);
            Assert.Null(s.MiddleVertex);
            Assert.Equal(new Vector3(0, 0), startVertex.Point);
            var id00 = startVertex.Id;
            Assert.Equal(new Vector3(0, 5), s.EndVertex.Point);
            var id05 = s.EndVertex.Id;

            //2. Ortho aligned with direction, 1 vertex exist.
            s = new ConnectVertexWithAngleStrategy(new Vector3(0, 0), new Vector3(0, 1), 45);
            startVertex = grid.AddVertex(new Vector3(5, 0), s);
            Assert.Null(s.MiddleVertex);
            Assert.Equal(new Vector3(5, 0), startVertex.Point);
            Assert.Equal(id00, s.EndVertex.Id);
            var id50 = startVertex.Id;

            //3. 0 degree, 2 vertices exist.
            s = new ConnectVertexWithAngleStrategy(new Vector3(5, 0), new Vector3(0, 1), 0);
            startVertex = grid.AddVertex(new Vector3(0, 5), s);
            Assert.Equal(new Vector3(5, 5), s.MiddleVertex.Point);
            Assert.Equal(new Vector3(0, 5), startVertex.Point);
            Assert.Equal(id05, startVertex.Id);
            Assert.Equal(id50, s.EndVertex.Id);

            //4. 90 degrees, 0 vertices exist.
            s = new ConnectVertexWithAngleStrategy(new Vector3(10, 0), new Vector3(0, 1), 90);
            startVertex = grid.AddVertex(new Vector3(15, 5), s);
            Assert.Equal(new Vector3(15, 0), s.MiddleVertex.Point);

            //5. 45 degrees, 1 intersection.
            s = new ConnectVertexWithAngleStrategy(new Vector3(13, -2), new Vector3(1, 0), 45);
            startVertex = grid.AddVertex(new Vector3(10, 5), s);
            Assert.Equal(new Vector3(10, 1), s.MiddleVertex.Point);
            Assert.Equal(45.0, (s.EndVertex.Point - s.MiddleVertex.Point).AngleTo(s.MiddleVertex.Point - startVertex.Point), 3);
            Assert.Contains(s.MiddleVertex.Edges, e =>
                e.StartId != s.MiddleVertex.Id && grid.GetVertex(e.StartId).Point.IsAlmostEqualTo(new Vector3(11, 0)) ||
                e.EndId != s.MiddleVertex.Id && grid.GetVertex(e.EndId).Point.IsAlmostEqualTo(new Vector3(11, 0)));

            //5. 45 degrees, tilted direction.
            s = new ConnectVertexWithAngleStrategy(new Vector3(11, 15), new Vector3(1, 1), 45);
            startVertex = grid.AddVertex(new Vector3(10, 10), s);
            Assert.Equal(new Vector3(11, 11), s.MiddleVertex.Point);
            Assert.Equal(45.0, (s.EndVertex.Point - s.MiddleVertex.Point).AngleTo(s.MiddleVertex.Point - startVertex.Point), 3);

            //6. 1 to 2 ration (26.565 degrees)
            s = new ConnectVertexWithAngleStrategy(new Vector3(15, 5), new Vector3(0, 1), 26.565);
            startVertex = grid.AddVertex(new Vector3(20, 0), s);
            Assert.Equal(new Vector3(17.5, 0), s.MiddleVertex.Point);
            var angle = (s.EndVertex.Point - s.MiddleVertex.Point).AngleTo(s.MiddleVertex.Point - startVertex.Point);
            Assert.True(angle.ApproximatelyEquals(26.565) || angle.ApproximatelyEquals(90 - 26.565));

            //7.  1 to 2 ration (26.565 degrees) full length
            s = new ConnectVertexWithAngleStrategy(new Vector3(20, 0), new Vector3(1, 0), 26.565);
            startVertex = grid.AddVertex(new Vector3(30, 5), s);
            Assert.Null(s.MiddleVertex);
            Assert.Contains(startVertex.Edges, e => e.StartId == s.EndVertex.Id || e.EndId == s.EndVertex.Id);
        }

        [Fact]
        public void AdaptiveGridStoreAndDuplicateElevation()
        {
            AdaptiveGrid grid = new AdaptiveGrid();
            var polygon = Polygon.Rectangle(Vector3.Origin, new Vector3(10, 10));
            grid.AddFromExtrude(polygon, Vector3.ZAxis, 1, new List<Vector3>() { new Vector3(5, 5) });
            grid.AddEdge(new Vector3(0, 5, 1), new Vector3(0, 5, 2), false);
            grid.AddEdge(new Vector3(10, 5, 1), new Vector3(10, 5, 4), false);

            var plane = new Plane(new Vector3(0, 0, 1), Vector3.ZAxis);
            var snapshot = grid.SnapshotEdgesOnPlane(plane);
            Assert.Equal(12, snapshot.Count);

            grid.TryGetVertexIndex(new Vector3(5, 0, 1), out var id, grid.Tolerance);
            grid.RemoveVertex(grid.GetVertex(id));
            var edgesBefore = grid.GetEdges().Count;

            var transform = new Transform(0, 0, 2);
            grid.InsertSnapshot(snapshot, transform);
            Assert.Equal(edgesBefore + 20, grid.GetEdges().Count);

            Assert.True(grid.TryGetVertexIndex(new Vector3(0, 5, 3), out id, grid.Tolerance));
            var v = grid.GetVertex(id);
            Assert.Equal(4, v.Edges.Count);
            var neighbourPoints = v.Edges.Select(e => grid.GetVertex(e.OtherVertexId(v.Id)).Point);
            Assert.Contains(new Vector3(0, 0, 3), neighbourPoints);
            Assert.Contains(new Vector3(0, 10, 3), neighbourPoints);
            Assert.Contains(new Vector3(5, 5, 3), neighbourPoints);
            Assert.Contains(new Vector3(0, 5, 2), neighbourPoints);
            Assert.DoesNotContain(new Vector3(0, 5, 1), neighbourPoints);

            Assert.True(grid.TryGetVertexIndex(new Vector3(5, 0, 3), out id, grid.Tolerance));
            v = grid.GetVertex(id);
            Assert.Equal(3, v.Edges.Count);
            neighbourPoints = v.Edges.Select(e => grid.GetVertex(e.OtherVertexId(v.Id)).Point);
            Assert.Contains(new Vector3(0, 0, 3), neighbourPoints);
            Assert.Contains(new Vector3(10, 0, 3), neighbourPoints);
            Assert.Contains(new Vector3(5, 5, 3), neighbourPoints);
            Assert.DoesNotContain(new Vector3(5, 0, 1), neighbourPoints);

            Assert.True(grid.TryGetVertexIndex(new Vector3(10, 5, 3), out id, grid.Tolerance));
            v = grid.GetVertex(id);
            Assert.Equal(5, v.Edges.Count);
            neighbourPoints = v.Edges.Select(e => grid.GetVertex(e.OtherVertexId(v.Id)).Point);
            Assert.Contains(new Vector3(10, 0, 3), neighbourPoints);
            Assert.Contains(new Vector3(10, 10, 3), neighbourPoints);
            Assert.Contains(new Vector3(5, 5, 3), neighbourPoints);
            Assert.Contains(new Vector3(10, 5, 1), neighbourPoints);
            Assert.Contains(new Vector3(10, 5, 4), neighbourPoints);
        }

        [Fact]
        public void EdgeInfoFlagsTest()
        {
            AdaptiveGrid grid = new AdaptiveGrid();
            var polygon = Polygon.Rectangle(Vector3.Origin, new Vector3(10, 10));
            grid.AddFromPolygon(polygon, new List<Vector3>() { new Vector3(5, 5) });
            grid.AddEdge(Vector3.Origin, new Vector3(0, 0, 5));

            grid.TryGetVertexIndex(Vector3.Origin, out var id0);
            grid.TryGetVertexIndex(new Vector3(0, 0, 5), out var id1);
            grid.TryGetVertexIndex(new Vector3(0, 5), out var id2);

            var verticalEdge = grid.GetVertex(id0).Edges.First(e => e.StartId == id1 || e.EndId == id1);
            var horizontalEdge = grid.GetVertex(id0).Edges.First(e => e.StartId == id2 || e.EndId == id2);
            EdgeInfo verticalEdgeInfo = new EdgeInfo(grid, verticalEdge);
            EdgeInfo horizontalEdgeInfo = new EdgeInfo(grid, horizontalEdge);
            Assert.True(verticalEdgeInfo.HasAnyFlag(EdgeFlags.HasVerticalChange));
            Assert.False(horizontalEdgeInfo.HasAnyFlag(EdgeFlags.HasVerticalChange));

            horizontalEdgeInfo.AddFlags(EdgeFlags.UserDefinedHint2D | EdgeFlags.HasVerticalChange);
            Assert.True(horizontalEdgeInfo.HasAnyFlag(EdgeFlags.HasVerticalChange));
            Assert.True(horizontalEdgeInfo.HasAnyFlag(EdgeFlags.UserDefinedHint2D));
            Assert.False(horizontalEdgeInfo.HasAnyFlag(EdgeFlags.UserDefinedHint3D));
            Assert.True(horizontalEdgeInfo.HasAnyFlag(EdgeFlags.UserDefinedHint2D | EdgeFlags.UserDefinedHint3D));
        }

        //          (4)
        //         /   \
        //        /     \
        //       /       \
        //      /   (5)   \
        //     /     |     \
        //    /      |      \
        //  (1)-----(2)-----(3)
        //
        private AdaptiveGrid SampleGrid()
        {
            AdaptiveGrid grid = new AdaptiveGrid();
            var strip = grid.AddVertices(new Vector3[] {
                new Vector3(0, 0), //1
                new Vector3(5, 0), //2
                new Vector3(10, 0) //3
            }, AdaptiveGrid.VerticesInsertionMethod.Connect);

            grid.AddVertex(new Vector3(5, 5), new ConnectVertexStrategy(strip[0], strip[2]), cut: false); //4
            grid.AddVertex(new Vector3(5, 2), new ConnectVertexStrategy(strip[1]), cut: false); //5
            return grid;
        }

        private void WriteToModelWithRandomMaterials(AdaptiveGrid grid, [CallerMemberName] string memberName = "")
        {
            var random = new Random();
            Name = memberName;
            foreach (var edge in grid.GetEdges())
            {
                Model.AddElement(new ModelCurve(grid.GetLine(edge), material: random.NextMaterial()));
            }
        }
    }
}
