using Elements.Geometry;
using Elements.Serialization.glTF;
using Elements.Spatial.AdaptiveGrid;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using Xunit;

namespace Elements.Tests
{
    public class AdaptiveGridTests : ModelTest
    {
        [Fact]
        public void SegmentTree3dTest()
        {
            var tree = new AdaptiveGrid.SegmentTree3d();
            ulong id;

            // Step 1
            tree.Insert(89.000000000000000, 84.000000000000000, 28.000000000000000, 1);
            Assert.False(tree.Find(21.883358409131827, 57.385841180413586, 56.654177554806338, 60.340717208885962, 77.425840463490474, 96.294478666622567, out id));
            // Step 2
            tree.Insert(9.000000000000000, 74.000000000000000, 16.000000000000000, 2);
            Assert.False(tree.Find(68.903789619264614, 78.977582087001636, 40.881291769518334, 69.339236614726858, 31.142938013501677, 97.848387333166926, out id));
            // Step 3
            tree.Insert(93.000000000000000, 51.000000000000000, 72.000000000000000, 3);
            Assert.False(tree.Find(20.019038736622143, 56.968210522748628, 63.114814420167342, 90.452323175013987, 52.492633934404530, 56.595118771687538, out id));
            // Step 4
            tree.Insert(9.000000000000000, 93.000000000000000, 79.000000000000000, 4);
            Assert.False(tree.Find(34.166327852324464, 77.695330684548679, 25.398102844276771, 41.116336547924860, 24.394272564786256, 34.374552557039863, out id));
            // Step 5
            tree.Erase(89.000000000000000, 84.000000000000000, 28.000000000000000);
            Assert.False(tree.Find(20.789077943646539, 28.530178419952357, 13.657418286513002, 82.893495903345055, 29.827412874383629, 82.900086677200179, out id));
            // Step 6
            tree.Insert(20.000000000000000, 0.000000000000000, 11.000000000000000, 5);
            Assert.False(tree.Find(10.666842462211045, 47.996778056996227, 39.101459787809134, 68.022418207889530, 8.305448509712210, 99.023456358457452, out id));
            // Step 7
            tree.Erase(9.000000000000000, 74.000000000000000, 16.000000000000000);
            Assert.False(tree.Find(13.662775991486352, 25.257839781072278, 18.150708309966291, 25.604423352250581, 11.644555376648569, 64.141781986150647, out id));
            // Step 8
            tree.Insert(49.000000000000000, 12.000000000000000, 79.000000000000000, 6);
            Assert.False(tree.Find(36.040177776954962, 89.092183301919661, 32.530719650759231, 79.074167373195962, 6.912941397605366, 87.460043778204948, out id));
            // Step 9
            tree.Erase(9.000000000000000, 93.000000000000000, 79.000000000000000);
            Assert.False(tree.Find(75.932856293195400, 91.303623451207784, 54.407416488403747, 88.772218776816956, 76.929009411967769, 90.009387562122868, out id));
            // Step 10
            tree.Insert(30.000000000000000, 25.000000000000000, 63.000000000000000, 7);
            Assert.False(tree.Find(49.946542949709119, 71.708428547021825, 8.293853556656739, 99.614014255579917, 55.986616931777668, 89.688333246765580, out id));
            // Step 11
            tree.Erase(30.000000000000000, 25.000000000000000, 63.000000000000000);
            Assert.False(tree.Find(44.163372685264534, 75.525957987887352, 12.702166817684246, 83.635806138961826, 96.168496813293828, 98.861991143563614, out id));
            // Step 12
            tree.Erase(93.000000000000000, 51.000000000000000, 72.000000000000000);
            Assert.True(tree.Find(13.251206752842638, 70.124203449828116, 9.035941745214727, 23.308531979542657, 20.763767101690732, 99.301352571946026, out id));
            Assert.True((new List<ulong> { 6 }).Contains(id));
            // Step 13
            tree.Insert(19.000000000000000, 39.000000000000000, 55.000000000000000, 8);
            Assert.False(tree.Find(31.198791858839890, 40.792344039002970, 29.179317953458160, 61.538462422263471, 20.742190789584026, 74.096724832793299, out id));
            // Step 14
            tree.Insert(4.000000000000000, 7.000000000000000, 19.000000000000000, 9);
            Assert.False(tree.Find(82.464661182707545, 96.831769978032867, 48.933828224520923, 61.218917148832809, 39.031841851545167, 90.584478072175585, out id));
            // Step 15
            tree.Insert(61.000000000000000, 65.000000000000000, 19.000000000000000, 10);
            Assert.False(tree.Find(34.735212506625622, 47.225280583097664, 62.589211674856315, 83.950516202147725, 65.078384449114651, 68.019494099087453, out id));
            // Step 16
            tree.Insert(42.000000000000000, 1.000000000000000, 11.000000000000000, 11);
            Assert.False(tree.Find(78.507902280884807, 87.872125653569228, 7.172366592846668, 20.161553012220590, 16.401560586327179, 66.347220816398362, out id));
            // Step 17
            tree.Insert(53.000000000000000, 42.000000000000000, 76.000000000000000, 12);
            Assert.False(tree.Find(72.582851271995892, 95.988084376180382, 75.075098900478181, 94.663331439958142, 40.616842198935188, 98.850237019738202, out id));
            // Step 18
            tree.Erase(20.000000000000000, 0.000000000000000, 11.000000000000000);
            Assert.True(tree.Find(24.766610460928597, 84.520526468437069, 7.849424021698226, 20.444424601961764, 20.453597866436457, 93.288244856514268, out id));
            Assert.True((new List<ulong> { 6 }).Contains(id));
            // Step 19
            tree.Insert(31.000000000000000, 7.000000000000000, 8.000000000000000, 13);
            Assert.False(tree.Find(50.841177057622687, 65.736449187019034, 66.434801779671986, 97.168662273491009, 8.196866801498670, 57.598935047179637, out id));
            // Step 20
            tree.Erase(53.000000000000000, 42.000000000000000, 76.000000000000000);
            Assert.False(tree.Find(68.962993045085753, 98.160438872695508, 9.892316099911680, 31.463558662264802, 61.173791318331162, 91.164210728522875, out id));
            // Step 21
            tree.Erase(42.000000000000000, 1.000000000000000, 11.000000000000000);
            Assert.False(tree.Find(46.633721899668757, 76.998046783878593, 13.798249810576968, 54.305620869443608, 7.528008071247461, 32.662064789492895, out id));
            // Step 22
            tree.Insert(51.000000000000000, 28.000000000000000, 10.000000000000000, 14);
            Assert.False(tree.Find(18.311742207760240, 99.285146560315695, 12.067023995282899, 52.444030755351548, 73.847949228517635, 85.698461347799920, out id));
            // Step 23
            tree.Insert(84.000000000000000, 70.000000000000000, 83.000000000000000, 15);
            Assert.False(tree.Find(0.058385840143405, 40.846038162283435, 20.966107550478586, 98.819858292743817, 21.779696438386587, 23.826279768216242, out id));
            // Step 24
            tree.Erase(31.000000000000000, 7.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(34.748369507653912, 84.961100615182531, 31.738314545524315, 71.965104048067559, 73.940694196885346, 79.928169829466313, out id));
            // Step 25
            tree.Insert(78.000000000000000, 75.000000000000000, 8.000000000000000, 16);
            Assert.False(tree.Find(45.261165393319381, 45.684015222717719, 57.304123029274081, 96.242085450140422, 61.177283290940878, 97.548990285173971, out id));
            // Step 26
            tree.Insert(96.000000000000000, 70.000000000000000, 49.000000000000000, 17);
            Assert.False(tree.Find(5.307567415883696, 43.407017756267919, 43.229793792620384, 58.474254879414730, 16.436349201006017, 30.870182939205559, out id));
            // Step 27
            tree.Erase(84.000000000000000, 70.000000000000000, 83.000000000000000);
            Assert.False(tree.Find(52.477602707777180, 57.109767442785461, 60.442473930276940, 90.979795728405861, 58.987582925688450, 84.684805859722445, out id));
            // Step 28
            tree.Insert(52.000000000000000, 77.000000000000000, 81.000000000000000, 18);
            Assert.False(tree.Find(7.542393945124926, 41.195889086087277, 75.336232101692062, 95.043897797222485, 23.346780563720760, 93.214554620263272, out id));
            // Step 29
            tree.Erase(78.000000000000000, 75.000000000000000, 8.000000000000000);
            Assert.False(tree.Find(12.852670279217826, 58.808359193712732, 30.012001246190234, 80.746259827483797, 19.711041630955183, 45.485750927398392, out id));
            // Step 30
            tree.Insert(60.000000000000000, 7.000000000000000, 17.000000000000000, 19);
            Assert.False(tree.Find(25.792692092254665, 89.838749295663533, 28.232269667194743, 68.833094066254873, 46.811226604919121, 48.492314286101760, out id));
            // Step 31
            tree.Erase(4.000000000000000, 7.000000000000000, 19.000000000000000);
            Assert.False(tree.Find(16.551550307547370, 42.516225889420433, 89.362876200322759, 90.534612229977924, 50.040585102694813, 87.479326992527007, out id));
            // Step 32
            tree.Insert(58.000000000000000, 35.000000000000000, 40.000000000000000, 20);
            Assert.False(tree.Find(47.598281824410627, 76.454109938334369, 32.675308728816276, 34.848218109541193, 13.968154204478878, 32.072840817692793, out id));
            // Step 33
            tree.Insert(8.000000000000000, 90.000000000000000, 61.000000000000000, 21);
            Assert.False(tree.Find(48.574812482519036, 48.694489612016277, 64.623992101857226, 75.268543485027095, 43.447990681918057, 96.899082938251141, out id));
            // Step 34
            tree.Insert(44.000000000000000, 61.000000000000000, 70.000000000000000, 22);
            Assert.True(tree.Find(17.805950927751411, 49.948750657154619, 7.315641694985975, 76.108051701268138, 7.551094889425003, 69.352817032399400, out id));
            Assert.True((new List<ulong> { 8 }).Contains(id));
            // Step 35
            tree.Insert(17.000000000000000, 79.000000000000000, 14.000000000000000, 23);
            Assert.False(tree.Find(33.841824035005970, 48.322825121568457, 2.808074810888073, 93.391683508512685, 15.206339516220291, 54.349422978609638, out id));
            // Step 36
            tree.Erase(49.000000000000000, 12.000000000000000, 79.000000000000000);
            Assert.False(tree.Find(39.389141914624638, 82.306106165458473, 12.850029527610173, 33.757938372393561, 18.985650262957709, 87.688816534162981, out id));
            // Step 37
            tree.Insert(51.000000000000000, 31.000000000000000, 78.000000000000000, 24);
            Assert.True(tree.Find(6.377537445584169, 18.099710271526071, 18.835188284314274, 86.141951770652256, 10.545137310344820, 86.197498407913002, out id));
            Assert.True((new List<ulong> { 23 }).Contains(id));
            // Step 38
            tree.Insert(58.000000000000000, 60.000000000000000, 52.000000000000000, 25);
            Assert.True(tree.Find(25.563079572296189, 96.390636680008072, 30.693752495047409, 50.681821407372972, 28.755833073414671, 68.580773251791300, out id));
            Assert.True((new List<ulong> { 20 }).Contains(id));
            // Step 39
            tree.Erase(52.000000000000000, 77.000000000000000, 81.000000000000000);
            Assert.False(tree.Find(26.786731483238757, 42.717191385412065, 62.969627152595976, 69.027908483623591, 33.539722030526690, 67.169047033115476, out id));
            // Step 40
            tree.Erase(44.000000000000000, 61.000000000000000, 70.000000000000000);
            Assert.False(tree.Find(0.166086465755244, 17.900375157740932, 24.641643068459761, 60.957622967395686, 37.384671099486845, 44.973521418121699, out id));
            // Step 41
            tree.Erase(19.000000000000000, 39.000000000000000, 55.000000000000000);
            Assert.False(tree.Find(80.241165548778895, 81.319889170204760, 24.694695474558248, 45.331742071047799, 49.577652983459885, 73.565507771377554, out id));
            // Step 42
            tree.Insert(82.000000000000000, 46.000000000000000, 40.000000000000000, 26);
            Assert.False(tree.Find(49.725455140277596, 87.140582885766250, 23.600963008073350, 29.242047776669523, 17.241014292892377, 88.620245730198349, out id));
            // Step 43
            tree.Erase(61.000000000000000, 65.000000000000000, 19.000000000000000);
            Assert.False(tree.Find(4.227887478166981, 55.403444407729118, 10.891862920988427, 71.102697362747037, 20.942688801400934, 43.998428505898943, out id));
            // Step 44
            tree.Insert(94.000000000000000, 35.000000000000000, 56.000000000000000, 27);
            Assert.False(tree.Find(42.310575524817494, 42.786464881588017, 14.185463477032679, 63.340597574917425, 33.493984088982579, 83.838806062157772, out id));
            // Step 45
            tree.Insert(81.000000000000000, 50.000000000000000, 16.000000000000000, 28);
            Assert.False(tree.Find(69.558794767629706, 69.802976097507610, 80.665363508706051, 82.241243625834329, 14.880839580023819, 91.945504652907999, out id));
            // Step 46
            tree.Erase(8.000000000000000, 90.000000000000000, 61.000000000000000);
            Assert.False(tree.Find(16.938100542738944, 79.488263040299373, 44.112901303589759, 71.726190656585061, 67.750055563935945, 93.490630931672854, out id));
            // Step 47
            tree.Erase(96.000000000000000, 70.000000000000000, 49.000000000000000);
            Assert.False(tree.Find(13.177937253024673, 46.800688902136024, 62.056905974617315, 65.118944594277252, 32.415951641345686, 82.209106447803805, out id));
            // Step 48
            tree.Erase(51.000000000000000, 28.000000000000000, 10.000000000000000);
            Assert.False(tree.Find(40.057076597180618, 41.558389079848482, 33.218959095513434, 57.396267266075427, 88.931717489978055, 98.272216906901505, out id));
            // Step 49
            tree.Insert(24.000000000000000, 98.000000000000000, 60.000000000000000, 29);
            Assert.False(tree.Find(50.030065796593760, 50.187462131575892, 14.819361509674088, 56.786721016465314, 46.516391143909921, 78.193689196321543, out id));
            // Step 50
            tree.Insert(48.000000000000000, 55.000000000000000, 44.000000000000000, 30);
            Assert.True(tree.Find(6.781895505403234, 37.646547013122515, 55.894222779482291, 79.487758935981432, 7.915452644619492, 25.409023801565269, out id));
            Assert.True((new List<ulong> { 23 }).Contains(id));
            // Step 51
            tree.Erase(58.000000000000000, 35.000000000000000, 40.000000000000000);
            Assert.True(tree.Find(58.170398638651797, 91.965617642640566, 5.653319304455295, 98.408899227789917, 27.637454281532126, 93.306008864857532, out id));
            Assert.True((new List<ulong> { 26 }).Contains(id));
            // Step 52
            tree.Erase(81.000000000000000, 50.000000000000000, 16.000000000000000);
            Assert.False(tree.Find(6.454808522039112, 24.258815770233710, 56.987213314484755, 86.902397116323741, 68.885257133855049, 98.534622827997509, out id));
            // Step 53
            tree.Insert(100.000000000000000, 42.000000000000000, 45.000000000000000, 31);
            Assert.True(tree.Find(47.425568177812551, 61.993213548670290, 15.168913039027320, 38.924931365559026, 27.749002921029010, 94.802945164269303, out id));
            Assert.True((new List<ulong> { 24 }).Contains(id));
            // Step 54
            tree.Insert(32.000000000000000, 32.000000000000000, 86.000000000000000, 32);
            Assert.False(tree.Find(74.222677359842081, 87.313030436203604, 72.217827158108378, 77.826072688086526, 27.269228680428149, 56.620004943861645, out id));
            // Step 55
            tree.Erase(24.000000000000000, 98.000000000000000, 60.000000000000000);
            Assert.True(tree.Find(23.013914163065287, 72.391992817877082, 9.002086947991373, 96.622680099730303, 16.175766089619291, 93.125006424409307, out id));
            Assert.True((new List<ulong> { 24, 25, 30, 32 }).Contains(id));
            // Step 56
            tree.Erase(94.000000000000000, 35.000000000000000, 56.000000000000000);
            Assert.True(tree.Find(15.472533028397262, 93.320532235396087, 13.303242888111633, 95.086509330365885, 36.598977172509493, 80.984933074768861, out id));
            Assert.True((new List<ulong> { 24, 25, 26, 30 }).Contains(id));
            // Step 57
            tree.Erase(32.000000000000000, 32.000000000000000, 86.000000000000000);
            Assert.False(tree.Find(1.861694853023543, 23.679829556187194, 43.472297545362025, 43.495252053097055, 8.400338068590440, 28.603255690259498, out id));
            // Step 58
            tree.Insert(100.000000000000000, 76.000000000000000, 19.000000000000000, 33);
            Assert.False(tree.Find(5.205420325925347, 36.278204335989713, 33.643421090962335, 41.352479507923690, 32.933057353568032, 64.999477210656821, out id));
            // Step 59
            tree.Insert(46.000000000000000, 74.000000000000000, 26.000000000000000, 34);
            Assert.False(tree.Find(33.374728586713431, 49.133646888103257, 7.930462689732176, 23.550834136255403, 15.167192347325232, 65.166603300048834, out id));
            // Step 60
            tree.Insert(42.000000000000000, 22.000000000000000, 7.000000000000000, 35);
            Assert.False(tree.Find(31.136013401563677, 44.357329711282588, 84.925440467699119, 85.377973259680289, 59.531969534695484, 85.108919321528106, out id));
            // Step 61
            tree.Insert(85.000000000000000, 38.000000000000000, 61.000000000000000, 36);
            Assert.False(tree.Find(22.304679627065273, 81.309184425811480, 1.099025337160087, 37.882986563459433, 24.923280750650779, 37.167206132293437, out id));
            // Step 62
            tree.Erase(60.000000000000000, 7.000000000000000, 17.000000000000000);
            Assert.False(tree.Find(11.570080029662776, 28.048035298039952, 30.611699844872632, 51.741051217935166, 15.735199386285249, 67.047733012226658, out id));
            // Step 63
            tree.Erase(100.000000000000000, 42.000000000000000, 45.000000000000000);
            Assert.False(tree.Find(23.053713171761025, 66.324475406688734, 5.767253512737225, 82.977329166015750, 83.598039966222444, 99.714827083222332, out id));
            // Step 64
            tree.Insert(2.000000000000000, 39.000000000000000, 82.000000000000000, 37);
            Assert.False(tree.Find(33.643295848300959, 34.033763546982954, 22.393340780886660, 36.172704557891400, 10.575313304717493, 52.706756027979232, out id));
            // Step 65
            tree.Insert(58.000000000000000, 39.000000000000000, 80.000000000000000, 38);
            Assert.False(tree.Find(3.352661132984436, 96.468454564112832, 30.748827101097120, 61.017332411674353, 25.213081292624384, 35.428927874110158, out id));
            // Step 66
            tree.Erase(51.000000000000000, 31.000000000000000, 78.000000000000000);
            Assert.False(tree.Find(16.806616561189912, 99.684849621192583, 15.444279750471591, 31.687831095197481, 53.294743281092835, 73.916387459921367, out id));
            // Step 67
            tree.Erase(82.000000000000000, 46.000000000000000, 40.000000000000000);
            Assert.False(tree.Find(41.854696751367484, 43.332833013341265, 50.044625859024237, 91.499210284447258, 66.080964534600312, 93.193895476406468, out id));
            // Step 68
            tree.Erase(46.000000000000000, 74.000000000000000, 26.000000000000000);
            Assert.False(tree.Find(27.922719260941108, 37.453211407277905, 29.483067154415632, 66.814482267564301, 1.579832766147304, 47.725009786165032, out id));
            // Step 69
            tree.Erase(58.000000000000000, 60.000000000000000, 52.000000000000000);
            Assert.False(tree.Find(54.169216159669084, 71.051536891873823, 15.316217798999244, 34.397813054066603, 59.549381746318055, 86.779374689225136, out id));
            // Step 70
            tree.Erase(42.000000000000000, 22.000000000000000, 7.000000000000000);
            Assert.False(tree.Find(66.130301847983802, 74.236309110972016, 30.386127109681460, 92.486305253342451, 1.085691896474816, 49.233611246690032, out id));
            // Step 71
            tree.Erase(85.000000000000000, 38.000000000000000, 61.000000000000000);
            Assert.False(tree.Find(21.492566727783458, 44.601300367817956, 31.216622533960127, 93.983826378015877, 10.574075735921362, 18.067336945168154, out id));
            // Step 72
            tree.Erase(58.000000000000000, 39.000000000000000, 80.000000000000000);
            Assert.False(tree.Find(4.911304309635423, 30.460842873489689, 25.291395661526707, 97.967554603971365, 40.213956939988314, 93.661878005166997, out id));
            // Step 73
            tree.Insert(71.000000000000000, 17.000000000000000, 100.000000000000000, 39);
            Assert.True(tree.Find(42.570228789413299, 87.248158082267409, 0.365073809839500, 86.530522908263748, 33.631367707584246, 44.741067603147030, out id));
            Assert.True((new List<ulong> { 30 }).Contains(id));
            // Step 74
            tree.Insert(86.000000000000000, 84.000000000000000, 59.000000000000000, 40);
            Assert.False(tree.Find(33.689436350862657, 88.897198879515642, 6.680380720632584, 26.119877279568449, 1.851659012585405, 36.958483123390337, out id));
            // Step 75
            tree.Erase(71.000000000000000, 17.000000000000000, 100.000000000000000);
            Assert.False(tree.Find(50.595350922189894, 76.141979014243461, 14.034712142153506, 75.367546478508629, 39.706649465255950, 53.819937936029064, out id));
            // Step 76
            tree.Erase(48.000000000000000, 55.000000000000000, 44.000000000000000);
            Assert.False(tree.Find(12.650331423757322, 88.081785398764211, 5.647508747667896, 78.904467883878439, 22.900946514278818, 97.367033324995703, out id));
            // Step 77
            tree.Erase(86.000000000000000, 84.000000000000000, 59.000000000000000);
            Assert.False(tree.Find(11.375737990921120, 61.764017641073096, 8.368597746074380, 68.226267765571933, 20.139141670822280, 35.412251376699977, out id));
            // Step 78
            tree.Insert(24.000000000000000, 46.000000000000000, 99.000000000000000, 41);
            Assert.False(tree.Find(28.287283550864274, 89.054085214929884, 34.383722010270432, 95.015986426533800, 42.464705815821901, 57.608035966644309, out id));
            // Step 79
            tree.Insert(32.000000000000000, 63.000000000000000, 73.000000000000000, 42);
            Assert.False(tree.Find(14.323025022081492, 69.236056102531990, 2.974838353153852, 36.369636723692125, 49.079647440918976, 75.574805046665873, out id));
            // Step 80
            tree.Erase(32.000000000000000, 63.000000000000000, 73.000000000000000);
            Assert.False(tree.Find(42.883521311315299, 54.294612002209789, 29.346726040909299, 69.715810513350405, 46.840786770020884, 79.323430407034039, out id));
            // Step 81
            tree.Insert(60.000000000000000, 45.000000000000000, 59.000000000000000, 43);
            Assert.False(tree.Find(9.414377655264738, 57.770127085817748, 46.419217992032003, 93.690968682383414, 22.061883910062686, 64.955160442419597, out id));
            // Step 82
            tree.Insert(93.000000000000000, 73.000000000000000, 11.000000000000000, 44);
            Assert.False(tree.Find(33.351532966045305, 75.053341831355397, 19.860200929239014, 42.611690969016557, 37.450460554607467, 44.264779506862304, out id));
            // Step 83
            tree.Insert(91.000000000000000, 6.000000000000000, 90.000000000000000, 45);
            Assert.False(tree.Find(51.814248833046996, 55.633166139488686, 15.221711339376808, 65.511021691385423, 28.688382972580694, 75.624248003462583, out id));
            // Step 84
            tree.Erase(91.000000000000000, 6.000000000000000, 90.000000000000000);
            Assert.False(tree.Find(65.931531380275487, 73.877089833163581, 3.973578636232045, 31.169467083703296, 16.464172589802750, 62.995800347354326, out id));
            // Step 85
            tree.Insert(55.000000000000000, 88.000000000000000, 97.000000000000000, 46);
            Assert.False(tree.Find(9.506964735815227, 72.229939222377396, 62.316572490378910, 80.451577512278476, 95.890271517621457, 96.092010681369203, out id));
            // Step 86
            tree.Erase(55.000000000000000, 88.000000000000000, 97.000000000000000);
            Assert.False(tree.Find(83.062606077878399, 99.020530671144698, 11.665228607182410, 64.545340786858517, 27.979338516164574, 90.106165367004593, out id));
            // Step 87
            tree.Insert(51.000000000000000, 32.000000000000000, 24.000000000000000, 47);
            Assert.False(tree.Find(68.733381828629689, 91.747598974604543, 69.253583078367882, 86.998211168900298, 76.797706518555160, 86.768251367331644, out id));
            // Step 88
            tree.Insert(44.000000000000000, 64.000000000000000, 15.000000000000000, 48);
            Assert.False(tree.Find(74.140289270048783, 97.950612495638865, 9.477638474414452, 15.204809708707623, 50.261090277152277, 71.436356173817629, out id));
            // Step 89
            tree.Insert(8.000000000000000, 54.000000000000000, 48.000000000000000, 49);
            Assert.False(tree.Find(31.227666183528623, 58.726576132946661, 15.828383598699180, 62.106333594951565, 3.427015168886294, 21.007672588463265, out id));
            // Step 90
            tree.Erase(24.000000000000000, 46.000000000000000, 99.000000000000000);
            Assert.False(tree.Find(50.585617359382738, 91.172587678625163, 4.394212955713972, 98.358939495549848, 10.757622466947748, 17.488224153011345, out id));
            // Step 91
            tree.Insert(77.000000000000000, 23.000000000000000, 91.000000000000000, 50);
            Assert.False(tree.Find(10.008251154446713, 47.279273910165479, 34.396575849796044, 76.400669915341652, 43.735780711189612, 65.283322756211533, out id));
            // Step 92
            tree.Insert(15.000000000000000, 58.000000000000000, 46.000000000000000, 51);
            Assert.False(tree.Find(40.041760384730210, 75.880446619808822, 22.969789111356821, 65.506022073244893, 62.802878095233837, 64.329573599898595, out id));
            // Step 93
            tree.Erase(15.000000000000000, 58.000000000000000, 46.000000000000000);
            Assert.True(tree.Find(46.084937243318954, 65.853176905576063, 32.352595346802438, 68.941556285927746, 42.891157696998036, 72.859194852416593, out id));
            Assert.True((new List<ulong> { 43 }).Contains(id));
            // Step 94
            tree.Insert(23.000000000000000, 54.000000000000000, 49.000000000000000, 52);
            Assert.False(tree.Find(57.809821310018741, 74.144795013564064, 57.124952625998304, 69.356002783754050, 11.138217331127354, 36.885830463951450, out id));
            // Step 95
            tree.Insert(35.000000000000000, 79.000000000000000, 17.000000000000000, 53);
            Assert.False(tree.Find(45.866341596642471, 64.732094874141865, 50.988650689463796, 99.521920309711305, 30.122508109147429, 37.224594684529485, out id));
            // Step 96
            tree.Insert(11.000000000000000, 15.000000000000000, 39.000000000000000, 54);
            Assert.True(tree.Find(31.940343072828124, 68.235854058421324, 38.704495528412565, 65.154340336953140, 8.534382281585263, 49.375519853049290, out id));
            Assert.True((new List<ulong> { 48 }).Contains(id));
            // Step 97
            tree.Erase(60.000000000000000, 45.000000000000000, 59.000000000000000);
            Assert.False(tree.Find(20.476955881853353, 84.595686429713879, 30.457201048223460, 37.371946902284883, 38.815672371228651, 77.904464630770903, out id));
            // Step 98
            tree.Insert(60.000000000000000, 92.000000000000000, 88.000000000000000, 55);
            Assert.False(tree.Find(55.581912503162023, 60.761856905333410, 31.289158593657440, 75.855434334139289, 85.400740495951609, 93.241456864103270, out id));
            // Step 99
            tree.Insert(85.000000000000000, 43.000000000000000, 42.000000000000000, 56);
            Assert.True(tree.Find(38.252790667412427, 61.943630708820031, 29.379362169206537, 40.068039876137696, 2.749544493138012, 30.714547708984206, out id));
            Assert.True((new List<ulong> { 47 }).Contains(id));
            // Step 100
            tree.Erase(93.000000000000000, 73.000000000000000, 11.000000000000000);
            Assert.False(tree.Find(21.424797500024706, 37.675336834767272, 2.109761167984125, 63.189637195463412, 4.757374050674001, 33.144748061842158, out id));
            // Step 101
            tree.Erase(17.000000000000000, 79.000000000000000, 14.000000000000000);
            Assert.False(tree.Find(9.951152089633164, 66.285344110507154, 38.311089489753279, 84.968589695837110, 50.882227826202083, 63.215607794857640, out id));
            // Step 102
            tree.Insert(14.000000000000000, 7.000000000000000, 71.000000000000000, 57);
            Assert.False(tree.Find(46.137368659554177, 61.582981727032490, 32.950783315172302, 61.124616134227807, 11.749009238640550, 25.468690027048446, out id));
            // Step 103
            tree.Insert(23.000000000000000, 30.000000000000000, 79.000000000000000, 58);
            Assert.False(tree.Find(43.486712986978191, 81.311592930414335, 87.665510158703242, 89.438200031372304, 23.089356095740243, 71.748637836852609, out id));
            // Step 104
            tree.Insert(100.000000000000000, 97.000000000000000, 67.000000000000000, 59);
            Assert.False(tree.Find(5.611278587645884, 74.795759909987808, 35.777697283486191, 66.379377574605101, 8.152887287555243, 8.888972577017407, out id));
            // Step 105
            tree.Insert(40.000000000000000, 67.000000000000000, 43.000000000000000, 60);
            Assert.False(tree.Find(14.219511168331501, 40.695379849005221, 37.980669635247331, 76.284267441237319, 64.326785997765541, 65.156800731193471, out id));
            // Step 106
            tree.Insert(95.000000000000000, 42.000000000000000, 31.000000000000000, 61);
            Assert.True(tree.Find(22.917602246069425, 73.752013055651133, 26.910109230846214, 54.428679915411948, 24.321637976843469, 92.530361799139442, out id));
            Assert.True((new List<ulong> { 52, 58 }).Contains(id));
            // Step 107
            tree.Erase(11.000000000000000, 15.000000000000000, 39.000000000000000);
            Assert.True(tree.Find(5.973991813140012, 79.918354428339740, 59.496368271907130, 78.257280333380308, 22.961433276774279, 43.080627325482666, out id));
            Assert.True((new List<ulong> { 60 }).Contains(id));
            // Step 108
            tree.Erase(23.000000000000000, 54.000000000000000, 49.000000000000000);
            Assert.False(tree.Find(42.335312385292937, 67.555246684037414, 75.582837885696634, 95.432951953512941, 6.328432057444955, 72.564416706970718, out id));
            // Step 109
            tree.Erase(95.000000000000000, 42.000000000000000, 31.000000000000000);
            Assert.False(tree.Find(83.081098112178282, 84.007220348656432, 42.428594020184129, 72.566667879321372, 67.728390602433436, 98.883416740293399, out id));
            // Step 110
            tree.Erase(51.000000000000000, 32.000000000000000, 24.000000000000000);
            Assert.False(tree.Find(42.440910369160775, 76.499049850072595, 1.830405525312229, 9.081323362382697, 11.343112244978615, 72.266105336433583, out id));
            // Step 111
            tree.Erase(44.000000000000000, 64.000000000000000, 15.000000000000000);
            Assert.False(tree.Find(30.500594121004930, 75.549314118583098, 34.595022142242804, 60.237229798185233, 15.815969227232596, 53.328445028922275, out id));
            // Step 112
            tree.Insert(40.000000000000000, 56.000000000000000, 63.000000000000000, 62);
            Assert.False(tree.Find(20.260418246903789, 92.325228995109782, 0.917185310387236, 60.766876699288616, 45.490858698899793, 61.231135359139742, out id));
            // Step 113
            tree.Erase(14.000000000000000, 7.000000000000000, 71.000000000000000);
            Assert.False(tree.Find(7.816971118908200, 41.233224992080409, 81.049159693726892, 92.653833408043880, 6.628647558867207, 37.593283430090722, out id));
            // Step 114
            tree.Insert(42.000000000000000, 71.000000000000000, 75.000000000000000, 63);
            Assert.False(tree.Find(30.583786145924307, 40.908694668236819, 34.792457211709880, 68.455498321172030, 27.480032949779897, 34.033774080989417, out id));
            // Step 115
            tree.Insert(19.000000000000000, 49.000000000000000, 15.000000000000000, 64);
            Assert.False(tree.Find(34.330815930269850, 72.336088539828978, 26.364450408120966, 53.165195131827936, 10.464162616125583, 10.930935763118811, out id));
            // Step 116
            tree.Insert(34.000000000000000, 30.000000000000000, 69.000000000000000, 65);
            Assert.True(tree.Find(18.809950680202913, 52.736795719827832, 70.963502633619498, 81.544480522815235, 6.425010595701652, 54.478254487536447, out id));
            Assert.True((new List<ulong> { 53 }).Contains(id));
            // Step 117
            tree.Erase(100.000000000000000, 76.000000000000000, 19.000000000000000);
            Assert.False(tree.Find(42.920521119698115, 72.952248495300452, 25.972404742135957, 69.312919989587797, 0.286850741919842, 33.047435313532425, out id));
            // Step 118
            tree.Insert(59.000000000000000, 61.000000000000000, 16.000000000000000, 66);
            Assert.True(tree.Find(17.673064065972987, 49.500871593606533, 8.548390306974484, 44.214601327870575, 19.632689188526754, 74.445208326287215, out id));
            Assert.True((new List<ulong> { 65 }).Contains(id));
            // Step 119
            tree.Insert(5.000000000000000, 59.000000000000000, 62.000000000000000, 67);
            Assert.False(tree.Find(40.849491606316434, 53.127185171888179, 3.345594981701516, 62.684590919373264, 52.140146622540442, 79.555831452047073, out id));
            // Step 120
            tree.Erase(60.000000000000000, 92.000000000000000, 88.000000000000000);
            Assert.False(tree.Find(18.533248372925737, 62.443063053946489, 30.379995599282672, 47.229080338513960, 80.566947113779548, 85.419197383438274, out id));
            // Step 121
            tree.Erase(40.000000000000000, 67.000000000000000, 43.000000000000000);
            Assert.False(tree.Find(52.797231847106033, 69.615642190951121, 77.822386124450389, 92.042659466635740, 8.226407280108795, 71.435207964156433, out id));
            // Step 122
            tree.Insert(99.000000000000000, 90.000000000000000, 44.000000000000000, 68);
            Assert.True(tree.Find(13.946197150075223, 48.153924117309586, 17.154778574428107, 82.630566039205632, 73.326433354660423, 95.495162436856191, out id));
            Assert.True((new List<ulong> { 58, 63 }).Contains(id));
            // Step 123
            tree.Erase(35.000000000000000, 79.000000000000000, 17.000000000000000);
            Assert.True(tree.Find(5.609504540277655, 28.144779767856388, 29.159608252835678, 92.439067292939427, 3.429427747205982, 54.129449930821153, out id));
            Assert.True((new List<ulong> { 49, 64 }).Contains(id));
            // Step 124
            tree.Erase(77.000000000000000, 23.000000000000000, 91.000000000000000);
            Assert.True(tree.Find(10.783246499089117, 53.223497341297957, 65.971429884294565, 92.325024402670621, 35.466124281621767, 86.973416233924695, out id));
            Assert.True((new List<ulong> { 63 }).Contains(id));
            // Step 125
            tree.Insert(84.000000000000000, 24.000000000000000, 99.000000000000000, 69);
            Assert.False(tree.Find(57.250952955486881, 60.530328355887406, 49.113872328994482, 61.501166197735479, 46.967292885096143, 83.465858834909028, out id));
            // Step 126
            tree.Insert(99.000000000000000, 91.000000000000000, 17.000000000000000, 70);
            Assert.False(tree.Find(20.693604048497207, 29.157567778770289, 15.873917634008340, 36.416770103590835, 47.941510973274418, 77.539437482373614, out id));
            // Step 127
            tree.Erase(59.000000000000000, 61.000000000000000, 16.000000000000000);
            Assert.False(tree.Find(27.419894811029788, 49.752935239287510, 52.573390622128123, 86.019913492672885, 20.348308482909218, 32.821890514367603, out id));
            // Step 128
            tree.Erase(2.000000000000000, 39.000000000000000, 82.000000000000000);
            Assert.False(tree.Find(85.487522871178655, 92.105347885726275, 18.530543303103354, 37.441811159312756, 2.318948291785472, 53.912673401814537, out id));
            // Step 129
            tree.Erase(8.000000000000000, 54.000000000000000, 48.000000000000000);
            Assert.True(tree.Find(38.842181827341790, 83.599990756474256, 27.538392043799252, 89.130492837627742, 6.139552734601306, 96.625260085541925, out id));
            Assert.True((new List<ulong> { 62, 63 }).Contains(id));
            // Step 130
            tree.Erase(19.000000000000000, 49.000000000000000, 15.000000000000000);
            Assert.False(tree.Find(16.648697248227496, 38.321199163612299, 43.457985322231870, 60.016973022161466, 2.300373773713693, 86.562532783805906, out id));
            // Step 131
            tree.Erase(99.000000000000000, 91.000000000000000, 17.000000000000000);
            Assert.False(tree.Find(4.761183350334042, 8.163192469694646, 45.414412465458064, 64.839647482536023, 82.212377894991789, 83.799977701851560, out id));
            // Step 132
            tree.Erase(84.000000000000000, 24.000000000000000, 99.000000000000000);
            Assert.False(tree.Find(86.818314522861272, 89.536017064262012, 13.835370994116957, 81.842943158388039, 5.801831841529037, 77.013519714209735, out id));
            // Step 133
            tree.Insert(32.000000000000000, 39.000000000000000, 19.000000000000000, 71);
            Assert.False(tree.Find(45.587276954609223, 81.172064871224748, 12.789346219574870, 30.706143452101887, 41.824508478267440, 51.228576170159087, out id));
            // Step 134
            tree.Insert(15.000000000000000, 30.000000000000000, 45.000000000000000, 72);
            Assert.False(tree.Find(44.958428204691934, 54.512654897631606, 23.619692227206933, 79.294809403026278, 38.109823764635486, 77.181365140530204, out id));
            // Step 135
            tree.Erase(100.000000000000000, 97.000000000000000, 67.000000000000000);
            Assert.False(tree.Find(81.406949960199853, 84.513665392060815, 51.236657691795706, 77.596229035494730, 5.915539170331996, 18.300697943145707, out id));
            // Step 136
            tree.Insert(75.000000000000000, 97.000000000000000, 67.000000000000000, 73);
            Assert.False(tree.Find(29.395744925543177, 39.617334401975022, 12.918521629293133, 59.326680445195365, 0.157138285569214, 3.992271352155519, out id));
            // Step 137
            tree.Erase(99.000000000000000, 90.000000000000000, 44.000000000000000);
            Assert.False(tree.Find(18.895824670963101, 33.177356882435085, 7.467839096386664, 26.992795651201106, 61.224774434969277, 77.391729897590636, out id));
            // Step 138
            tree.Insert(50.000000000000000, 42.000000000000000, 24.000000000000000, 74);
            Assert.True(tree.Find(4.327313250522180, 12.921553979161548, 50.153176772966127, 73.742965594983588, 55.410562565036336, 95.133223762427363, out id));
            Assert.True((new List<ulong> { 67 }).Contains(id));
            // Step 139
            tree.Erase(42.000000000000000, 71.000000000000000, 75.000000000000000);
            Assert.False(tree.Find(10.009164575712692, 41.093765128194917, 87.718360107162511, 96.549709849967996, 55.513259677873691, 98.106642379552582, out id));
            // Step 140
            tree.Erase(85.000000000000000, 43.000000000000000, 42.000000000000000);
            Assert.False(tree.Find(86.054112817080096, 90.735858029252199, 83.761684276411373, 97.269737083670407, 12.751644902916215, 56.716388857508591, out id));
            // Step 141
            tree.Insert(63.000000000000000, 77.000000000000000, 24.000000000000000, 75);
            Assert.True(tree.Find(30.704039044177158, 48.764073380774889, 21.532125528396662, 71.285144164099535, 50.106608131200439, 88.260417240769712, out id));
            Assert.True((new List<ulong> { 62, 65 }).Contains(id));
            // Step 142
            tree.Insert(84.000000000000000, 53.000000000000000, 99.000000000000000, 76);
            Assert.False(tree.Find(73.137925389386453, 89.482972903337100, 19.289502945871085, 48.877750661668408, 45.086781454268518, 81.436115203378606, out id));
            // Step 143
            tree.Erase(84.000000000000000, 53.000000000000000, 99.000000000000000);
            Assert.False(tree.Find(62.306403458185585, 84.031638166094268, 22.432030731648180, 95.227844655811040, 73.157217265357446, 74.497982586760884, out id));
            // Step 144
            tree.Insert(7.000000000000000, 11.000000000000000, 60.000000000000000, 77);
            Assert.False(tree.Find(90.232814021293223, 98.516483626777998, 28.707970121082347, 93.338400432130598, 0.396504083373572, 36.214503742493861, out id));
            // Step 145
            tree.Erase(15.000000000000000, 30.000000000000000, 45.000000000000000);
            Assert.False(tree.Find(13.022257160580274, 18.931740656969186, 50.955242917777831, 78.688273888590004, 55.928921435485094, 75.179473748236234, out id));
            // Step 146
            tree.Erase(34.000000000000000, 30.000000000000000, 69.000000000000000);
            Assert.False(tree.Find(4.929961836932972, 32.678755335912676, 14.922814544068096, 92.134418964518446, 23.277227138816780, 24.217708890877944, out id));
            // Step 147
            tree.Insert(31.000000000000000, 84.000000000000000, 56.000000000000000, 78);
            Assert.False(tree.Find(7.483126695549647, 38.525227412870478, 75.910441726707916, 80.781650055206697, 3.840608995679640, 92.062034471786163, out id));
            // Step 148
            tree.Insert(92.000000000000000, 99.000000000000000, 98.000000000000000, 79);
            Assert.False(tree.Find(12.358802477237141, 42.569903607341821, 34.013582403665957, 52.119193160763380, 24.295297023517094, 61.169481947846592, out id));
            // Step 149
            tree.Insert(57.000000000000000, 17.000000000000000, 87.000000000000000, 80);
            Assert.True(tree.Find(19.382517953464472, 79.838129634050873, 15.915283336443952, 19.836443682694181, 2.293173496965328, 87.406242579852460, out id));
            Assert.True((new List<ulong> { 80 }).Contains(id));
            // Step 150
            tree.Insert(3.000000000000000, 56.000000000000000, 32.000000000000000, 81);
            Assert.True(tree.Find(44.637450524332664, 56.211457288904086, 16.458227414677495, 60.661049386075483, 1.528175914023244, 33.995025708542300, out id));
            Assert.True((new List<ulong> { 74 }).Contains(id));
            // Step 151
            tree.Insert(72.000000000000000, 50.000000000000000, 98.000000000000000, 82);
            Assert.False(tree.Find(2.296447897853915, 14.638155753744176, 62.865890782032331, 96.006349261442793, 35.948328084568161, 79.439884082131499, out id));
            // Step 152
            tree.Insert(61.000000000000000, 15.000000000000000, 8.000000000000000, 83);
            Assert.False(tree.Find(82.611742000694861, 90.900596621045054, 10.861884909894048, 51.599605528412376, 40.333252650804376, 44.848802612407248, out id));
            // Step 153
            tree.Insert(37.000000000000000, 47.000000000000000, 85.000000000000000, 84);
            Assert.False(tree.Find(43.038261195738961, 67.554064170632373, 17.902892010004400, 65.893543353499311, 69.830953577047211, 86.792264678435799, out id));
            // Step 154
            tree.Erase(23.000000000000000, 30.000000000000000, 79.000000000000000);
            Assert.False(tree.Find(19.201291310388100, 91.178974386647738, 47.373195541662959, 59.315856854410384, 3.818474975252262, 13.614764365096887, out id));
            // Step 155
            tree.Erase(3.000000000000000, 56.000000000000000, 32.000000000000000);
            Assert.False(tree.Find(45.926660446480874, 75.962544040503687, 46.757095988668198, 82.810532073614581, 59.941756470554111, 92.613452232611095, out id));
            // Step 156
            tree.Erase(31.000000000000000, 84.000000000000000, 56.000000000000000);
            Assert.True(tree.Find(47.222693207051805, 72.836852788654554, 12.794598151304870, 45.276143519696866, 50.285762091328493, 94.228211460279937, out id));
            Assert.True((new List<ulong> { 80 }).Contains(id));
            // Step 157
            tree.Erase(40.000000000000000, 56.000000000000000, 63.000000000000000);
            Assert.False(tree.Find(45.970770985906775, 65.591414154794137, 45.488865776693601, 73.823685473616891, 41.673095494375545, 52.937414684702652, out id));
            // Step 158
            tree.Erase(37.000000000000000, 47.000000000000000, 85.000000000000000);
            Assert.False(tree.Find(63.156198858849422, 96.997148760449079, 54.707899625685620, 70.419671151104623, 4.372860164954906, 24.550004498248612, out id));
            // Step 159
            tree.Erase(50.000000000000000, 42.000000000000000, 24.000000000000000);
            Assert.False(tree.Find(59.252173992948883, 70.220155122757504, 11.142299847677361, 78.374934394919052, 40.961043826500521, 58.783342078881503, out id));
            // Step 160
            tree.Erase(72.000000000000000, 50.000000000000000, 98.000000000000000);
            Assert.False(tree.Find(29.650280993899781, 29.730193580742281, 90.871326966962101, 92.400450571814787, 11.013808075824516, 49.400886312220358, out id));
            // Step 161
            tree.Erase(63.000000000000000, 77.000000000000000, 24.000000000000000);
            Assert.False(tree.Find(9.226871674792436, 66.325414816093598, 48.665893839781646, 70.552402097236566, 4.243564922614606, 62.842439482325105, out id));
            // Step 162
            tree.Insert(57.000000000000000, 47.000000000000000, 77.000000000000000, 85);
            Assert.False(tree.Find(3.680775373780909, 93.725366633687230, 19.054629643275035, 39.146252790814565, 20.977415055122140, 64.758533459918127, out id));
            // Step 163
            tree.Insert(96.000000000000000, 27.000000000000000, 52.000000000000000, 86);
            Assert.False(tree.Find(77.358377393035539, 81.748316598079924, 5.146233718019422, 81.210465295710407, 23.511506009581829, 66.906510848704087, out id));
            // Step 164
            tree.Erase(75.000000000000000, 97.000000000000000, 67.000000000000000);
            Assert.False(tree.Find(44.601381796365700, 88.144363947920738, 42.798917108525671, 50.241754195754865, 27.160476671272814, 65.661794718047872, out id));
            // Step 165
            tree.Erase(7.000000000000000, 11.000000000000000, 60.000000000000000);
            Assert.False(tree.Find(22.382525894196171, 56.291674913933917, 44.760297565233522, 50.863914621056693, 48.819307435254146, 54.546654859975860, out id));
            // Step 166
            tree.Insert(68.000000000000000, 1.000000000000000, 89.000000000000000, 87);
            Assert.False(tree.Find(4.123242346723766, 92.768612657536011, 56.851529593313735, 64.593467181710864, 0.643644927386289, 6.420963502024557, out id));
            // Step 167
            tree.Insert(15.000000000000000, 75.000000000000000, 33.000000000000000, 88);
            Assert.False(tree.Find(63.124105857008814, 81.061565450767020, 12.787000769170687, 76.729263594140676, 47.045289172861679, 72.694179571176278, out id));
            // Step 168
            tree.Erase(57.000000000000000, 47.000000000000000, 77.000000000000000);
            Assert.False(tree.Find(9.967640427582991, 47.087637498940701, 26.244853098773469, 41.956288592015170, 58.964585204141386, 94.762326471662277, out id));
            // Step 169
            tree.Insert(97.000000000000000, 8.000000000000000, 43.000000000000000, 89);
            Assert.True(tree.Find(30.619094008592850, 98.108065600501078, 2.732152596294979, 33.410775300799813, 5.693886956458815, 44.285922189528485, out id));
            Assert.True((new List<ulong> { 83, 89 }).Contains(id));
            // Step 170
            tree.Erase(92.000000000000000, 99.000000000000000, 98.000000000000000);
            Assert.True(tree.Find(3.152225238388151, 14.425119201928760, 15.285624256298458, 70.707836669922969, 47.404311612254581, 86.076684451272968, out id));
            Assert.True((new List<ulong> { 67 }).Contains(id));
            // Step 171
            tree.Erase(5.000000000000000, 59.000000000000000, 62.000000000000000);
            Assert.False(tree.Find(34.353646788750723, 52.952819166929764, 8.324727809323617, 10.576994255252870, 53.698311348124470, 58.149549470011252, out id));
            // Step 172
            tree.Insert(65.000000000000000, 1.000000000000000, 91.000000000000000, 90);
            Assert.False(tree.Find(20.244466279742944, 37.468908918084452, 11.859585459955913, 51.144306632874624, 74.169276569436249, 92.648512703982703, out id));
            // Step 173
            tree.Insert(41.000000000000000, 91.000000000000000, 33.000000000000000, 91);
            Assert.False(tree.Find(46.480356513222844, 91.518769178786357, 37.344124458134395, 96.182227857606136, 50.501264810410497, 59.061590187657806, out id));
            // Step 174
            tree.Erase(96.000000000000000, 27.000000000000000, 52.000000000000000);
            Assert.False(tree.Find(17.903575035114795, 37.328378146681182, 15.913137682955092, 48.149760044882164, 72.577114006851232, 73.922601833210365, out id));
            // Step 175
            tree.Insert(28.000000000000000, 3.000000000000000, 82.000000000000000, 92);
            Assert.False(tree.Find(61.152977838246905, 63.898280082071857, 7.692001712207386, 22.583881846567099, 59.128834713671409, 80.575688346037623, out id));
            // Step 176
            tree.Erase(28.000000000000000, 3.000000000000000, 82.000000000000000);
            Assert.True(tree.Find(32.450407416575629, 58.242089438826916, 36.659140353639387, 91.473027435884063, 20.239150390431980, 69.310725190402252, out id));
            Assert.True((new List<ulong> { 91 }).Contains(id));
            // Step 177
            tree.Insert(93.000000000000000, 8.000000000000000, 57.000000000000000, 93);
            Assert.False(tree.Find(30.466071902046455, 69.174149464689719, 37.586923473363100, 93.706230774733783, 40.292179137465837, 90.942950566818183, out id));
            // Step 178
            tree.Insert(88.000000000000000, 62.000000000000000, 17.000000000000000, 94);
            Assert.False(tree.Find(26.582687987477037, 69.817332468103416, 23.958129257068549, 70.382841827395140, 28.334238309417159, 44.491297495792914, out id));
            // Step 179
            tree.Insert(40.000000000000000, 48.000000000000000, 47.000000000000000, 95);
            Assert.False(tree.Find(41.902003761338058, 65.294736234296892, 32.716525171850442, 81.437492576009177, 37.938916113271269, 99.588663248930288, out id));
            // Step 180
            tree.Insert(88.000000000000000, 1.000000000000000, 47.000000000000000, 96);
            Assert.True(tree.Find(27.858444166202144, 44.103027815224124, 23.481353064817888, 87.408371567322547, 14.332209885669300, 23.620281056294033, out id));
            Assert.True((new List<ulong> { 71 }).Contains(id));
            // Step 181
            tree.Insert(39.000000000000000, 74.000000000000000, 67.000000000000000, 97);
            Assert.True(tree.Find(31.708446423041238, 49.639000819456022, 35.069069611848981, 91.868041272998752, 65.444009016112247, 72.355864911916640, out id));
            Assert.True((new List<ulong> { 97 }).Contains(id));
            // Step 182
            tree.Erase(32.000000000000000, 39.000000000000000, 19.000000000000000);
            Assert.False(tree.Find(25.100753384558395, 61.277023527940941, 8.612842923336450, 33.348942716877808, 62.997323999943056, 76.200076383855929, out id));
            // Step 183
            tree.Erase(57.000000000000000, 17.000000000000000, 87.000000000000000);
            Assert.True(tree.Find(43.552570211463234, 96.921071792577635, 36.928436502284022, 89.739549306871268, 0.061928207676332, 45.248075848594759, out id));
            Assert.True((new List<ulong> { 94 }).Contains(id));
            // Step 184
            tree.Insert(92.000000000000000, 69.000000000000000, 16.000000000000000, 98);
            Assert.False(tree.Find(57.488548443340868, 69.016120833046330, 55.526462834096336, 98.332961783320755, 17.883389417110539, 79.273988522432887, out id));
            // Step 185
            tree.Erase(92.000000000000000, 69.000000000000000, 16.000000000000000);
            Assert.True(tree.Find(38.163263909419157, 59.368991084364268, 16.954751746282703, 56.798586147888294, 21.940128636083010, 57.880228225008004, out id));
            Assert.True((new List<ulong> { 95 }).Contains(id));
            // Step 186
            tree.Erase(39.000000000000000, 74.000000000000000, 67.000000000000000);
            Assert.False(tree.Find(58.705977159682462, 97.547006390039002, 8.273303232677398, 34.442416007106992, 68.936978972307202, 78.757722342425495, out id));
            // Step 187
            tree.Erase(15.000000000000000, 75.000000000000000, 33.000000000000000);
            Assert.False(tree.Find(7.848867182521713, 57.944673463814397, 32.642300907207854, 70.311391863829229, 10.144048742643774, 19.347538917866792, out id));
            // Step 188
            tree.Erase(68.000000000000000, 1.000000000000000, 89.000000000000000);
            Assert.False(tree.Find(82.785289835083077, 99.813473206370389, 30.104276570472798, 49.451735747833560, 51.943185138830160, 57.092330270152537, out id));
            // Step 189
            tree.Erase(40.000000000000000, 48.000000000000000, 47.000000000000000);
            Assert.False(tree.Find(23.870218214399063, 72.809913656107355, 12.807438355326195, 89.820213740127414, 14.126265402399484, 59.614398506697356, out id));
            // Step 190
            tree.Insert(66.000000000000000, 57.000000000000000, 59.000000000000000, 99);
            Assert.False(tree.Find(23.520849836357517, 91.032515879131552, 31.069905279999666, 53.568011996413148, 76.017047963881794, 79.044698610608052, out id));
            // Step 191
            tree.Insert(8.000000000000000, 77.000000000000000, 0.000000000000000, 100);
            Assert.False(tree.Find(85.283359325233903, 93.796812707805813, 12.569976238935254, 60.947260499690380, 38.227164976755375, 67.055877329576276, out id));
            // Step 192
            tree.Insert(21.000000000000000, 6.000000000000000, 15.000000000000000, 101);
            Assert.False(tree.Find(86.095937687250128, 90.196753936312192, 57.308781326253232, 67.558759781915455, 60.730722011325319, 73.761226850997190, out id));
            // Step 193
            tree.Insert(70.000000000000000, 42.000000000000000, 91.000000000000000, 102);
            Assert.True(tree.Find(25.713730302198780, 96.925211939582226, 44.628622155997398, 87.110359059594842, 37.319622716161213, 75.372650173472195, out id));
            Assert.True((new List<ulong> { 99 }).Contains(id));
            // Step 194
            tree.Erase(66.000000000000000, 57.000000000000000, 59.000000000000000);
            Assert.False(tree.Find(27.301824077896452, 97.023683110349765, 23.515323928226948, 73.287752458883148, 48.504943510072515, 60.418028808272020, out id));
            // Step 195
            tree.Insert(97.000000000000000, 61.000000000000000, 78.000000000000000, 103);
            Assert.False(tree.Find(39.659458773869702, 42.649901602537966, 14.714220884606855, 62.120818447520911, 59.183495111091467, 72.364030835976777, out id));
            // Step 196
            tree.Insert(7.000000000000000, 45.000000000000000, 17.000000000000000, 104);
            Assert.False(tree.Find(56.703307822829018, 93.670183269498793, 12.462353915355372, 61.413637243605713, 53.958259721155741, 66.220126817421558, out id));
            // Step 197
            tree.Insert(26.000000000000000, 86.000000000000000, 57.000000000000000, 105);
            Assert.True(tree.Find(16.593877596307749, 94.136421523393267, 45.769838697448037, 88.182455508703214, 4.976788972886825, 45.265602108299255, out id));
            Assert.True((new List<ulong> { 94 }).Contains(id));
            // Step 198
            tree.Erase(26.000000000000000, 86.000000000000000, 57.000000000000000);
            Assert.False(tree.Find(8.421336121575662, 58.439048232130034, 11.753583760973463, 87.675063646142377, 2.605375262389842, 99.194964625499253, out id));
            // Step 199
            tree.Erase(88.000000000000000, 62.000000000000000, 17.000000000000000);
            Assert.True(tree.Find(17.916379772609091, 49.404731985322101, 4.083158800824782, 58.145958207691649, 14.292635425461775, 17.393537771303524, out id));
            Assert.True((new List<ulong> { 101 }).Contains(id));
            // Step 200
            tree.Erase(88.000000000000000, 1.000000000000000, 47.000000000000000);
            Assert.False(tree.Find(24.479779935836177, 54.139193560182520, 33.278500349960261, 96.316581581045767, 79.981082555534201, 87.298849065179027, out id));
        }

        [Fact]
        public void SegmentTree2dTest()
        {
            var tree = new AdaptiveGrid.SegmentTree2d();
            ulong id;

            // Step 1
            tree.Insert(0.695426297609277, 0.220334757669705, 1);
            Assert.False(tree.Find(0.226039508125436, 0.466833685089214, 0.696671768746859, 0.931147035981768, out id));
            // Step 2
            tree.Insert(0.955001584268316, 0.146930493214323, 2);
            Assert.False(tree.Find(0.806457363648287, 0.862264063839046, 0.910012967142810, 0.971353679865844, out id));
            // Step 3
            tree.Erase(0.955001584268316, 0.146930493214323);
            Assert.False(tree.Find(0.689037896192646, 0.693392366147269, 0.311429380135017, 0.408812917695183, out id));
            // Step 4
            tree.Insert(0.598764336289028, 0.727589990217971, 3);
            Assert.False(tree.Find(0.564946921171176, 0.959734146071092, 0.845890139275403, 0.946164994720543, out id));
            // Step 5
            tree.Erase(0.598764336289028, 0.727589990217971);
            Assert.False(tree.Find(0.076286529958835, 0.493818050728944, 0.606888088149304, 0.617826571888874, out id));
            // Step 6
            tree.Insert(0.592691670441355, 0.751458378463557, 4);
            Assert.False(tree.Find(0.398583451984417, 0.452224807958444, 0.207890779436465, 0.335166171695104, out id));
            // Step 7
            tree.Insert(0.136574182865130, 0.828934959033450, 5);
            Assert.True(tree.Find(0.298274128743836, 0.829000866772002, 0.161173023317786, 0.370775471422202, out id));
            Assert.True((new List<ulong> { 1 }).Contains(id));
            // Step 8
            tree.Erase(0.695426297609277, 0.220334757669705);
            Assert.False(tree.Find(0.106668424622110, 0.391014597878091, 0.083054485097122, 0.680224182078895, out id));
            // Step 9
            tree.Insert(0.113661507242047, 0.102376409892945, 6);
            Assert.False(tree.Find(0.517502458785313, 0.696035394490095, 0.290892170231842, 0.309543953213435, out id));
            // Step 10
            tree.Insert(0.480524688566369, 0.782243989013648, 7);
            Assert.True(tree.Find(0.093863911264471, 0.902494500490292, 0.624575461152209, 0.779389864883735, out id));
            Assert.True((new List<ulong> { 4 }).Contains(id));
            // Step 11
            tree.Erase(0.113661507242047, 0.102376409892945);
            Assert.False(tree.Find(0.817298576750825, 0.881837374527756, 0.325792120374044, 0.666912051068888, out id));
            // Step 12
            tree.Insert(0.759328562931954, 0.544074164884037, 8);
            Assert.False(tree.Find(0.769290094119678, 0.887722187768170, 0.505940716653618, 0.900093875621229, out id));
            // Step 13
            tree.Erase(0.759328562931954, 0.544074164884037);
            Assert.True(tree.Find(0.499465429497091, 0.717084285470218, 0.082938535566567, 0.996140142555799, out id));
            Assert.True((new List<ulong> { 4 }).Contains(id));
            // Step 14
            tree.Insert(0.559866169317777, 0.044202889906482, 9);
            Assert.False(tree.Find(0.420878286969913, 0.426334654951539, 0.794199080221516, 0.861576928469226, out id));
            // Step 15
            tree.Insert(0.368452317727245, 0.474555380827771, 10);
            Assert.False(tree.Find(0.132512067528426, 0.335742966956731, 0.090359417452147, 0.701242034498281, out id));
            // Step 16
            tree.Erase(0.136574182865130, 0.828934959033450);
            Assert.False(tree.Find(0.295335521091505, 0.451100766606730, 0.308170075985933, 0.363398471094999, out id));
            // Step 17
            tree.Insert(0.407923440390030, 0.291793179534582, 11);
            Assert.False(tree.Find(0.615384624222635, 0.740967248327933, 0.207421907895840, 0.298954988926747, out id));
            // Step 18
            tree.Erase(0.480524688566369, 0.782243989013648);
            Assert.False(tree.Find(0.824646611827075, 0.968317699780329, 0.489338282245209, 0.612189171488328, out id));
            // Step 19
            tree.Insert(0.905844780721756, 0.499894484290845, 12);
            Assert.True(tree.Find(0.154073107780910, 0.476970288971259, 0.042364773347170, 0.640258843804539, out id));
            Assert.True((new List<ulong> { 10, 11 }).Contains(id));
            // Step 20
            tree.Insert(0.490794559420607, 0.576889259001492, 13);
            Assert.False(tree.Find(0.026707019532951, 0.305003354915055, 0.011823267393269, 0.785079022808848, out id));
            // Step 21
            tree.Insert(0.201615530122206, 0.071723665928467, 14);
            Assert.False(tree.Find(0.164015605863272, 0.663472208163984, 0.419330975339076, 0.454928962976017, out id));
            // Step 22
            tree.Erase(0.490794559420607, 0.576889259001492);
            Assert.True(tree.Find(0.000432289739201, 0.894891999363011, 0.037974797103572, 0.707821516325705, out id));
            Assert.True((new List<ulong> { 9, 10, 11, 14 }).Contains(id));
            // Step 23
            tree.Erase(0.368452317727245, 0.474555380827771);
            Assert.False(tree.Find(0.185472183084757, 0.845205264684371, 0.204444246019618, 0.247666104609286, out id));
            // Step 24
            tree.Erase(0.559866169317777, 0.044202889906482);
            Assert.True(tree.Find(0.009018601841484, 0.350587500371605, 0.057440475110146, 0.657364491870190, out id));
            Assert.True((new List<ulong> { 14 }).Contains(id));
            // Step 25
            tree.Insert(0.664348017796720, 0.971686622734910, 15);
            Assert.False(tree.Find(0.081968668014987, 0.575989350471796, 0.371526880076039, 0.701735719901356, out id));
            // Step 26
            tree.Insert(0.425912121792403, 0.584439017615640, 16);
            Assert.False(tree.Find(0.838925346073822, 0.915879678813651, 0.388955655287863, 0.402705405714263, out id));
            // Step 27
            tree.Insert(0.466337218996688, 0.543056208694436, 17);
            Assert.False(tree.Find(0.075280080712475, 0.137982498105770, 0.326620647894929, 0.699078078496197, out id));
            // Step 28
            tree.Erase(0.592691670441355, 0.751458378463557);
            Assert.True(tree.Find(0.183117422077602, 0.992851465603157, 0.120670239952829, 0.524440307553515, out id));
            Assert.True((new List<ulong> { 11, 12 }).Contains(id));
            // Step 29
            tree.Insert(0.738479492285176, 0.378490435270645, 18);
            Assert.False(tree.Find(0.649551168088495, 0.656824220323202, 0.148114199999425, 0.399429790587713, out id));
            // Step 30
            tree.Insert(0.204288812114276, 0.724899405526093, 19);
            Assert.True(tree.Find(0.371823514483295, 0.686934117275371, 0.347483695076539, 0.849611006151825, out id));
            Assert.True((new List<ulong> { 16, 17 }).Contains(id));
            // Step 31
            tree.Erase(0.204288812114276, 0.724899405526093);
            Assert.False(tree.Find(0.587351657930716, 0.601911348179780, 0.452611653933194, 0.456840152227177, out id));
            // Step 32
            tree.Insert(0.573041230292741, 0.975489902851740, 20);
            Assert.False(tree.Find(0.611772832909409, 0.873801509502557, 0.553322981178427, 0.894344037446267, out id));
            // Step 33
            tree.Erase(0.407923440390030, 0.291793179534582);
            Assert.False(tree.Find(0.364079605283573, 0.397667419796754, 0.047540115629895, 0.170445331665601, out id));
            // Step 34
            tree.Insert(0.261709794122434, 0.331143703841401, 21);
            Assert.True(tree.Find(0.063245020134732, 0.327790361082375, 0.256210027984143, 0.765707415375298, out id));
            Assert.True((new List<ulong> { 21 }).Contains(id));
            // Step 35
            tree.Erase(0.573041230292741, 0.975489902851740);
            Assert.True(tree.Find(0.411958890860873, 0.607613747117299, 0.075423939451249, 0.950438977972225, out id));
            Assert.True((new List<ulong> { 16, 17 }).Contains(id));
            // Step 36
            tree.Insert(0.932145546202633, 0.233467805637208, 22);
            Assert.False(tree.Find(0.263565689145559, 0.362337094456580, 0.036097435708810, 0.583880358401885, out id));
            // Step 37
            tree.Erase(0.425912121792403, 0.584439017615640);
            Assert.False(tree.Find(0.197110416309552, 0.454857509273984, 0.473833404940292, 0.766504604662496, out id));
            // Step 38
            tree.Insert(0.898387492956635, 0.257926920922547, 23);
            Assert.False(tree.Find(0.282322696671947, 0.688330940662549, 0.468112266049191, 0.484923142861018, out id));
            // Step 39
            tree.Erase(0.664348017796720, 0.971686622734910);
            Assert.False(tree.Find(0.165515503075474, 0.425162258894204, 0.893628762003228, 0.905346122299779, out id));
            // Step 40
            tree.Insert(0.874793269925270, 0.420492014673396, 24);
            Assert.True(tree.Find(0.276261351963290, 0.931668419051915, 0.319363418787590, 0.431760905418851, out id));
            Assert.True((new List<ulong> { 18, 24 }).Contains(id));
            // Step 41
            tree.Erase(0.932145546202633, 0.233467805637208);
            Assert.True(tree.Find(0.216788026099864, 0.992802896646273, 0.250563902715910, 0.884297796076080, out id));
            Assert.True((new List<ulong> { 12, 17, 18, 21, 23, 24 }).Contains(id));
            // Step 42
            tree.Insert(0.485748124825190, 0.486944896120163, 25);
            Assert.False(tree.Find(0.646239921018572, 0.752685434850271, 0.434479906819181, 0.968990829382511, out id));
            // Step 43
            tree.Insert(0.850668578916750, 0.344972192669115, 26);
            Assert.False(tree.Find(0.483919654428871, 0.499487506571546, 0.073156416949860, 0.178059509277514, out id));
            // Step 44
            tree.Insert(0.693528170323994, 0.075510948894250, 27);
            Assert.True(tree.Find(0.137858231541414, 0.747495412456484, 0.116104055071087, 0.983582424658673, out id));
            Assert.True((new List<ulong> { 17, 18, 21, 25 }).Contains(id));
            // Step 45
            tree.Erase(0.905844780721756, 0.499894484290845);
            Assert.False(tree.Find(0.211714276314254, 0.410637069817589, 0.408825628467737, 0.702999794124732, out id));
            // Step 46
            tree.Insert(0.393891419146246, 0.337579383723936, 28);
            Assert.False(tree.Find(0.128500295276102, 0.189856502629577, 0.831345634053350, 0.876888165341630, out id));
            // Step 47
            tree.Insert(0.249338027920967, 0.180997102715261, 29);
            Assert.True(tree.Find(0.063775374455842, 0.861419517706523, 0.105451373103448, 0.188351882843143, out id));
            Assert.True((new List<ulong> { 29 }).Contains(id));
            // Step 48
            tree.Insert(0.647598492098710, 0.454083788940173, 30);
            Assert.True(tree.Find(0.406351960926550, 0.556641468820205, 0.201993639073800, 0.608768072030084, out id));
            Assert.True((new List<ulong> { 17, 25 }).Contains(id));
            // Step 49
            tree.Erase(0.249338027920967, 0.180997102715261);
            Assert.False(tree.Find(0.703386001496759, 0.732874775447679, 0.267867314832388, 0.427171913854121, out id));
            // Step 50
            tree.Insert(0.629696271525960, 0.671690470331155, 31);
            Assert.True(tree.Find(0.171663142010930, 0.335397220305267, 0.179003751577409, 0.967374045308976, out id));
            Assert.True((new List<ulong> { 21 }).Contains(id));
            // Step 51
            tree.Erase(0.261709794122434, 0.331143703841401);
            Assert.True(tree.Find(0.468356181752505, 0.589644681287819, 0.170003868886198, 0.648996333583047, out id));
            Assert.True((new List<ulong> { 25 }).Contains(id));
            // Step 52
            tree.Erase(0.485748124825190, 0.486944896120163);
            Assert.True(tree.Find(0.246946954745582, 0.813198891702048, 0.453317420710478, 0.495776529834599, out id));
            Assert.True((new List<ulong> { 30 }).Contains(id));
            // Step 53
            tree.Insert(0.946267490647386, 0.807943050917319, 32);
            Assert.False(tree.Find(0.362739264232180, 0.790279208360803, 0.126939817304953, 0.313259866068174, out id));
            // Step 54
            tree.Erase(0.738479492285176, 0.378490435270645);
            Assert.False(tree.Find(0.236009630080734, 0.886202457301983, 0.172410142928924, 0.314210424068189, out id));
            // Step 55
            tree.Erase(0.693528170323994, 0.075510948894250);
            Assert.False(tree.Find(0.042278874781670, 0.108918629209884, 0.439984285058989, 0.711026973627470, out id));
            // Step 56
            tree.Erase(0.629696271525960, 0.671690470331155);
            Assert.True(tree.Find(0.175924545057983, 0.869071951782626, 0.444992381541913, 0.990159178328700, out id));
            Assert.True((new List<ulong> { 17, 30 }).Contains(id));
            // Step 57
            tree.Erase(0.898387492956635, 0.257926920922547);
            Assert.True(tree.Find(0.141854634770327, 0.633405975749174, 0.334939840889826, 0.838388060621578, out id));
            Assert.True((new List<ulong> { 17, 28 }).Contains(id));
            // Step 58
            tree.Insert(0.635582815082928, 0.130960871991425, 33);
            Assert.True(tree.Find(0.594457781364423, 0.961295475796087, 0.184326364266965, 0.673539654529157, out id));
            Assert.True((new List<ulong> { 24, 26, 30 }).Contains(id));
            // Step 59
            tree.Insert(0.343267420741677, 0.551546136219896, 34);
            Assert.True(tree.Find(0.169381005427389, 0.794882630402994, 0.441129013035898, 0.717261906565851, out id));
            Assert.True((new List<ulong> { 17, 30, 34 }).Contains(id));
            // Step 60
            tree.Insert(0.677500555639359, 0.487118539603719, 35);
            Assert.True(tree.Find(0.106739082424189, 0.978275339812092, 0.332795125627439, 0.932017748211094, out id));
            Assert.True((new List<ulong> { 17, 24, 26, 28, 30, 32, 34, 35 }).Contains(id));
            // Step 61
            tree.Erase(0.393891419146246, 0.337579383723936);
            Assert.False(tree.Find(0.238648117042469, 0.415583890798485, 0.332189590955134, 0.400570765971806, out id));
            // Step 62
            tree.Insert(0.889317174899781, 0.982722169069015, 36);
            Assert.True(tree.Find(0.188425457244697, 0.803723466456424, 0.413861531766509, 0.474094059332271, out id));
            Assert.True((new List<ulong> { 30 }).Contains(id));
            // Step 63
            tree.Insert(0.753998250873339, 0.322391076251394, 37);
            Assert.False(tree.Find(0.078684251495927, 0.340949116648671, 0.223226184970985, 0.429874046751034, out id));
            // Step 64
            tree.Erase(0.466337218996688, 0.543056208694436);
            Assert.True(tree.Find(0.376465470131225, 0.794877589359814, 0.079154526446195, 0.558942227794823, out id));
            Assert.True((new List<ulong> { 30, 33, 35, 37 }).Contains(id));
            // Step 65
            tree.Erase(0.635582815082928, 0.130960871991425);
            Assert.False(tree.Find(0.581703986386518, 0.858223833926995, 0.919656176426406, 0.984088992277899, out id));
            // Step 66
            tree.Erase(0.946267490647386, 0.807943050917319);
            Assert.True(tree.Find(0.185890377532984, 0.213711156942398, 0.064548085220391, 0.198207150316996, out id));
            Assert.True((new List<ulong> { 14 }).Contains(id));
            // Step 67
            tree.Erase(0.201615530122206, 0.071723665928467);
            Assert.False(tree.Find(0.688852571338550, 0.728019596173644, 0.333137797977814, 0.781531340695790, out id));
            // Step 68
            tree.Insert(0.474255681778125, 0.151689130390273, 38);
            Assert.True(tree.Find(0.389249313655590, 0.948029451642693, 0.277490029210290, 0.498639256659405, out id));
            Assert.True((new List<ulong> { 24, 26, 30, 35, 37 }).Contains(id));
            // Step 69
            tree.Erase(0.677500555639359, 0.487118539603719);
            Assert.False(tree.Find(0.674540496417361, 0.699420964287421, 0.213150439994490, 0.553578270391958, out id));
            // Step 70
            tree.Insert(0.177995045231283, 0.229138779897595, 39);
            Assert.True(tree.Find(0.142414707194104, 0.723919928178771, 0.230139141630653, 0.966226800997303, out id));
            Assert.True((new List<ulong> { 30, 34 }).Contains(id));
            // Step 71
            tree.Erase(0.647598492098710, 0.454083788940173);
            Assert.False(tree.Find(0.524114756923159, 0.732081459066795, 0.294764406481425, 0.312601336499492, out id));
            // Step 72
            tree.Erase(0.889317174899781, 0.982722169069015);
            Assert.True(tree.Find(0.133032428881116, 0.365989771725095, 0.055823393307003, 0.809849330747689, out id));
            Assert.True((new List<ulong> { 34, 39 }).Contains(id));
            // Step 73
            tree.Insert(0.224586941440530, 0.534021142385546, 40);
            Assert.False(tree.Find(0.074784689277436, 0.093540224691652, 0.899981173023824, 0.921497024224799, out id));
            // Step 74
            tree.Insert(0.600915984425258, 0.052054203259253, 41);
            Assert.False(tree.Find(0.362782043359897, 0.413524795079237, 0.329330573535680, 0.336434210909623, out id));
            // Step 75
            tree.Insert(0.644351137230334, 0.365716747629584, 42);
            Assert.True(tree.Find(0.203515376831118, 0.580592453186312, 0.435253286626252, 0.536754901213551, out id));
            Assert.True((new List<ulong> { 40 }).Contains(id));
            // Step 76
            tree.Insert(0.842046217260300, 0.969969806460038, 43);
            Assert.False(tree.Find(0.275429444995980, 0.364098577094112, 0.815549343724019, 0.848763750295024, out id));
            // Step 77
            tree.Insert(0.311360134015637, 0.443573297112826, 44);
            Assert.False(tree.Find(0.849254404676991, 0.853779732596803, 0.595319695346955, 0.851089193215281, out id));
            // Step 78
            tree.Erase(0.311360134015637, 0.443573297112826);
            Assert.True(tree.Find(0.297078590715548, 0.813091844258115, 0.223046796270653, 0.378829865634594, out id));
            Assert.True((new List<ulong> { 37, 42 }).Contains(id));
            // Step 79
            tree.Erase(0.177995045231283, 0.229138779897595);
            Assert.True(tree.Find(0.166584819617218, 0.631840931245929, 0.046609678236401, 0.117914622404212, out id));
            Assert.True((new List<ulong> { 41 }).Contains(id));
            // Step 80
            tree.Insert(0.725667255417384, 0.033967573325414, 45);
            Assert.True(tree.Find(0.388028909791092, 0.924516574720681, 0.017080413849156, 0.112542014278102, out id));
            Assert.True((new List<ulong> { 41, 45 }).Contains(id));
            // Step 81
            tree.Erase(0.874793269925270, 0.420492014673396);
            Assert.False(tree.Find(0.632796100050065, 0.895195730009290, 0.390229692022343, 0.475472763346949, out id));
            // Step 82
            tree.Insert(0.645485895398505, 0.311907882543934, 46);
            Assert.False(tree.Find(0.185652735544198, 0.213754283070068, 0.219403543366143, 0.246473539822307, out id));
            // Step 83
            tree.Erase(0.645485895398505, 0.311907882543934);
            Assert.False(tree.Find(0.456804516218403, 0.631469488393714, 0.600230775510404, 0.952664556410076, out id));
            // Step 84
            tree.Erase(0.474255681778125, 0.151689130390273);
            Assert.False(tree.Find(0.252130812926244, 0.354289278741102, 0.109714829683797, 0.279140795613486, out id));
            // Step 85
            tree.Insert(0.321781302369224, 0.948451579767784, 47);
            Assert.False(tree.Find(0.387047041453029, 0.575315466069906, 0.227634080900554, 0.868383372901185, out id));
            // Step 86
            tree.Erase(0.842046217260300, 0.969969806460038);
            Assert.False(tree.Find(0.814082830510975, 0.948540594432102, 0.143127535736633, 0.181727468460343, out id));
            // Step 87
            tree.Erase(0.753998250873339, 0.322391076251394);
            Assert.True(tree.Find(0.279227192609411, 0.710790785184614, 0.374532114072779, 0.668144822675643, out id));
            Assert.True((new List<ulong> { 34 }).Contains(id));
            // Step 88
            tree.Erase(0.600915984425258, 0.052054203259253);
            Assert.False(tree.Find(0.644922467484281, 0.822768367944645, 0.615030419666424, 0.979551081968091, out id));
            // Step 89
            tree.Insert(0.087718775201703, 0.525354866249056, 48);
            Assert.False(tree.Find(0.204916709312515, 0.545348393499688, 0.080485050346656, 0.162855616716994, out id));
            // Step 90
            tree.Erase(0.343267420741677, 0.551546136219896);
            Assert.False(tree.Find(0.424275015751295, 0.659905871319496, 0.433806530571454, 0.439803654729286, out id));
            // Step 91
            tree.Insert(0.996528621705891, 0.427659848755958, 49);
            Assert.False(tree.Find(0.387381959579786, 0.446013003678180, 0.214925667277835, 0.939838263780159, out id));
            // Step 92
            tree.Erase(0.224586941440530, 0.534021142385546);
            Assert.False(tree.Find(0.157909304691410, 0.209752934373181, 0.302283570135519, 0.553406821970704, out id));
            // Step 93
            tree.Erase(0.850668578916750, 0.344972192669115);
            Assert.False(tree.Find(0.252913956615267, 0.979675546039714, 0.402139569399883, 0.936618780051670, out id));
            // Step 94
            tree.Insert(0.560809014771639, 0.137645883726041, 50);
            Assert.True(tree.Find(0.425702287894133, 0.872481580822674, 0.003650738098395, 0.865305229082638, out id));
            Assert.True((new List<ulong> { 42, 45, 50 }).Contains(id));
            // Step 95
            tree.Insert(0.336313677075842, 0.919169839574688, 51);
            Assert.False(tree.Find(0.662805519236951, 0.947165613463785, 0.465313523180574, 0.591727356142509, out id));
            // Step 96
            tree.Erase(0.725667255417384, 0.033967573325414);
            Assert.False(tree.Find(0.261198772795684, 0.369584831233903, 0.018516590125854, 0.230659193454606, out id));
            // Step 97
            tree.Insert(0.481390332888214, 0.287154374671545, 52);
            Assert.False(tree.Find(0.532798298748934, 0.768538575904067, 0.777190686161802, 0.908748301841814, out id));
            // Step 98
            tree.Erase(0.321781302369224, 0.948451579767784);
            Assert.True(tree.Find(0.144057078577911, 0.421437135940923, 0.084231324914657, 0.929721111275326, out id));
            Assert.True((new List<ulong> { 51 }).Contains(id));
            // Step 99
            tree.Erase(0.644351137230334, 0.365716747629584);
            Assert.False(tree.Find(0.124520689229831, 0.397797872257532, 0.074647185819318, 0.199367509139757, out id));
            // Step 100
            tree.Insert(0.760240243385668, 0.389278913692553, 53);
            Assert.True(tree.Find(0.231455443400513, 0.537925890140562, 0.194591644122256, 0.775229810852862, out id));
            Assert.True((new List<ulong> { 52 }).Contains(id));
            // Step 101
            tree.Insert(0.294887753902653, 0.484020918236374, 54);
            Assert.False(tree.Find(0.019852842574172, 0.218482051611545, 0.345648730214255, 0.347880023690007, out id));
            // Step 102
            tree.Insert(0.692360561025320, 0.143230250220815, 55);
            Assert.True(tree.Find(0.029748383531539, 0.363696367236921, 0.490796474409190, 0.755748050466659, out id));
            Assert.True((new List<ulong> { 48 }).Contains(id));
            // Step 103
            tree.Erase(0.294887753902653, 0.484020918236374);
            Assert.False(tree.Find(0.655781296619461, 0.990443203918234, 0.927804062466824, 0.934492824921268, out id));
            // Step 104
            tree.Erase(0.692360561025320, 0.143230250220815);
            Assert.True(tree.Find(0.639365689779764, 0.955012794360997, 0.352380460620486, 0.823696497554876, out id));
            Assert.True((new List<ulong> { 53 }).Contains(id));
            // Step 105
            tree.Insert(0.094143776552647, 0.464192179920320, 56);
            Assert.False(tree.Find(0.220618839100627, 0.936909686823834, 0.456971316524616, 0.649551604424196, out id));
            // Step 106
            tree.Insert(0.572278664197158, 0.750533418313554, 57);
            Assert.False(tree.Find(0.198602009292390, 0.333515329660453, 0.374504605546075, 0.426116909690166, out id));
            // Step 107
            tree.Erase(0.094143776552647, 0.464192179920320);
            Assert.False(tree.Find(0.004483042006587, 0.053283726464088, 0.518142488330470, 0.556331661394887, out id));
            // Step 108
            tree.Erase(0.760240243385668, 0.389278913692553);
            Assert.False(tree.Find(0.825736684771199, 0.903764697066574, 0.487332836498422, 0.628947897803845, out id));
            // Step 109
            tree.Insert(0.738770898331636, 0.039735786362320, 58);
            Assert.True(tree.Find(0.311694670837033, 0.629958003473543, 0.164641725898028, 0.894250001774949, out id));
            Assert.True((new List<ulong> { 52, 57 }).Contains(id));
            // Step 110
            tree.Insert(0.758398217874016, 0.360055812411529, 59);
            Assert.True(tree.Find(0.070172411375982, 0.764059601757793, 0.477139115027358, 0.803982659883202, out id));
            Assert.True((new List<ulong> { 48, 57 }).Contains(id));
            // Step 111
            tree.Insert(0.281988321530816, 0.830626060778784, 60);
            Assert.True(tree.Find(0.116652286071824, 0.990205306711447, 0.645453407868585, 0.901061653670046, out id));
            Assert.True((new List<ulong> { 57, 60 }).Contains(id));
            // Step 112
            tree.Erase(0.281988321530816, 0.830626060778784);
            Assert.True(tree.Find(0.434996995364416, 0.953422280080418, 0.190559042150779, 0.467951632421285, out id));
            Assert.True((new List<ulong> { 52, 59 }).Contains(id));
            // Step 113
            tree.Insert(0.766377828046546, 0.431540227440614, 61);
            Assert.True(tree.Find(0.610561473429032, 0.845312651687750, 0.268503579105143, 0.502795918429835, out id));
            Assert.True((new List<ulong> { 59, 61 }).Contains(id));
            // Step 114
            tree.Erase(0.560809014771639, 0.137645883726041);
            Assert.False(tree.Find(0.028412950890985, 0.137750797679844, 0.222485754658363, 0.438022691452453, out id));
            // Step 115
            tree.Insert(0.422167636394834, 0.376529561819707, 62);
            Assert.False(tree.Find(0.058956433737768, 0.217831273533876, 0.845298685388790, 0.895244726227848, out id));
            // Step 116
            tree.Insert(0.853914189339845, 0.573900194506397, 63);
            Assert.True(tree.Find(0.505856173593827, 0.911725876786252, 0.043942129557140, 0.983589394955498, out id));
            Assert.True((new List<ulong> { 57, 59, 61, 63 }).Contains(id));
            // Step 117
            tree.Erase(0.996528621705891, 0.427659848755958);
            Assert.True(tree.Find(0.461954830415268, 0.807317037948714, 0.187357632170485, 0.891095212146954, out id));
            Assert.True((new List<ulong> { 52, 57, 59, 61 }).Contains(id));
            // Step 118
            tree.Erase(0.336313677075842, 0.919169839574688);
            Assert.False(tree.Find(0.312032161384871, 0.337151082932694, 0.566294099668844, 0.615392943120250, out id));
            // Step 119
            tree.Erase(0.481390332888214, 0.287154374671545);
            Assert.False(tree.Find(0.862584177088408, 0.895272090421875, 0.360941818049583, 0.449360209706557, out id));
            // Step 120
            tree.Erase(0.087718775201703, 0.525354866249056);
            Assert.False(tree.Find(0.643295735998986, 0.655060220732449, 0.063828742156603, 0.628028780952338, out id));
            // Step 121
            tree.Insert(0.460849372433190, 0.658531769055761, 64);
            Assert.True(tree.Find(0.323525953468024, 0.689415562859278, 0.428911576969980, 0.728591948524166, out id));
            Assert.True((new List<ulong> { 64 }).Contains(id));
            // Step 122
            tree.Insert(0.185823171647951, 0.801086779106400, 65);
            Assert.True(tree.Find(0.387109060422318, 0.723167000274717, 0.297462996626269, 0.535691273909509, out id));
            Assert.True((new List<ulong> { 62 }).Contains(id));
            // Step 123
            tree.Erase(0.766377828046546, 0.431540227440614);
            Assert.False(tree.Find(0.368858304639515, 0.776145679541198, 0.136904445643134, 0.281119097949981, out id));
            // Step 124
            tree.Erase(0.853914189339845, 0.573900194506397);
            Assert.True(tree.Find(0.509886506894638, 0.995219203097113, 0.301225081091474, 0.372245946845295, out id));
            Assert.True((new List<ulong> { 59 }).Contains(id));
            // Step 125
            tree.Insert(0.088963092282182, 0.312375927861060, 66);
            Assert.False(tree.Find(0.787755300718237, 0.998608890079297, 0.293646053115605, 0.532096942153151, out id));
            // Step 126
            tree.Insert(0.934951696014039, 0.276975111721309, 67);
            Assert.True(tree.Find(0.204769558818534, 0.845956864297139, 0.304572010482235, 0.373719469022849, out id));
            Assert.True((new List<ulong> { 59 }).Contains(id));
            // Step 127
            tree.Erase(0.934951696014039, 0.276975111721309);
            Assert.True(tree.Find(0.476113987857031, 0.796620057640432, 0.555819125031620, 0.899692145673995, out id));
            Assert.True((new List<ulong> { 57 }).Contains(id));
            // Step 128
            tree.Insert(0.312891585936574, 0.758554343341393, 68);
            Assert.False(tree.Find(0.854007404959516, 0.932414568641033, 0.615782181841087, 0.862371876773635, out id));
            // Step 129
            tree.Insert(0.868076319524781, 0.332829778041216, 69);
            Assert.True(tree.Find(0.530397008364502, 0.778088542688846, 0.404400535132702, 0.775886038644564, out id));
            Assert.True((new List<ulong> { 57 }).Contains(id));
            // Step 130
            tree.Erase(0.738770898331636, 0.039735786362320);
            Assert.True(tree.Find(0.000000794651625, 0.225569540368378, 0.115971756219092, 0.433133962577234, out id));
            Assert.True((new List<ulong> { 66 }).Contains(id));
            // Step 131
            tree.Erase(0.572278664197158, 0.750533418313554);
            Assert.False(tree.Find(0.363276215876993, 0.799928583599351, 0.099511520896332, 0.145892255044747, out id));
            // Step 132
            tree.Insert(0.383110894897533, 0.849685896958371, 70);
            Assert.False(tree.Find(0.508822278262021, 0.632156077948576, 0.116263858559801, 0.710187418408444, out id));
            // Step 133
            tree.Insert(0.056449134313797, 0.461373686595542, 71);
            Assert.True(tree.Find(0.329507833151723, 0.615829817270325, 0.117490092386406, 0.611246161342278, out id));
            Assert.True((new List<ulong> { 62 }).Contains(id));
            // Step 134
            tree.Erase(0.460849372433190, 0.658531769055761);
            Assert.False(tree.Find(0.937018187621420, 0.972036098128193, 0.434867129869782, 0.813115929304143, out id));
            // Step 135
            tree.Insert(0.876655101587032, 0.230893560957402, 72);
            Assert.False(tree.Find(0.717486378368526, 0.768181925740384, 0.782454518681040, 0.852735761764969, out id));
            // Step 136
            tree.Erase(0.056449134313797, 0.461373686595542);
            Assert.True(tree.Find(0.081528872875552, 0.357776972834862, 0.088889725770174, 0.893344646473348, out id));
            Assert.True((new List<ulong> { 65, 66, 68 }).Contains(id));
            // Step 137
            tree.Erase(0.868076319524781, 0.332829778041216);
            Assert.True(tree.Find(0.142195111683315, 0.406953798490052, 0.379806696352473, 0.762842674412373, out id));
            Assert.True((new List<ulong> { 68 }).Contains(id));
            // Step 138
            tree.Insert(0.643267859977655, 0.711668147001312, 73);
            Assert.False(tree.Find(0.247452074506700, 0.742424259582969, 0.046751363109947, 0.277558328726151, out id));
            // Step 139
            tree.Erase(0.383110894897533, 0.849685896958371);
            Assert.True(tree.Find(0.033656038373604, 0.243216379768435, 0.256072065228101, 0.568704978076666, out id));
            Assert.True((new List<ulong> { 66 }).Contains(id));
            // Step 140
            tree.Erase(0.876655101587032, 0.230893560957402);
            Assert.False(tree.Find(0.229614332767743, 0.782572803333803, 0.430806273254827, 0.561106266388937, out id));
            // Step 141
            tree.Insert(0.244110371346422, 0.425242787270459, 74);
            Assert.False(tree.Find(0.768105268138122, 0.875336684758099, 0.440548511644319, 0.725526278657050, out id));
            // Step 142
            tree.Insert(0.830810981121783, 0.840072203486564, 75);
            Assert.True(tree.Find(0.424285940201841, 0.725666678793214, 0.677283906024334, 0.988834167402934, out id));
            Assert.True((new List<ulong> { 73 }).Contains(id));
            // Step 143
            tree.Erase(0.185823171647951, 0.801086779106400);
            Assert.False(tree.Find(0.424409103691608, 0.764990498500726, 0.018304055253122, 0.090813233623827, out id));
            // Step 144
            tree.Insert(0.113431122449786, 0.213407146928429, 76);
            Assert.True(tree.Find(0.181037036742964, 0.929545464403972, 0.455714399709927, 0.720415231603178, out id));
            Assert.True((new List<ulong> { 73 }).Contains(id));
            // Step 145
            tree.Erase(0.643267859977655, 0.711668147001312);
            Assert.False(tree.Find(0.158159692272326, 0.995492129627761, 0.880444683125976, 0.915370172465235, out id));
            // Step 146
            tree.Erase(0.312891585936574, 0.758554343341393);
            Assert.True(tree.Find(0.202604182469038, 0.923252289951098, 0.009171853103872, 0.607668766992886, out id));
            Assert.True((new List<ulong> { 59, 62, 74 }).Contains(id));
            // Step 147
            tree.Insert(0.612311353591397, 0.354670122406439, 77);
            Assert.True(tree.Find(0.412332249920804, 0.824136804641483, 0.078169711189082, 0.810491596937269, out id));
            Assert.True((new List<ulong> { 59, 62, 77 }).Contains(id));
            // Step 148
            tree.Insert(0.066286475588672, 0.375932834300907, 78);
            Assert.False(tree.Find(0.332533266829911, 0.991891494233900, 0.538164603008612, 0.586455497213356, out id));
            // Step 149
            tree.Insert(0.584929165874086, 0.537755252978208, 79);
            Assert.True(tree.Find(0.324156894592762, 0.878845962437523, 0.386319101749559, 0.840187900884002, out id));
            Assert.True((new List<ulong> { 75, 79 }).Contains(id));
            // Step 150
            tree.Erase(0.584929165874086, 0.537755252978208);
            Assert.False(tree.Find(0.263644504081210, 0.531651951318279, 0.104641626161256, 0.109309357631188, out id));
            // Step 151
            tree.Insert(0.266391163997668, 0.235870718499650, 80);
            Assert.False(tree.Find(0.440888900513708, 0.540740990550067, 0.035154176575206, 0.944064273055232, out id));
            // Step 152
            tree.Erase(0.612311353591397, 0.354670122406439);
            Assert.True(tree.Find(0.064250105957017, 0.426260785864973, 0.056240094673056, 0.455306458690801, out id));
            Assert.True((new List<ulong> { 62, 66, 74, 76, 78, 80 }).Contains(id));
            // Step 153
            tree.Erase(0.066286475588672, 0.375932834300907);
            Assert.True(tree.Find(0.259724047421360, 0.330474353135324, 0.002868507419198, 0.991335968969037, out id));
            Assert.True((new List<ulong> { 80 }).Contains(id));
            // Step 154
            tree.Insert(0.130180928818946, 0.193136082416256, 81);
            Assert.True(tree.Find(0.057333365719645, 0.250593389884725, 0.220409536334327, 0.346525719347984, out id));
            Assert.True((new List<ulong> { 66 }).Contains(id));
            // Step 155
            tree.Erase(0.758398217874016, 0.360055812411529);
            Assert.True(tree.Find(0.812708373833055, 0.925332919098093, 0.488441210473119, 0.888061221007220, out id));
            Assert.True((new List<ulong> { 75 }).Contains(id));
            // Step 156
            tree.Insert(0.738077111791491, 0.572521802197408, 82);
            Assert.False(tree.Find(0.172642520036983, 0.466446998508927, 0.624430630539465, 0.717605503350198, out id));
            // Step 157
            tree.Erase(0.738077111791491, 0.572521802197408);
            Assert.True(tree.Find(0.585648158966004, 0.859857192677777, 0.003886300999953, 0.935076488958239, out id));
            Assert.True((new List<ulong> { 75 }).Contains(id));
            // Step 158
            tree.Insert(0.527972318471060, 0.696156421909511, 83);
            Assert.False(tree.Find(0.778223861244504, 0.920426594666357, 0.082264072801088, 0.714352079641564, out id));
            // Step 159
            tree.Insert(0.779170705303448, 0.975913477746454, 84);
            Assert.True(tree.Find(0.344260852646375, 0.893096991922423, 0.046028210418714, 0.957231724050252, out id));
            Assert.True((new List<ulong> { 62, 75, 83 }).Contains(id));
            // Step 160
            tree.Erase(0.266391163997668, 0.235870718499650);
            Assert.True(tree.Find(0.366371560121553, 0.733264333546604, 0.241514400065653, 0.546017522226630, out id));
            Assert.True((new List<ulong> { 62 }).Contains(id));
            // Step 161
            tree.Insert(0.690656549665262, 0.904974412480701, 85);
            Assert.True(tree.Find(0.005701454065414, 0.876045719044613, 0.107832464990891, 0.416103371552578, out id));
            Assert.True((new List<ulong> { 62, 66, 76, 81 }).Contains(id));
            // Step 162
            tree.Insert(0.659714298842946, 0.923250244026706, 86);
            Assert.False(tree.Find(0.354661242816218, 0.869734162339247, 0.609027152760970, 0.658273854764267, out id));
            // Step 163
            tree.Insert(0.470211837980967, 0.315203349971315, 87);
            Assert.False(tree.Find(0.572797079496172, 0.964104559046573, 0.383902168532346, 0.413481703658838, out id));
            // Step 164
            tree.Insert(0.714689881615771, 0.206936040484972, 88);
            Assert.False(tree.Find(0.291575677787703, 0.364167701035908, 0.158739176340083, 0.479415109732744, out id));
            // Step 165
            tree.Insert(0.114890091149996, 0.568771356897048, 89);
            Assert.False(tree.Find(0.291483073385053, 0.835354078542660, 0.425585442807399, 0.517430994851395, out id));
            // Step 166
            tree.Erase(0.714689881615771, 0.206936040484972);
            Assert.True(tree.Find(0.012880970422240, 0.824423179481584, 0.854875228711787, 0.921053478857263, out id));
            Assert.True((new List<ulong> { 85 }).Contains(id));
            // Step 167
            tree.Erase(0.244110371346422, 0.425242787270459);
            Assert.True(tree.Find(0.207481481307667, 0.710729275190284, 0.086165135837482, 0.343975785585327, out id));
            Assert.True((new List<ulong> { 87 }).Contains(id));
            // Step 168
            tree.Insert(0.835999907564743, 0.388421818273418, 90);
            Assert.True(tree.Find(0.275383920437993, 0.891304928376277, 0.061395527346013, 0.966252600855419, out id));
            Assert.True((new List<ulong> { 62, 75, 83, 85, 86, 87, 90 }).Contains(id));
            // Step 169
            tree.Erase(0.527972318471060, 0.696156421909511);
            Assert.False(tree.Find(0.166486972482275, 0.383211991636123, 0.434579853222319, 0.600169730221615, out id));
            // Step 170
            tree.Insert(0.023003737737137, 0.023949748586698, 91);
            Assert.True(tree.Find(0.579263888907670, 0.937650203576261, 0.118732643488023, 0.465091243741004, out id));
            Assert.True((new List<ulong> { 90 }).Contains(id));
            // Step 171
            tree.Insert(0.595686605737535, 0.745432219192384, 92);
            Assert.False(tree.Find(0.135931784700831, 0.440235253502629, 0.868183145228613, 0.895360170642620, out id));
            // Step 172
            tree.Erase(0.595686605737535, 0.745432219192384);
            Assert.True(tree.Find(0.413244404330986, 0.880080839770510, 0.257173130708885, 0.834493278522088, out id));
            Assert.True((new List<ulong> { 62, 87, 90 }).Contains(id));
            // Step 173
            tree.Erase(0.690656549665262, 0.904974412480701);
            Assert.True(tree.Find(0.307061434521019, 0.811720648712247, 0.127893462195749, 0.512285761701591, out id));
            Assert.True((new List<ulong> { 62, 87 }).Contains(id));
            // Step 174
            tree.Erase(0.130180928818946, 0.193136082416256);
            Assert.False(tree.Find(0.121746996340444, 0.357422176372888, 0.876081870765961, 0.880848709830094, out id));
            // Step 175
            tree.Erase(0.023003737737137, 0.023949748586698);
            Assert.True(tree.Find(0.381098237646355, 0.771813651405302, 0.179965859987860, 0.497133246366133, out id));
            Assert.True((new List<ulong> { 62, 87 }).Contains(id));
            // Step 176
            tree.Insert(0.670677144172539, 0.857065445005613, 93);
            Assert.False(tree.Find(0.273369656376593, 0.625117354535724, 0.396327373333782, 0.987432902452592, out id));
            // Step 177
            tree.Insert(0.952398505263165, 0.396173344019750, 94);
            Assert.False(tree.Find(0.129185216292931, 0.293957449255432, 0.001571382855692, 0.593266804451954, out id));
            // Step 178
            tree.Erase(0.470211837980967, 0.315203349971315);
            Assert.False(tree.Find(0.188958246709631, 0.521847623847917, 0.269927956512011, 0.331773568824351, out id));
            // Step 179
            tree.Erase(0.670677144172539, 0.857065445005613);
            Assert.False(tree.Find(0.612247744349693, 0.761418143030509, 0.192743592286655, 0.398112433622217, out id));
            // Step 180
            tree.Insert(0.173124235134808, 0.384498862456006, 95);
            Assert.False(tree.Find(0.146810300285609, 0.981408667222452, 0.507086137979588, 0.734862370936377, out id));
            // Step 181
            tree.Erase(0.088963092282182, 0.312375927861060);
            Assert.True(tree.Find(0.285302422025677, 0.974691889923044, 0.878382198371488, 0.951219257378076, out id));
            Assert.True((new List<ulong> { 86 }).Contains(id));
            // Step 182
            tree.Erase(0.422167636394834, 0.376529561819707);
            Assert.False(tree.Find(0.860541128170801, 0.907358580292522, 0.837616842764114, 0.972697370836704, out id));
            // Step 183
            tree.Erase(0.114890091149996, 0.568771356897048);
            Assert.False(tree.Find(0.492442838822784, 0.606919444095686, 0.192396099172833, 0.609327506181901, out id));
            // Step 184
            tree.Erase(0.952398505263165, 0.396173344019750);
            Assert.False(tree.Find(0.501066081312004, 0.712851441640995, 0.649737296427857, 0.882604172407697, out id));
            // Step 185
            tree.Insert(0.779135435036046, 0.177714703465844, 96);
            Assert.False(tree.Find(0.596441250210833, 0.763969661242478, 0.435596308219143, 0.597437355301289, out id));
            // Step 186
            tree.Insert(0.200981212157308, 0.794889978361587, 97);
            Assert.False(tree.Find(0.547712598912895, 0.567964038553211, 0.120090141536880, 0.520399005892279, out id));
            // Step 187
            tree.Insert(0.881586505062728, 0.633786096964984, 98);
            Assert.False(tree.Find(0.564915344582584, 0.820068991880129, 0.473027564474678, 0.795707069989251, out id));
            // Step 188
            tree.Erase(0.779135435036046, 0.177714703465844);
            Assert.True(tree.Find(0.003965040833736, 0.287079701210823, 0.210109517549159, 0.362145037424939, out id));
            Assert.True((new List<ulong> { 76 }).Contains(id));
            // Step 189
            tree.Insert(0.374874801854174, 0.180636324958671, 99);
            Assert.False(tree.Find(0.341122320196649, 0.695248168033007, 0.415682752127120, 0.645613079903981, out id));
            // Step 190
            tree.Insert(0.446566970297478, 0.049299618369330, 100);
            Assert.True(tree.Find(0.149228145440681, 0.326787553359127, 0.242177088908779, 0.921344189645184, out id));
            Assert.True((new List<ulong> { 95, 97 }).Contains(id));
            // Step 191
            tree.Erase(0.374874801854174, 0.180636324958671);
            Assert.False(tree.Find(0.248148201960766, 0.961325673681519, 0.663677557083872, 0.832812252922646, out id));
            // Step 192
            tree.Erase(0.200981212157308, 0.794889978361587);
            Assert.False(tree.Find(0.345009191029552, 0.940387940465037, 0.135364837353083, 0.200351327943847, out id));
            // Step 193
            tree.Erase(0.881586505062728, 0.633786096964984);
            Assert.True(tree.Find(0.433564239171058, 0.892955411383449, 0.513608244148603, 0.912307995111762, out id));
            Assert.True((new List<ulong> { 75 }).Contains(id));
            // Step 194
            tree.Insert(0.675816282332805, 0.947038333481208, 101);
            Assert.True(tree.Find(0.136985047553438, 0.682507985784301, 0.226332126545767, 0.672517800318930, out id));
            Assert.True((new List<ulong> { 95 }).Contains(id));
            // Step 195
            tree.Erase(0.830810981121783, 0.840072203486564);
            Assert.True(tree.Find(0.366725019172299, 0.920846556984016, 0.024172513987352, 0.619611754832162, out id));
            Assert.True((new List<ulong> { 90, 100 }).Contains(id));
            // Step 196
            tree.Insert(0.864298451255749, 0.254155795621682, 102);
            Assert.False(tree.Find(0.848857474376339, 0.930883396879692, 0.266948462758826, 0.905053275376188, out id));
            // Step 197
            tree.Erase(0.675816282332805, 0.947038333481208);
            Assert.False(tree.Find(0.766454532913599, 0.968123472486422, 0.073776714206215, 0.193203286427122, out id));
            // Step 198
            tree.Insert(0.294605231243363, 0.540870549972976, 103);
            Assert.True(tree.Find(0.209093317314324, 0.311222556834556, 0.124634266383370, 0.826117420006949, out id));
            Assert.True((new List<ulong> { 103 }).Contains(id));
            // Step 199
            tree.Insert(0.515996055284124, 0.108618849098940, 104);
            Assert.False(tree.Find(0.403332526508044, 0.448488026124072, 0.294375735308554, 0.930208105926925, out id));
            // Step 200
            tree.Insert(0.347626467611943, 0.101484825156148, 105);
            Assert.True(tree.Find(0.787761786423839, 0.902121446042677, 0.331847490411917, 0.731143047647994, out id));
            Assert.True((new List<ulong> { 90 }).Contains(id));
        }

        [Fact]
        public void SegmentTree1dTest()
        {
            var tree = new AdaptiveGrid.SegmentTree1d();
            ulong id;

            // Step 1
            tree.Insert(0.695426297609277, 1);
            Assert.False(tree.Find(0.220334757669705, 0.226039508125436, out id));
            // Step 2
            tree.Insert(0.931147035981768, 2);
            Assert.True(tree.Find(0.455785511242288, 0.696671768746859, out id));
            Assert.True((new List<ulong> { 1 }).Contains(id));
            // Step 3
            tree.Insert(0.146930493214323, 3);
            Assert.False(tree.Find(0.806457363648287, 0.862264063839046, out id));
            // Step 4
            tree.Insert(0.910012967142810, 4);
            Assert.True(tree.Find(0.129991343541263, 0.306508576043232, out id));
            Assert.True((new List<ulong> { 3 }).Contains(id));
            // Step 5
            tree.Insert(0.996830518609382, 5);
            Assert.True(tree.Find(0.834170296627908, 0.990098508532564, out id));
            Assert.True((new List<ulong> { 4, 2 }).Contains(id));
            // Step 6
            tree.Insert(0.824141358789727, 6);
            Assert.False(tree.Find(0.200190387366221, 0.402598295844696, out id));
            // Step 7
            tree.Insert(0.631148144201673, 7);
            Assert.True(tree.Find(0.565951187716875, 0.904523231750140, out id));
            Assert.True((new List<ulong> { 7, 1, 6 }).Contains(id));
            // Step 8
            tree.Insert(0.436406549020246, 8);
            Assert.False(tree.Find(0.728078742458124, 0.814227656098355, out id));
            // Step 9
            tree.Insert(0.341663278523245, 9);
            Assert.True(tree.Find(0.253981028442768, 0.411163365479249, out id));
            Assert.True((new List<ulong> { 9 }).Contains(id));
            // Step 10
            tree.Erase(0.824141358789727);
            Assert.True(tree.Find(0.335166171695104, 0.452224807958444, out id));
            Assert.True((new List<ulong> { 9, 8 }).Contains(id));
            // Step 11
            tree.Erase(0.695426297609277);
            Assert.True(tree.Find(0.269606352869974, 0.527614294208102, out id));
            Assert.True((new List<ulong> { 9, 8 }).Contains(id));
            // Step 12
            tree.Insert(0.848168777661578, 10);
            Assert.True(tree.Find(0.372416870006718, 0.881177212080177, out id));
            Assert.True((new List<ulong> { 8, 7, 10 }).Contains(id));
            // Step 13
            tree.Erase(0.996830518609382);
            Assert.True(tree.Find(0.021302887101981, 0.602118934624006, out id));
            Assert.True((new List<ulong> { 3, 9, 8 }).Contains(id));
            // Step 14
            tree.Insert(0.249287635706771, 11);
            Assert.False(tree.Find(0.289945602344234, 0.311393127692204, out id));
            // Step 15
            tree.Erase(0.341663278523245);
            Assert.True(tree.Find(0.517502458785313, 0.696035394490095, out id));
            Assert.True((new List<ulong> { 7 }).Contains(id));
            // Step 16
            tree.Erase(0.436406549020246);
            Assert.True(tree.Find(0.116445553766486, 0.641417819861506, out id));
            Assert.True((new List<ulong> { 3, 11, 7 }).Contains(id));
            // Step 17
            tree.Insert(0.947068817187060, 12);
            Assert.True(tree.Find(0.388301909669220, 0.911110890094753, out id));
            Assert.True((new List<ulong> { 7, 10, 4 }).Contains(id));
            // Step 18
            tree.Erase(0.631148144201673);
            Assert.False(tree.Find(0.325307196507592, 0.790741673731960, out id));
            // Step 19
            tree.Erase(0.947068817187060);
            Assert.True(tree.Find(0.196906700082393, 0.270286085648776, out id));
            Assert.True((new List<ulong> { 11 }).Contains(id));
            // Step 20
            tree.Insert(0.522231903255538, 13);
            Assert.True(tree.Find(0.137433117399291, 0.274232908246831, out id));
            Assert.True((new List<ulong> { 3, 11 }).Contains(id));
            // Step 21
            tree.Insert(0.972595904066717, 14);
            Assert.True(tree.Find(0.199653549456125, 0.491940328775061, out id));
            Assert.True((new List<ulong> { 11 }).Contains(id));
            // Step 22
            tree.Insert(0.580316107716154, 15);
            Assert.True(tree.Find(0.161643759034116, 0.807391881913991, out id));
            Assert.True((new List<ulong> { 11, 13, 15 }).Contains(id));
            // Step 23
            tree.Insert(0.164877411424116, 16);
            Assert.True(tree.Find(0.229895301492534, 0.454282100654232, out id));
            Assert.True((new List<ulong> { 11 }).Contains(id));
            // Step 24
            tree.Erase(0.249287635706771);
            Assert.True(tree.Find(0.368452317727245, 0.709465704773515, out id));
            Assert.True((new List<ulong> { 13, 15 }).Contains(id));
            // Step 25
            tree.Insert(0.335742966956731, 17);
            Assert.True(tree.Find(0.132512067528426, 0.701242034498281, out id));
            Assert.True((new List<ulong> { 3, 16, 17, 13, 15 }).Contains(id));
            // Step 26
            tree.Erase(0.522231903255538);
            Assert.True(tree.Find(0.053095580694360, 0.451100766606730, out id));
            Assert.True((new List<ulong> { 3, 16, 17 }).Contains(id));
            // Step 27
            tree.Erase(0.910012967142810);
            Assert.True(tree.Find(0.149044389338568, 0.436419340312391, out id));
            Assert.True((new List<ulong> { 16, 17 }).Contains(id));
            // Step 28
            tree.Insert(0.367093222527155, 18);
            Assert.True(tree.Find(0.109295805848891, 0.603027646358197, out id));
            Assert.True((new List<ulong> { 3, 16, 17, 18, 15 }).Contains(id));
            // Step 29
            tree.Insert(0.215204941473566, 19);
            Assert.True(tree.Find(0.057484553415756, 0.388013169411577, out id));
            Assert.True((new List<ulong> { 3, 16, 19, 17, 18 }).Contains(id));
            // Step 30
            tree.Insert(0.824646611827075, 20);
            Assert.True(tree.Find(0.489338282245209, 0.612189171488328, out id));
            Assert.True((new List<ulong> { 15 }).Contains(id));
            // Step 31
            tree.Erase(0.824646611827075);
            Assert.False(tree.Find(0.476970288971259, 0.499894484290845, out id));
            // Step 32
            tree.Erase(0.580316107716154);
            Assert.True(tree.Find(0.042364773347170, 0.883102900084146, out id));
            Assert.True((new List<ulong> { 3, 16, 19, 17, 18, 10 }).Contains(id));
            // Step 33
            tree.Insert(0.576889259001492, 21);
            Assert.True(tree.Find(0.026707019532951, 0.305003354915055, out id));
            Assert.True((new List<ulong> { 3, 16, 19 }).Contains(id));
            // Step 34
            tree.Erase(0.335742966956731);
            Assert.False(tree.Find(0.382518038688031, 0.484749810129520, out id));
            // Step 35
            tree.Insert(0.370912942699559, 22);
            Assert.False(tree.Find(0.790034773465317, 0.812037068749450, out id));
            // Step 36
            tree.Insert(0.894891999363011, 23);
            Assert.True(tree.Find(0.000432289739201, 0.707821516325705, out id));
            Assert.True((new List<ulong> { 3, 16, 19, 18, 22, 21 }).Contains(id));
            // Step 37
            tree.Erase(0.370912942699559);
            Assert.True(tree.Find(0.332182714234830, 0.406168421989352, out id));
            Assert.True((new List<ulong> { 18 }).Contains(id));
            // Step 38
            tree.Erase(0.848168777661578);
            Assert.True(tree.Find(0.204444246019618, 0.247666104609286, out id));
            Assert.True((new List<ulong> { 19 }).Contains(id));
            // Step 39
            tree.Erase(0.367093222527155);
            Assert.True(tree.Find(0.009018601841484, 0.350587500371605, out id));
            Assert.True((new List<ulong> { 3, 16, 19 }).Contains(id));
            // Step 40
            tree.Erase(0.931147035981768);
            Assert.True(tree.Find(0.566691417309729, 0.735198435666770, out id));
            Assert.True((new List<ulong> { 21 }).Contains(id));
            // Step 41
            tree.Insert(0.831472769990330, 24);
            Assert.True(tree.Find(0.388157789230267, 0.972520234968713, out id));
            Assert.True((new List<ulong> { 21, 24, 23 }).Contains(id));
            // Step 42
            tree.Insert(0.981604388726955, 25);
            Assert.True(tree.Find(0.314635586622648, 0.689629930450858, out id));
            Assert.True((new List<ulong> { 21 }).Contains(id));
            // Step 43
            tree.Erase(0.972595904066717);
            Assert.True(tree.Find(0.345488230904232, 0.608286662176106, out id));
            Assert.True((new List<ulong> { 21 }).Contains(id));
            // Step 44
            tree.Insert(0.015573848359706, 26);
            Assert.False(tree.Find(0.399520718122125, 0.507261061206330, out id));
            // Step 45
            tree.Erase(0.576889259001492);
            Assert.False(tree.Find(0.404113204928248, 0.699078078496197, out id));
            // Step 46
            tree.Erase(0.146930493214323);
            Assert.False(tree.Find(0.348472841983067, 0.443683546218576, out id));
            // Step 47
            tree.Insert(0.751975243825313, 27);
            Assert.False(tree.Find(0.291757059520663, 0.629109906990010, out id));
            // Step 48
            tree.Insert(0.000583858401434, 28);
            Assert.True(tree.Find(0.408460381622834, 0.988198582927438, out id));
            Assert.True((new List<ulong> { 27, 24, 23, 25 }).Contains(id));
            // Step 49
            tree.Erase(0.215204941473566);
            Assert.False(tree.Find(0.371823514483295, 0.724899405526093, out id));
            // Step 50
            tree.Insert(0.849611006151825, 29);
            Assert.False(tree.Find(0.317383145455243, 0.347483695076539, out id));
            // Step 51
            tree.Insert(0.739406941968853, 30);
            Assert.True(tree.Find(0.474977028384144, 0.799281698294663, out id));
            Assert.True((new List<ulong> { 30, 27 }).Contains(id));
            // Step 52
            tree.Insert(0.064493868146923, 31);
            Assert.True(tree.Find(0.291105873602784, 0.857235539382995, out id));
            Assert.True((new List<ulong> { 30, 27, 24, 29 }).Contains(id));
            // Step 53
            tree.Erase(0.849611006151825);
            Assert.True(tree.Find(0.611772832909409, 0.873801509502557, out id));
            Assert.True((new List<ulong> { 30, 27, 24 }).Contains(id));
            // Step 54
            tree.Insert(0.553322981178427, 32);
            Assert.True(tree.Find(0.053075674158837, 0.434070177562679, out id));
            Assert.True((new List<ulong> { 31, 16 }).Contains(id));
            // Step 55
            tree.Insert(0.432297937926204, 33);
            Assert.True(tree.Find(0.164363492010060, 0.308701829392056, out id));
            Assert.True((new List<ulong> { 16 }).Contains(id));
            // Step 56
            tree.Erase(0.553322981178427);
            Assert.False(tree.Find(0.524776027077772, 0.571097674427855, out id));
            // Step 57
            tree.Insert(0.604424739302769, 34);
            Assert.True(tree.Find(0.589875829256885, 0.846848058597224, out id));
            Assert.True((new List<ulong> { 34, 30, 27, 24 }).Contains(id));
            // Step 58
            tree.Insert(0.414030973669989, 35);
            Assert.True(tree.Find(0.360746309723138, 0.639650474577836, out id));
            Assert.True((new List<ulong> { 35, 33, 34 }).Contains(id));
            // Step 59
            tree.Insert(0.226074075351375, 36);
            Assert.True(tree.Find(0.087697743863952, 0.376636387657134, out id));
            Assert.True((new List<ulong> { 16, 36 }).Contains(id));
            // Step 60
            tree.Erase(0.414030973669989);
            Assert.True(tree.Find(0.128526702792178, 0.588083591937127, out id));
            Assert.True((new List<ulong> { 16, 36, 33 }).Contains(id));
            // Step 61
            tree.Insert(0.300120012461902, 37);
            Assert.True(tree.Find(0.197110416309552, 0.454857509273984, out id));
            Assert.True((new List<ulong> { 36, 37, 33 }).Contains(id));
            // Step 62
            tree.Insert(0.473833404940292, 38);
            Assert.False(tree.Find(0.898387492956635, 0.968390093279583, out id));
            // Step 63
            tree.Erase(0.226074075351375);
            Assert.False(tree.Find(0.910141957464300, 0.967830110103728, out id));
            // Step 64
            tree.Insert(0.489425206758678, 39);
            Assert.True(tree.Find(0.165515503075474, 0.529734105842775, out id));
            Assert.True((new List<ulong> { 37, 33, 38, 39 }).Contains(id));
            // Step 65
            tree.Erase(0.739406941968853);
            Assert.True(tree.Find(0.500405851026948, 0.893628762003228, out id));
            Assert.True((new List<ulong> { 34, 27, 24 }).Contains(id));
            // Step 66
            tree.Insert(0.420492014673396, 40);
            Assert.True(tree.Find(0.276261351963290, 0.931668419051915, out id));
            Assert.True((new List<ulong> { 37, 40, 33, 38, 39, 34, 27, 24, 23 }).Contains(id));
            // Step 67
            tree.Erase(0.432297937926204);
            Assert.True(tree.Find(0.348482181095412, 0.764541099383344, out id));
            Assert.True((new List<ulong> { 40, 38, 39, 34, 27 }).Contains(id));
            // Step 68
            tree.Erase(0.064493868146923);
            Assert.False(tree.Find(0.216788026099864, 0.250563902715910, out id));
            // Step 69
            tree.Insert(0.709143292038202, 41);
            Assert.False(tree.Find(0.485748124825190, 0.486944896120163, out id));
            // Step 70
            tree.Insert(0.752685434850271, 42);
            Assert.True(tree.Find(0.434479906819181, 0.968990829382511, out id));
            Assert.True((new List<ulong> { 38, 39, 34, 41, 27, 42, 24, 23 }).Contains(id));
            // Step 71
            tree.Insert(0.850668578916750, 43);
            Assert.True(tree.Find(0.344972192669115, 0.483919654428871, out id));
            Assert.True((new List<ulong> { 40, 38 }).Contains(id));
            // Step 72
            tree.Erase(0.164877411424116);
            Assert.True(tree.Find(0.071630871005956, 0.784022868224654, out id));
            Assert.True((new List<ulong> { 37, 40, 38, 39, 34, 41, 27, 42 }).Contains(id));
            // Step 73
            tree.Insert(0.324883491363458, 44);
            Assert.True(tree.Find(0.950332188143270, 0.999710364248569, out id));
            Assert.True((new List<ulong> { 25 }).Contains(id));
            // Step 74
            tree.Insert(0.483228251215685, 45);
            Assert.True(tree.Find(0.338418240350060, 0.933916835085127, out id));
            Assert.True((new List<ulong> { 40, 38, 45, 39, 34, 41, 27, 42, 24, 43, 23 }).Contains(id));
            // Step 75
            tree.Erase(0.420492014673396);
            Assert.True(tree.Find(0.410637069817589, 0.702999794124732, out id));
            Assert.True((new List<ulong> { 38, 45, 39, 34 }).Contains(id));
            // Step 76
            tree.Erase(0.894891999363011);
            Assert.True(tree.Find(0.356504897308196, 0.700546282484318, out id));
            Assert.True((new List<ulong> { 38, 45, 39, 34 }).Contains(id));
            // Step 77
            tree.Insert(0.679287516995195, 46);
            Assert.True(tree.Find(0.262241913611782, 0.428967869854630, out id));
            Assert.True((new List<ulong> { 37, 44 }).Contains(id));
            // Step 78
            tree.Erase(0.489425206758678);
            Assert.False(tree.Find(0.180997102715261, 0.249338027920967, out id));
            // Step 79
            tree.Erase(0.981604388726955);
            Assert.True(tree.Find(0.521425241145133, 0.779728800844039, out id));
            Assert.True((new List<ulong> { 34, 46, 41, 27, 42 }).Contains(id));
            // Step 80
            tree.Insert(0.955937017855037, 47);
            Assert.True(tree.Find(0.265714753077058, 0.473181608366608, out id));
            Assert.True((new List<ulong> { 37, 44 }).Contains(id));
            // Step 81
            tree.Insert(0.255630795722962, 48);
            Assert.True(tree.Find(0.306937524950474, 0.506818214073730, out id));
            Assert.True((new List<ulong> { 44, 38, 45 }).Contains(id));
            // Step 82
            tree.Erase(0.751975243825313);
            Assert.True(tree.Find(0.703386001496759, 0.732874775447679, out id));
            Assert.True((new List<ulong> { 41 }).Contains(id));
            // Step 83
            tree.Erase(0.483228251215685);
            Assert.True(tree.Find(0.452638846857073, 0.742911805885129, out id));
            Assert.True((new List<ulong> { 38, 34, 46, 41 }).Contains(id));
            // Step 84
            tree.Insert(0.847098993773738, 49);
            Assert.False(tree.Find(0.886888386098021, 0.902048326785669, out id));
            // Step 85
            tree.Erase(0.955937017855037);
            Assert.True(tree.Find(0.001660864657552, 0.246416430684598, out id));
            Assert.True((new List<ulong> { 26 }).Contains(id));
            // Step 86
            tree.Insert(0.449735214181217, 50);
            Assert.True(tree.Find(0.033115345803213, 0.373846710994868, out id));
            Assert.True((new List<ulong> { 48, 37, 44 }).Contains(id));
            // Step 87
            tree.Erase(0.449735214181217);
            Assert.True(tree.Find(0.246946954745582, 0.813198891702048, out id));
            Assert.True((new List<ulong> { 48, 37, 44, 38, 34, 46, 41, 42 }).Contains(id));
            // Step 88
            tree.Erase(0.679287516995195);
            Assert.True(tree.Find(0.122406407790389, 0.430124087152295, out id));
            Assert.True((new List<ulong> { 48, 37, 44 }).Contains(id));
            // Step 89
            tree.Insert(0.647510869728619, 51);
            Assert.True(tree.Find(0.831825639029885, 0.901634844491332, out id));
            Assert.True((new List<ulong> { 49, 43 }).Contains(id));
            // Step 90
            tree.Erase(0.709143292038202);
            Assert.True(tree.Find(0.236009630080734, 0.292420477766695, out id));
            Assert.True((new List<ulong> { 48 }).Contains(id));
            // Step 91
            tree.Insert(0.172410142928924, 52);
            Assert.True(tree.Find(0.026077848330397, 0.314210424068189, out id));
            Assert.True((new List<ulong> { 52, 48, 37 }).Contains(id));
            // Step 92
            tree.Erase(0.647510869728619);
            Assert.True(tree.Find(0.108918629209884, 0.711026973627470, out id));
            Assert.True((new List<ulong> { 52, 48, 37, 44, 38, 34 }).Contains(id));
            // Step 93
            tree.Erase(0.255630795722962);
            Assert.True(tree.Find(0.091350775176529, 0.175924545057983, out id));
            Assert.True((new List<ulong> { 52 }).Contains(id));
            // Step 94
            tree.Insert(0.990159178328700, 53);
            Assert.True(tree.Find(0.055585327916635, 0.444992381541913, out id));
            Assert.True((new List<ulong> { 52, 37, 44 }).Contains(id));
            // Step 95
            tree.Erase(0.172410142928924);
            Assert.True(tree.Find(0.678954424969404, 0.785143068718821, out id));
            Assert.True((new List<ulong> { 42 }).Contains(id));
            // Step 96
            tree.Erase(0.990159178328700);
            Assert.True(tree.Find(0.396274791143543, 0.695587947676297, out id));
            Assert.True((new List<ulong> { 38, 34 }).Contains(id));
            // Step 97
            tree.Insert(0.806653635087061, 54);
            Assert.True(tree.Find(0.148808395800238, 0.822412436258343, out id));
            Assert.True((new List<ulong> { 37, 44, 38, 34, 42, 54 }).Contains(id));
            // Step 98
            tree.Insert(0.308367934462027, 55);
            Assert.True(tree.Find(0.290612914930142, 0.714819891712685, out id));
            Assert.True((new List<ulong> { 37, 55, 44, 38, 34 }).Contains(id));
            // Step 99
            tree.Insert(0.480216744848557, 56);
            Assert.True(tree.Find(0.729356547277425, 0.884560562185245, out id));
            Assert.True((new List<ulong> { 42, 54, 24, 49, 43 }).Contains(id));
            // Step 100
            tree.Erase(0.831472769990330);
            Assert.True(tree.Find(0.106739082424189, 0.978275339812092, out id));
            Assert.True((new List<ulong> { 37, 55, 44, 38, 56, 34, 42, 54, 49, 43 }).Contains(id));
            // Step 101
            tree.Erase(0.806653635087061);
            Assert.True(tree.Find(0.266227627725597, 0.802592902050101, out id));
            Assert.True((new List<ulong> { 37, 55, 44, 38, 56, 34, 42 }).Contains(id));
            // Step 102
            tree.Insert(0.238648117042469, 57);
            Assert.False(tree.Find(0.400570765971806, 0.415583890798485, out id));
            // Step 103
            tree.Erase(0.752685434850271);
            Assert.True(tree.Find(0.686427190771119, 0.881334169874468, out id));
            Assert.True((new List<ulong> { 49, 43 }).Contains(id));
            // Step 104
            tree.Insert(0.608065442654680, 58);
            Assert.True(tree.Find(0.501874621315759, 0.768744315759048, out id));
            Assert.True((new List<ulong> { 34, 58 }).Contains(id));
            // Step 105
            tree.Erase(0.608065442654680);
            Assert.True(tree.Find(0.322391076251394, 0.753998250873339, out id));
            Assert.True((new List<ulong> { 44, 38, 56, 34 }).Contains(id));
            // Step 106
            tree.Erase(0.324883491363458);
            Assert.True(tree.Find(0.376913416608230, 0.800191649967627, out id));
            Assert.True((new List<ulong> { 38, 56, 34 }).Contains(id));
            // Step 107
            tree.Insert(0.067818955054032, 59);
            Assert.True(tree.Find(0.376465470131225, 0.794877589359814, out id));
            Assert.True((new List<ulong> { 38, 56, 34 }).Contains(id));
            // Step 108
            tree.Insert(0.079154526446195, 60);
            Assert.True(tree.Find(0.254090238015653, 0.345879993276476, out id));
            Assert.True((new List<ulong> { 37, 55 }).Contains(id));
            // Step 109
            tree.Erase(0.308367934462027);
            Assert.False(tree.Find(0.919656176426406, 0.984088992277899, out id));
            // Step 110
            tree.Erase(0.238648117042469);
            Assert.False(tree.Find(0.185890377532984, 0.213711156942398, out id));
            // Step 111
            tree.Erase(0.015573848359706);
            Assert.False(tree.Find(0.345031285603256, 0.366513398065210, out id));
            // Step 112
            tree.Insert(0.987067244837778, 61);
            Assert.False(tree.Find(0.052018171012548, 0.053107616967354, out id));
            // Step 113
            tree.Erase(0.480216744848557);
            Assert.True(tree.Find(0.355505158155651, 0.739213440375445, out id));
            Assert.True((new List<ulong> { 38, 34 }).Contains(id));
            // Step 114
            tree.Erase(0.850668578916750);
            Assert.True(tree.Find(0.389249313655590, 0.948029451642693, out id));
            Assert.True((new List<ulong> { 38, 34, 49 }).Contains(id));
            // Step 115
            tree.Erase(0.987067244837778);
            Assert.True(tree.Find(0.120434166871437, 0.919603817156587, out id));
            Assert.True((new List<ulong> { 37, 38, 34, 49 }).Contains(id));
            // Step 116
            tree.Erase(0.847098993773738);
            Assert.True(tree.Find(0.213150439994490, 0.699420964287421, out id));
            Assert.True((new List<ulong> { 37, 38, 34 }).Contains(id));
            // Step 117
            tree.Insert(0.822580034082325, 62);
            Assert.False(tree.Find(0.177995045231283, 0.229138779897595, out id));
            // Step 118
            tree.Erase(0.604424739302769);
            Assert.True(tree.Find(0.014077799246752, 0.713536455975673, out id));
            Assert.True((new List<ulong> { 59, 60, 37, 38 }).Contains(id));
            // Step 119
            tree.Insert(0.574178568506614, 63);
            Assert.True(tree.Find(0.732081459066795, 0.822696210159046, out id));
            Assert.True((new List<ulong> { 62 }).Contains(id));
            // Step 120
            tree.Insert(0.312601336499492, 64);
            Assert.False(tree.Find(0.123856253555902, 0.294764406481425, out id));
            // Step 121
            tree.Insert(0.354745025679393, 65);
            Assert.True(tree.Find(0.195275307117577, 0.632180890514324, out id));
            Assert.True((new List<ulong> { 37, 64, 65, 38, 63 }).Contains(id));
            // Step 122
            tree.Erase(0.300120012461902);
            Assert.True(tree.Find(0.224586941440530, 0.534021142385546, out id));
            Assert.True((new List<ulong> { 64, 65, 38 }).Contains(id));
            // Step 123
            tree.Erase(0.067818955054032);
            Assert.False(tree.Find(0.084003380685904, 0.286032556902595, out id));
            // Step 124
            tree.Insert(0.781492371863991, 66);
            Assert.True(tree.Find(0.148441486448453, 0.894307198843226, out id));
            Assert.True((new List<ulong> { 64, 65, 38, 63, 66, 62 }).Contains(id));
            // Step 125
            tree.Insert(0.467200758579628, 67);
            Assert.True(tree.Find(0.340895948186478, 0.409762459466834, out id));
            Assert.True((new List<ulong> { 65 }).Contains(id));
            // Step 126
            tree.Insert(0.673271710915243, 68);
            Assert.False(tree.Find(0.958392117772940, 0.960613170292343, out id));
            // Step 127
            tree.Erase(0.473833404940292);
            Assert.True(tree.Find(0.435253286626252, 0.502730429763381, out id));
            Assert.True((new List<ulong> { 67 }).Contains(id));
            // Step 128
            tree.Insert(0.969969806460038, 69);
            Assert.True(tree.Find(0.275429444995980, 0.364098577094112, out id));
            Assert.True((new List<ulong> { 64, 65 }).Contains(id));
            // Step 129
            tree.Insert(0.848763750295024, 70);
            Assert.True(tree.Find(0.311360134015637, 0.891799480162680, out id));
            Assert.True((new List<ulong> { 64, 65, 67, 63, 68, 66, 62, 70 }).Contains(id));
            // Step 130
            tree.Erase(0.848763750295024);
            Assert.True(tree.Find(0.039906858726785, 0.943120453550652, out id));
            Assert.True((new List<ulong> { 60, 64, 65, 67, 63, 68, 66, 62 }).Contains(id));
            // Step 131
            tree.Insert(0.483282743491917, 71);
            Assert.True(tree.Find(0.233125890633686, 0.991654017739347, out id));
            Assert.True((new List<ulong> { 64, 65, 67, 71, 63, 68, 66, 62, 69 }).Contains(id));
            // Step 132
            tree.Insert(0.837680610803306, 72);
            Assert.True(tree.Find(0.166584819617218, 0.631840931245929, out id));
            Assert.True((new List<ulong> { 64, 65, 67, 71, 63 }).Contains(id));
            // Step 133
            tree.Erase(0.000583858401434);
            Assert.False(tree.Find(0.115700800296628, 0.280480352980400, out id));
            // Step 134
            tree.Erase(0.822580034082325);
            Assert.True(tree.Find(0.388028909791092, 0.924516574720681, out id));
            Assert.True((new List<ulong> { 67, 71, 63, 68, 66, 72 }).Contains(id));
            // Step 135
            tree.Erase(0.079154526446195);
            Assert.True(tree.Find(0.038774398440456, 0.340133415390083, out id));
            Assert.True((new List<ulong> { 64 }).Contains(id));
            // Step 136
            tree.Insert(0.961707681847159, 73);
            Assert.True(tree.Find(0.632796100050065, 0.895195730009290, out id));
            Assert.True((new List<ulong> { 68, 66, 72 }).Contains(id));
            // Step 137
            tree.Erase(0.837680610803306);
            Assert.False(tree.Find(0.022309175265107, 0.307789732854708, out id));
            // Step 138
            tree.Erase(0.673271710915243);
            Assert.False(tree.Find(0.185652735544198, 0.213754283070068, out id));
            // Step 139
            tree.Erase(0.483282743491917);
            Assert.True(tree.Find(0.527067560279792, 0.833773989851443, out id));
            Assert.True((new List<ulong> { 63, 66 }).Contains(id));
            // Step 140
            tree.Insert(0.631469488393714, 74);
            Assert.True(tree.Find(0.600230775510404, 0.952664556410076, out id));
            Assert.True((new List<ulong> { 74, 66 }).Contains(id));
            // Step 141
            tree.Erase(0.574178568506614);
            Assert.True(tree.Find(0.252130812926244, 0.354289278741102, out id));
            Assert.True((new List<ulong> { 64 }).Contains(id));
            // Step 142
            tree.Erase(0.312601336499492);
            Assert.True(tree.Find(0.168066165611899, 0.996848496211926, out id));
            Assert.True((new List<ulong> { 65, 67, 74, 66, 73, 69 }).Contains(id));
            // Step 143
            tree.Erase(0.467200758579628);
            Assert.False(tree.Find(0.387047041453029, 0.575315466069906, out id));
            // Step 144
            tree.Insert(0.227634080900554, 75);
            Assert.False(tree.Find(0.418546967513675, 0.433328330133413, out id));
            // Step 145
            tree.Insert(0.914992102844473, 76);
            Assert.True(tree.Find(0.660809645346003, 0.931938954764065, out id));
            Assert.True((new List<ulong> { 66, 76 }).Contains(id));
            // Step 146
            tree.Erase(0.961707681847159);
            Assert.True(tree.Find(0.270815024370158, 0.387853558171780, out id));
            Assert.True((new List<ulong> { 65 }).Contains(id));
            // Step 147
            tree.Insert(0.074487695804467, 77);
            Assert.False(tree.Find(0.822768367944645, 0.879370923915879, out id));
            // Step 148
            tree.Insert(0.615030419666424, 78);
            Assert.True(tree.Find(0.553120985475355, 0.979551081968091, out id));
            Assert.True((new List<ulong> { 78, 74, 66, 76, 69 }).Contains(id));
            // Step 149
            tree.Erase(0.615030419666424);
            Assert.True(tree.Find(0.153162177989992, 0.343978130540666, out id));
            Assert.True((new List<ulong> { 75 }).Contains(id));
            // Step 150
            tree.Insert(0.595493817463181, 79);
            Assert.True(tree.Find(0.029331826901577, 0.424275015751295, out id));
            Assert.True((new List<ulong> { 77, 75, 65 }).Contains(id));
            // Step 151
            tree.Insert(0.439803654729286, 80);
            Assert.True(tree.Find(0.433806530571454, 0.622180879196949, out id));
            Assert.True((new List<ulong> { 80, 79 }).Contains(id));
            // Step 152
            tree.Insert(0.427659848755958, 81);
            Assert.True(tree.Find(0.387381959579786, 0.446013003678180, out id));
            Assert.True((new List<ulong> { 81, 80 }).Contains(id));
            // Step 153
            tree.Erase(0.781492371863991);
            Assert.True(tree.Find(0.180673369451682, 0.312166225339601, out id));
            Assert.True((new List<ulong> { 75 }).Contains(id));
            // Step 154
            tree.Erase(0.439803654729286);
            Assert.True(tree.Find(0.302283570135519, 0.553406821970704, out id));
            Assert.True((new List<ulong> { 65, 81 }).Contains(id));
            // Step 155
            tree.Erase(0.074487695804467);
            Assert.True(tree.Find(0.252913956615267, 0.979675546039714, out id));
            Assert.True((new List<ulong> { 65, 81, 79, 74, 76, 69 }).Contains(id));
            // Step 156
            tree.Insert(0.402139569399883, 82);
            Assert.True(tree.Find(0.560809014771639, 0.679954201568019, out id));
            Assert.True((new List<ulong> { 79, 74 }).Contains(id));
            // Step 157
            tree.Erase(0.914992102844473);
            Assert.True(tree.Find(0.499867706487367, 0.885552442613852, out id));
            Assert.True((new List<ulong> { 79, 74 }).Contains(id));
            // Step 158
            tree.Insert(0.773089620824238, 83);
            Assert.True(tree.Find(0.419888007166338, 0.632445275181307, out id));
            Assert.True((new List<ulong> { 81, 79, 74 }).Contains(id));
            // Step 159
            tree.Insert(0.678835441640060, 84);
            Assert.False(tree.Find(0.888971988795156, 0.897843915710699, out id));
            // Step 160
            tree.Erase(0.354745025679393);
            Assert.True(tree.Find(0.224983083167663, 0.841024982702619, out id));
            Assert.True((new List<ulong> { 75, 82, 81, 79, 74, 84, 83 }).Contains(id));
            // Step 161
            tree.Erase(0.595493817463181);
            Assert.True(tree.Find(0.505953509221899, 0.887789663511540, out id));
            Assert.True((new List<ulong> { 74, 84, 83 }).Contains(id));
            // Step 162
            tree.Insert(0.753675464785086, 85);
            Assert.True(tree.Find(0.140347121421535, 0.538199379360291, out id));
            Assert.True((new List<ulong> { 75, 82, 81 }).Contains(id));
            // Step 163
            tree.Erase(0.402139569399883);
            Assert.False(tree.Find(0.033682534432692, 0.126503314237573, out id));
            // Step 164
            tree.Insert(0.789044678838784, 86);
            Assert.True(tree.Find(0.056475087476679, 0.229009465142788, out id));
            Assert.True((new List<ulong> { 75 }).Contains(id));
            // Step 165
            tree.Insert(0.098346413109606, 87);
            Assert.True(tree.Find(0.617640176410731, 0.997421930713936, out id));
            Assert.True((new List<ulong> { 74, 84, 85, 83, 86, 69 }).Contains(id));
            // Step 166
            tree.Erase(0.789044678838784);
            Assert.True(tree.Find(0.083685977460744, 0.201391416708223, out id));
            Assert.True((new List<ulong> { 87 }).Contains(id));
            // Step 167
            tree.Erase(0.631469488393714);
            Assert.True(tree.Find(0.361873826199992, 0.890540852149299, out id));
            Assert.True((new List<ulong> { 81, 84, 85, 83 }).Contains(id));
            // Step 168
            tree.Erase(0.427659848755958);
            Assert.True(tree.Find(0.218482051611545, 0.484020918236374, out id));
            Assert.True((new List<ulong> { 75 }).Contains(id));
            // Step 169
            tree.Erase(0.678835441640060);
            Assert.False(tree.Find(0.255442213249461, 0.396258975160485, out id));
            // Step 170
            tree.Insert(0.457623803192602, 88);
            Assert.True(tree.Find(0.092393204791459, 0.765509287742498, out id));
            Assert.True((new List<ulong> { 87, 75, 88, 85 }).Contains(id));
            // Step 171
            tree.Insert(0.274064283749435, 89);
            Assert.True(tree.Find(0.072006172144293, 0.705611588039387, out id));
            Assert.True((new List<ulong> { 87, 75, 89, 88 }).Contains(id));
            // Step 172
            tree.Insert(0.990443203918234, 90);
            Assert.True(tree.Find(0.655781296619461, 0.927804062466824, out id));
            Assert.True((new List<ulong> { 85, 83 }).Contains(id));
            // Step 173
            tree.Insert(0.063982251796185, 91);
            Assert.True(tree.Find(0.243392727933919, 0.780046624238533, out id));
            Assert.True((new List<ulong> { 89, 88, 85, 83 }).Contains(id));
            // Step 174
            tree.Erase(0.969969806460038);
            Assert.True(tree.Find(0.094143776552647, 0.577701270858177, out id));
            Assert.True((new List<ulong> { 87, 75, 89, 88 }).Contains(id));
            // Step 175
            tree.Insert(0.936909686823834, 92);
            Assert.True(tree.Find(0.220618839100627, 0.649551604424196, out id));
            Assert.True((new List<ulong> { 75, 89, 88 }).Contains(id));
            // Step 176
            tree.Erase(0.098346413109606);
            Assert.True(tree.Find(0.333515329660453, 0.750533418313554, out id));
            Assert.True((new List<ulong> { 88 }).Contains(id));
            // Step 177
            tree.Erase(0.936909686823834);
            Assert.True(tree.Find(0.281930345614611, 0.480995218265836, out id));
            Assert.True((new List<ulong> { 88 }).Contains(id));
            // Step 178
            tree.Erase(0.063982251796185);
            Assert.False(tree.Find(0.705383371696938, 0.712652691105632, out id));
            // Step 179
            tree.Insert(0.606887036205956, 93);
            Assert.True(tree.Find(0.122429934554623, 0.903764697066574, out id));
            Assert.True((new List<ulong> { 75, 89, 88, 93, 85, 83 }).Contains(id));
            // Step 180
            tree.Insert(0.487332836498422, 94);
            Assert.False(tree.Find(0.628947897803845, 0.659315313802755, out id));
            // Step 181
            tree.Insert(0.039735786362320, 95);
            Assert.True(tree.Find(0.311694670837033, 0.629958003473543, out id));
            Assert.True((new List<ulong> { 88, 94, 93 }).Contains(id));
            // Step 182
            tree.Erase(0.990443203918234);
            Assert.True(tree.Find(0.432226826949494, 0.758398217874016, out id));
            Assert.True((new List<ulong> { 88, 94, 93, 85 }).Contains(id));
            // Step 183
            tree.Erase(0.227634080900554);
            Assert.True(tree.Find(0.623165724903789, 0.804515775122785, out id));
            Assert.True((new List<ulong> { 85, 83 }).Contains(id));
            // Step 184
            tree.Insert(0.960920106813692, 96);
            Assert.True(tree.Find(0.272844242170366, 0.838399654855028, out id));
            Assert.True((new List<ulong> { 89, 88, 94, 93, 85, 83 }).Contains(id));
            // Step 185
            tree.Insert(0.520353578900190, 97);
            Assert.False(tree.Find(0.802566279809575, 0.933978839971584, out id));
            // Step 186
            tree.Insert(0.465825017996899, 98);
            Assert.True(tree.Find(0.434996995364416, 0.953422280080418, out id));
            Assert.True((new List<ulong> { 88, 98, 94, 97, 93, 85, 83 }).Contains(id));
            // Step 187
            tree.Erase(0.753675464785086);
            Assert.True(tree.Find(0.692535830783679, 0.917475989746045, out id));
            Assert.True((new List<ulong> { 83 }).Contains(id));
            // Step 188
            tree.Insert(0.867682513673316, 99);
            Assert.True(tree.Find(0.559185208890614, 0.767977065185552, out id));
            Assert.True((new List<ulong> { 93 }).Contains(id));
            // Step 189
            tree.Erase(0.274064283749435);
            Assert.True(tree.Find(0.741402892700488, 0.979506124956389, out id));
            Assert.True((new List<ulong> { 83, 99, 96 }).Contains(id));
            // Step 190
            tree.Erase(0.457623803192602);
            Assert.True(tree.Find(0.028412950890985, 0.222485754658363, out id));
            Assert.True((new List<ulong> { 95 }).Contains(id));
            // Step 191
            tree.Erase(0.465825017996899);
            Assert.False(tree.Find(0.376529561819707, 0.422167636394834, out id));
            // Step 192
            tree.Erase(0.487332836498422);
            Assert.True(tree.Find(0.158283835986992, 0.621063335949516, out id));
            Assert.True((new List<ulong> { 97, 93 }).Contains(id));
            // Step 193
            tree.Erase(0.520353578900190);
            Assert.True(tree.Find(0.573900194506397, 0.853914189339845, out id));
            Assert.True((new List<ulong> { 93, 83 }).Contains(id));
            // Step 194
            tree.Insert(0.911725876786252, 100);
            Assert.True(tree.Find(0.043942129557140, 0.983589394955498, out id));
            Assert.True((new List<ulong> { 93, 83, 99, 100, 96 }).Contains(id));
            // Step 195
            tree.Erase(0.039735786362320);
            Assert.True(tree.Find(0.461954830415268, 0.807317037948714, out id));
            Assert.True((new List<ulong> { 93, 83 }).Contains(id));
            // Step 196
            tree.Insert(0.187357632170485, 101);
            Assert.True(tree.Find(0.100082511544467, 0.472792739101655, out id));
            Assert.True((new List<ulong> { 101 }).Contains(id));
            // Step 197
            tree.Insert(0.343965758497960, 102);
            Assert.True(tree.Find(0.437357807111896, 0.652833227562115, out id));
            Assert.True((new List<ulong> { 93 }).Contains(id));
            // Step 198
            tree.Insert(0.122296719719352, 103);
            Assert.True(tree.Find(0.457555725390256, 0.918234641558988, out id));
            Assert.True((new List<ulong> { 93, 83, 99, 100 }).Contains(id));
            // Step 199
            tree.Insert(0.400417603847302, 104);
            Assert.True(tree.Find(0.229697891113568, 0.655060220732449, out id));
            Assert.True((new List<ulong> { 102, 104, 93 }).Contains(id));
            // Step 200
            tree.Insert(0.628028780952338, 105);
            Assert.True(tree.Find(0.063828742156603, 0.976769116289004, out id));
            Assert.True((new List<ulong> { 103, 101, 102, 104, 93, 105, 83, 99, 100, 96 }).Contains(id));
        }

        [Fact, Trait("Category", "Examples")]
        public void AdaptiveGridPolygonKeyPointsExample()
        {
            // <example>

            var adaptiveGrid = new AdaptiveGrid();
            var points = new List<Vector3>()
            {
                new Vector3(-6, -4),
                new Vector3(-2, -4),
                new Vector3(3, -4),
                new Vector3(1, 4.5),
                new Vector3(6, 3),
            };
            adaptiveGrid.AddFromPolygon(Polygon.Rectangle(15, 10).TransformedPolygon(
                new Transform(new Vector3(), new Vector3(10, 0, 10))), points);

            // </example>

            WriteToModelWithRandomMaterials(adaptiveGrid, "Elements_Spatial_AdaptiveGrid_AdaptiveGrid");
        }

        [Fact]
        public void AdaptiveGridBboxKeyPointsExample()
        {
            // <example2>

            var adaptiveGrid = new AdaptiveGrid();
            var points = new List<Vector3>()
            {
                new Vector3(-6, -4),
                new Vector3(-2, -4),
                new Vector3(3, -4),
                new Vector3(1, 4.5, 3),
                new Vector3(6, 3, -2),
            };
            adaptiveGrid.AddFromBbox(new BBox3(new Vector3(-7.5, -5, -3), new Vector3(10, 10, 3)), points);

            points = new List<Vector3>()
            {
                new Vector3(-6, -4, 3),
                new Vector3(-2, 0, 3),
                new Vector3(0, 4, 3),
                new Vector3(2, 6, 3)
            };
            var rectangle = Polygon.Rectangle(new Vector3(-10, -5), new Vector3(15, 10));
            adaptiveGrid.AddFromPolygon(rectangle.TransformedPolygon(new Transform(new Vector3(0, 0, 3))), points);
            points = new List<Vector3>()
            {
                new Vector3(-6, -4, 2),
                new Vector3(-2, 0, 2),
                new Vector3(0, 4, 2),
                new Vector3(2, 6, 2)
            };
            adaptiveGrid.AddFromPolygon(rectangle.TransformedPolygon(new Transform(new Vector3(0, 0, 2))), points);

            // </example2>

            WriteToModelWithRandomMaterials(adaptiveGrid, "Elements_Spatial_AdaptiveGrid_AdaptiveGridBboxKeyPoints");
        }

        [Fact]
        public void AdaptiveGridAddVertex()
        {
            var adaptiveGrid = new AdaptiveGrid();
            var points = new List<Vector3>()
            {
                new Vector3(-6, -4),
                new Vector3(-2, -4),
                new Vector3(3, -4),
                new Vector3(1, 4.5, 3),
                new Vector3(6, 3, -2),
            };
            adaptiveGrid.AddFromPolygon(Polygon.Rectangle(15, 10), points);

            ulong id;
            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(-2, -4), out id));
            var oldV = adaptiveGrid.GetVertex(id);
            var edgesBefore = oldV.Edges.Count;

            var newV = adaptiveGrid.AddVertex(new Vector3(-2, -4, 2), new ConnectVertexStrategy(oldV));
            Assert.NotNull(newV);
            Assert.False(newV.Id == 0);
            Assert.Single(newV.Edges);
            Assert.True(newV.Edges.First().StartId == id || newV.Edges.First().EndId == id);
            Assert.Equal(edgesBefore + 1, oldV.Edges.Count());
            Assert.Contains(oldV.Edges, e => e.StartId == newV.Id || e.EndId == newV.Id);
        }

        [Fact]
        public void AdaptiveGridSubtractBoxCutEdges()
        {
            var adaptiveGrid = new AdaptiveGrid();
            var polygon = Polygon.Rectangle(new Vector3(0, 0), new Vector3(10, 10));

            var points = new List<Vector3>();
            for (int i = 1; i < 10; i++)
            {
                points.Add(new Vector3(i, i, 1));
            }

            adaptiveGrid.AddFromExtrude(polygon, Vector3.ZAxis, 2, points);
            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(5, 5, 1), out _));
            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(5, 4.9, 1), out _));

            adaptiveGrid.TryGetVertexIndex(new Vector3(5, 4, 1), out var borderId);
            var borderV = adaptiveGrid.GetVertex(borderId);
            var numEdges = borderV.Edges.Count;
            var numVertices = adaptiveGrid.GetVertices().Count;

            var o = Obstacle.FromBBox(
                new BBox3(new Vector3(4.9, 4.9, 0), new Vector3(5.1, 5.1, 2)));
            adaptiveGrid.SubtractObstacle(o);
            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(5, 5, 1), out _));
            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(5, 4.9, 1), out _));

            Assert.Equal(numEdges - 1, borderV.Edges.Count);
            //On each elevation one vertex is removed and no added
            Assert.Equal(numVertices - (3 * 1), adaptiveGrid.GetVertices().Count);
        }

        [Fact]
        public void AdaptiveGridSubtractBoxAddPerimeter()
        {
            var adaptiveGrid = new AdaptiveGrid();
            var polygon = Polygon.Rectangle(new Vector3(0, 0), new Vector3(10, 10));

            var points = new List<Vector3>();
            for (int i = 1; i < 10; i++)
            {
                points.Add(new Vector3(i, i, 1));
            }

            adaptiveGrid.AddFromExtrude(polygon, Vector3.ZAxis, 2, points);
            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(5, 5, 1), out _));
            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(5, 4.9, 1), out _));

            adaptiveGrid.TryGetVertexIndex(new Vector3(5, 4, 1), out var borderId);
            var borderV = adaptiveGrid.GetVertex(borderId);
            var numEdges = borderV.Edges.Count;
            var numVertices = adaptiveGrid.GetVertices().Count;

            var o = Obstacle.FromBBox(
                new BBox3(new Vector3(4.9, 4.9, 0), new Vector3(5.1, 5.1, 2)),
                addPerimeterEdges: true);
            adaptiveGrid.SubtractObstacle(o);
            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(5, 5, 1), out _));
            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(5, 4.9, 1), out _));

            Assert.Equal(numEdges, borderV.Edges.Count);
            //There are 3 elevations: extrusion is done from 0 to 2 and split points are at  1.
            //On each elevation one vertex is removed and 8 added as box perimeter.
            //TODO: elevations are not connected!!!
            Assert.Equal(numVertices + (3 * 7), adaptiveGrid.GetVertices().Count);
        }

        [Fact]
        public void AdaptiveGridSubtractBoxSmallDifference()
        {
            var edgesNumber = 75;
            var adaptiveGrid = new AdaptiveGrid();
            var polygon = Polygon.Rectangle(new Vector3(-41, -51), new Vector3(-39, -49));

            var points = new List<Vector3>();
            points.Add(new Vector3(-40, -49.9, 1));
            points.Add(new Vector3(-40, -49.80979, 1));

            adaptiveGrid.AddFromExtrude(polygon, Vector3.ZAxis, 2, points);

            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(-40, -49.9, 0), out _));
            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(-40, -49.9, 1), out _));
            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(-40, -49.9, 2), out _));
            Assert.Equal(edgesNumber, adaptiveGrid.GetEdges().Count);

            var o = Obstacle.FromBBox(
                new BBox3(new Vector3(-40.2, -50.190211303259034, 0),
                          new Vector3(-39.8, -49.809788696740966, 2)));
            adaptiveGrid.SubtractObstacle(o);

            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(-40, -49.9, 0), out _));
            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(-40, -49.9, 1), out _));
            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(-40, -49.9, 2), out _));
            Assert.Equal(edgesNumber - 14, adaptiveGrid.GetEdges().Count);
        }

        [Fact]
        public void AdaptiveGridSubtractMisalignedPolygon()
        {
            var boundary = new Polygon(
                new Vector3(-15.0, 49.599999999999994, 0), //TODO: Root cause of an issue, coordinates of boundary vertices are slightly misaligned
                new Vector3(-45.0, 49.6, 0),
                new Vector3(-45.0, 0, 0),
                new Vector3(-15.0, 0, 0));

            var obstacles = new List<Obstacle>
            { 
                //Small box with x-axis aligned edges to subtract
                Obstacle.FromBBox(new BBox3(new Vector3(-30.41029, 19.60979, 0),
                                            new Vector3(-29.58971, 20.39021, 0))),
                //Big box intersecting one of the edges of boundary, it should remove edges and vertices 
                Obstacle.FromBBox(new BBox3(new Vector3(-22.08622, 17.62839, 0),
                                            new Vector3(-8.57565, 38.31022, 0))),
                //Small box with x-axis aligned edges to subtract and no vertices added to grid
                Obstacle.FromBBox(new BBox3(new Vector3(-30.1, 40.79, 0),
                                            new Vector3(-29.7, 41.39021, 0)))
            };

            var points = new List<Vector3>()
            {
                new Vector3(-29.8, 40.540211303259035, 0),
                new Vector3(-30.0, 49.599999999999994, 0),
                new Vector3(-29.8, 41.540211303259035, 0),
                
                //1st BBox vertices
                new Vector3(-30.41029, 19.60979, 0),
                new Vector3(-29.58971, 19.60979, 0),
                new Vector3(-29.58971, 20.39021, 0),
                new Vector3(-30.41029, 20.39021, 0),
                
                //2nd BBox vertices inside polygon
                new Vector3(-22.08622, 17.62839, 0),
                new Vector3(-22.08622, 38.31022, 0)
            };

            var adaptiveGrid = new AdaptiveGrid();
            adaptiveGrid.AddFromPolygon(boundary, points);

            var edgesCount = adaptiveGrid.GetEdges().Count();
            var verticiesCount = adaptiveGrid.GetVertices().Count();

            adaptiveGrid.SubtractObstacles(obstacles);

            Assert.Equal(edgesCount - 9, adaptiveGrid.GetEdges().Count);
            Assert.Equal(verticiesCount - 2, adaptiveGrid.GetVertices().Count);
        }

        [Fact]
        public void AdaptiveGridSubstructRotatedBox()
        {
            var polygon = Polygon.Rectangle(new Vector3(0, 0), new Vector3(10, 10));
            var transfrom = new Transform().Rotated(Vector3.ZAxis, 45);

            var points = new List<Vector3>();
            for (int i = 1; i < 10; i++)
            {
                for (int j = 1; j < 10; j++)
                {
                    points.Add(new Vector3(i, j));
                }
            }

            var adaptiveGrid = new AdaptiveGrid(transfrom);
            adaptiveGrid.AddFromPolygon(polygon, points);

            //Obstacle aligned with adaptive grid transformation.
            //Forms big (3;1) -> (5;3) -> (3;5) -> (1;3) rectangle.
            var bbox = new BBox3(new Vector3(2, 2), new Vector3(4, 4));
            var withoutTransfrom = Obstacle.FromBBox(bbox, addPerimeterEdges: true);
            adaptiveGrid.SubtractObstacle(withoutTransfrom);

            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(3, 3), out _, adaptiveGrid.Tolerance));
            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(3, 2), out _, adaptiveGrid.Tolerance));
            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(3, 4), out _, adaptiveGrid.Tolerance));
            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(2, 3), out _, adaptiveGrid.Tolerance));
            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(4, 3), out _, adaptiveGrid.Tolerance));

            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(2, 2), out var id, adaptiveGrid.Tolerance));
            var v = adaptiveGrid.GetVertex(id);
            Assert.Equal(3, v.Edges.Count);
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(1.5, 2.5), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(2.5, 1.5), adaptiveGrid.Tolerance));

            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(4, 2), out id, adaptiveGrid.Tolerance));
            v = adaptiveGrid.GetVertex(id);
            Assert.Equal(3, v.Edges.Count);
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(3.5, 1.5), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(4.5, 2.5), adaptiveGrid.Tolerance));

            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(4, 4), out id, adaptiveGrid.Tolerance));
            v = adaptiveGrid.GetVertex(id);
            Assert.Equal(3, v.Edges.Count);
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(3.5, 4.5), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(4.5, 3.5), adaptiveGrid.Tolerance));

            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(2, 4), out id, adaptiveGrid.Tolerance));
            v = adaptiveGrid.GetVertex(id);
            Assert.Equal(3, v.Edges.Count);
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(1.5, 3.5), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(2.5, 4.5), adaptiveGrid.Tolerance));

            //Obstacle aligned with global transformation.
            //Forms small (6;6) -> (8;6) -> (8;8) -> (6;8) rectangle.
            bbox = new BBox3(new Vector3(6, 6), new Vector3(8, 8));
            var withTransform = Obstacle.FromBBox(bbox, addPerimeterEdges: true);
            withTransform.Orientation = new Transform();
            adaptiveGrid.SubtractObstacle(withTransform);

            Assert.False(adaptiveGrid.TryGetVertexIndex(new Vector3(7, 7), out _, adaptiveGrid.Tolerance));

            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(6, 6), out id, adaptiveGrid.Tolerance));
            v = adaptiveGrid.GetVertex(id);
            Assert.Equal(5, v.Edges.Count);
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(6, 7), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(5.5, 6.5), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(7, 6), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(6.5, 5.5), adaptiveGrid.Tolerance));

            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(8, 6), out id, adaptiveGrid.Tolerance));
            v = adaptiveGrid.GetVertex(id);
            Assert.Equal(5, v.Edges.Count);
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(7, 6), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(7.5, 5.5), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(8, 7), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(8.5, 6.5), adaptiveGrid.Tolerance));

            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(8, 8), out id, adaptiveGrid.Tolerance));
            v = adaptiveGrid.GetVertex(id);
            Assert.Equal(5, v.Edges.Count);
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(8, 7), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(8.5, 7.5), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(7, 8), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(7.5, 8.5), adaptiveGrid.Tolerance));

            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(6, 8), out id, adaptiveGrid.Tolerance));
            v = adaptiveGrid.GetVertex(id);
            Assert.Equal(5, v.Edges.Count);
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(7, 8), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(6.5, 8.5), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(6, 7), adaptiveGrid.Tolerance));
            Assert.Contains(v.Edges, e => adaptiveGrid.GetVertex(
                e.OtherVertexId(v.Id)).Point.IsAlmostEqualTo(new Vector3(5.5, 7.5), adaptiveGrid.Tolerance));

            WriteToModelWithRandomMaterials(adaptiveGrid);
        }

        [Fact]
        public void BrokenSubtractionForMisalignedPolygon()
        {
            var boundaryVerticies = new List<Vector3>
            {
                new Vector3(0.241, -40, 7),
                new Vector3(0.241, -60, 7),
                new Vector3(80, -60.000000000000014, 7),
                new Vector3(80, -40.000000000000014, 7)
            };

            var boundary = new Polygon(boundaryVerticies);

            var grid = new AdaptiveGrid()
            {
                Boundaries = boundary
            };

            grid.AddFromPolygon(boundary, new[] { Vector3.Origin });

            var profile = Polygon.Rectangle(0.2, 0.2);
            var column = new Column(
                new Vector3(0.5, -56.22727272727274),
                10,
                new Line(new Vector3(0.5, -56.22727272727274, 10), new Vector3(0.5, -56.22727272727274, 0)),
                profile);

            var obstacle = Obstacle.FromColumn(column, 0.2, true);
            var result = grid.SubtractObstacle(obstacle);

            Assert.True(result);
            Assert.Equal(8, grid.GetEdges().Count);
            Assert.All(grid.GetVertices(), x => Assert.Equal(2, x.Edges.Count));

            WriteToModelWithRandomMaterials(grid);
        }

        [Theory]
        [MemberData(nameof(GetObstaclesForAllowOutsideBoundaryTest))]
        public void AadaptiveGridSubtractObstacleAllowOutsideBoundaryTest(Obstacle obstacle, bool expectedResult, int additionalVertices, int additionalEdges)
        {
            var boundary = Polygon.Rectangle(20, 40);
            var grid = new AdaptiveGrid { Boundaries = boundary };
            grid.AddFromPolygon(boundary, new List<Vector3> { Vector3.Origin });
            grid.AddVertices(new List<Vector3> { new Vector3(0, 20), new Vector3(0, 50) }, AdaptiveGrid.VerticesInsertionMethod.ConnectAndCut);

            var edgesCount = grid.GetEdges().Count;
            var verticesCount = grid.GetVertices().Count;

            var result = grid.SubtractObstacle(obstacle);

            WriteToModelWithRandomMaterials(grid);

            Assert.Equal(expectedResult, result);
            Assert.Equal(verticesCount + additionalVertices, grid.GetVertices().Count);
            Assert.Equal(edgesCount + additionalEdges, grid.GetEdges().Count);
        }

        public static IEnumerable<object[]> GetObstaclesForAllowOutsideBoundaryTest()
        {
            var profile = Polygon.Rectangle(1, 1);

            //Column outside of boundary and does not intersect with any edge or vertex
            yield return new object[] { Obstacle.FromColumn(new Column(new Vector3(-15, 0), 5, null, profile), 0, true), false, 0, 0 };
            yield return new object[] { Obstacle.FromColumn(new Column(new Vector3(-15, 0), 5, null, profile), 0, true, true), false, 0, 0 };
            //Column intersects with boundary
            yield return new object[] { Obstacle.FromColumn(new Column(new Vector3(-10, 0), 5, null, profile), 0, true), true, 4, 4 };
            yield return new object[] { Obstacle.FromColumn(new Column(new Vector3(-10, 0), 5, null, profile), 0, true, true), true, 6, 7 };
            //Column fully inside in boundary
            yield return new object[] { Obstacle.FromColumn(new Column(Vector3.Origin, 5, null, profile), 0, true), true, 7, 8 };
            yield return new object[] { Obstacle.FromColumn(new Column(Vector3.Origin, 5, null, profile), 0, true, true), true, 7, 8 };
            //Column outside of boundary and intersects with grid edge
            yield return new object[] { Obstacle.FromColumn(new Column(new Vector3(0, 30), 5, null, profile), 0, true), true, 2, 1, };
            yield return new object[] { Obstacle.FromColumn(new Column(new Vector3(0, 30), 5, null, profile), 0, true, true), true, 6, 7 };
            //Column outside of boundary and intersects with grid vertex
            yield return new object[] { Obstacle.FromColumn(new Column(new Vector3(0, 50), 5, null, profile), 0, true), true, 0, 0, };
            yield return new object[] { Obstacle.FromColumn(new Column(new Vector3(0, 50), 5, null, profile), 0, true, true), true, 4, 5 };
        }

        [Fact]
        public void AdaptiveGridLongSectionDoNowThrow()
        {
            var adaptiveGrid = new AdaptiveGrid();
            var polygon = Polygon.Rectangle(new Vector3(0, 0), new Vector3(200000, 10));

            var points = new List<Vector3>();
            points.Add(new Vector3(1, 5));
            points.Add(new Vector3(1999, 5));

            adaptiveGrid.AddFromExtrude(polygon, Vector3.ZAxis, 2, points);
        }

        [Fact]
        public void AdaptiveGridTwoAlignedSections()
        {
            var adaptiveGrid = new AdaptiveGrid();
            var polygon1 = Polygon.Rectangle(new Vector3(0, 0), new Vector3(10, 10));
            var polygon2 = Polygon.Rectangle(new Vector3(10, 2), new Vector3(20, 12));

            var points = new List<Vector3>();
            points.AddRange(polygon1.Vertices);
            points.AddRange(polygon2.Vertices);

            adaptiveGrid.AddFromExtrude(polygon1, Vector3.ZAxis, 2, points);
            adaptiveGrid.AddFromExtrude(polygon2, Vector3.ZAxis, 2, points);

            ulong id;
            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(10, 2), out id));
            var vertex = adaptiveGrid.GetVertex(id);
            //Up, North, South, East, West
            Assert.Equal(5, vertex.Edges.Count);
            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(10, 10), out id));
            vertex = adaptiveGrid.GetVertex(id);
            Assert.Equal(5, vertex.Edges.Count);
        }

        [Fact]
        public void AdaptiveGridDoesntAddTheSameVertex()
        {
            var adaptiveGrid = new AdaptiveGrid();
            var polygon = Polygon.Rectangle(new Vector3(0, 0), new Vector3(10, 10));
            adaptiveGrid.AddFromPolygon(polygon, new List<Vector3>());
            Assert.True(adaptiveGrid.TryGetVertexIndex(new Vector3(0, 10), out var id));
            var vertex = adaptiveGrid.GetVertex(id);
            var halfTol = adaptiveGrid.Tolerance / 2;
            var modified = vertex.Point + new Vector3(0, 0, halfTol);
            adaptiveGrid.TryGetVertexIndex(new Vector3(10, 0), out var otherId);
            var newVertex = adaptiveGrid.AddVertex(modified,
                new ConnectVertexStrategy(adaptiveGrid.GetVertex(otherId)));
            Assert.Equal(id, newVertex.Id);
            modified = vertex.Point + new Vector3(-halfTol, -halfTol, -halfTol);
            adaptiveGrid.TryGetVertexIndex(modified, out otherId, adaptiveGrid.Tolerance);
            Assert.Equal(id, otherId);
        }

        [Fact]
        public void AdaptiveGridAddVertices()
        {
            var grid = new AdaptiveGrid();

            //Just add
            var simpleLine = new Vector3[] { new Vector3(10, 0), new Vector3(20, 0) };
            var added = grid.AddVertices(simpleLine, AdaptiveGrid.VerticesInsertionMethod.Insert);
            Assert.Equal(2, added.Count);
            Assert.True(grid.TryGetVertexIndex(new Vector3(10, 0), out var id0));
            Assert.True(grid.TryGetVertexIndex(new Vector3(20, 0), out var id1));
            var v0 = grid.GetVertex(id0);
            var v1 = grid.GetVertex(id1);
            Assert.Empty(v0.Edges);
            Assert.Empty(v1.Edges);

            //Add and connect
            simpleLine = new Vector3[] { new Vector3(0, 0), new Vector3(2, 0), new Vector3(2, 0), new Vector3(5, 0) };
            added = grid.AddVertices(simpleLine, AdaptiveGrid.VerticesInsertionMethod.Connect);
            //Duplicates are ignored
            Assert.Equal(3, added.Count);
            Assert.True(grid.TryGetVertexIndex(new Vector3(0, 0), out id0));
            Assert.True(grid.TryGetVertexIndex(new Vector3(2, 0), out id1));
            Assert.True(grid.TryGetVertexIndex(new Vector3(5, 0), out var id2));
            v0 = grid.GetVertex(id0);
            v1 = grid.GetVertex(id1);
            var v2 = grid.GetVertex(id2);
            Assert.Single(v0.Edges);
            Assert.Equal(2, v1.Edges.Count);
            Assert.Single(v2.Edges);
            Assert.Equal(v0.Edges.First().OtherVertexId(v0.Id), v1.Id);
            Assert.Equal(v2.Edges.First().OtherVertexId(v2.Id), v1.Id);

            //Add, connect and self intersect
            var singleIntersection = new Vector3[] {
                new Vector3(0, 5),
                new Vector3(5, 5),
                new Vector3(10, 5),
                new Vector3(10, 10),
                new Vector3(8, 10),
                new Vector3(8, 2)
            };
            added = grid.AddVertices(singleIntersection, AdaptiveGrid.VerticesInsertionMethod.ConnectAndSelfIntersect);
            Assert.Equal(8, added.Count); //Single intersection point represented twice.
            Assert.True(grid.TryGetVertexIndex(new Vector3(8, 5), out var id));
            var v = grid.GetVertex(id);
            Assert.Equal(4, v.Edges.Count);
            Assert.True(grid.TryGetVertexIndex(new Vector3(5, 5), out id0));
            Assert.True(grid.TryGetVertexIndex(new Vector3(10, 5), out id1));
            Assert.True(grid.TryGetVertexIndex(new Vector3(8, 10), out id2));
            Assert.True(grid.TryGetVertexIndex(new Vector3(8, 2), out var id3));
            Assert.Contains(v.Edges, e => e.StartId == id0 || e.EndId == id0);
            Assert.Contains(v.Edges, e => e.StartId == id1 || e.EndId == id1);
            Assert.Contains(v.Edges, e => e.StartId == id2 || e.EndId == id2);
            Assert.Contains(v.Edges, e => e.StartId == id3 || e.EndId == id3);

            var douleIntersection = new Vector3[] {
                new Vector3(10, 0),
                new Vector3(20, 0),
                new Vector3(20, 5),
                new Vector3(15, 5),
                new Vector3(15, -5),
                new Vector3(12, -5),
                new Vector3(12, 5),
            };
            added = grid.AddVertices(douleIntersection, AdaptiveGrid.VerticesInsertionMethod.ConnectAndSelfIntersect);
            Assert.Equal(11, added.Count); //Two intersection points represented twice.
            Assert.True(grid.TryGetVertexIndex(new Vector3(15, 0), out id0));
            Assert.True(grid.TryGetVertexIndex(new Vector3(12, 0), out id1));
            v0 = grid.GetVertex(id0);
            v1 = grid.GetVertex(id1);
            Assert.Equal(4, v0.Edges.Count);
            Assert.Equal(4, v1.Edges.Count);
            Assert.Contains(v0.Edges, e => e.StartId == id1 || e.EndId == id1);
            Assert.True(grid.TryGetVertexIndex(new Vector3(10, 0), out id2));
            Assert.True(grid.TryGetVertexIndex(new Vector3(20, 0), out id3));
            v2 = grid.GetVertex(id2);
            var v3 = grid.GetVertex(id3);
            Assert.Single(v2.Edges);
            Assert.Equal(2, v3.Edges.Count);
            Assert.Contains(v2.Edges, e => e.StartId == id1 || e.EndId == id1);
            Assert.Contains(v3.Edges, e => e.StartId == id0 || e.EndId == id0);

            //Add connect and cut
            simpleLine = new Vector3[] { new Vector3(2, 10), new Vector3(2, 0) };
            added = grid.AddVertices(simpleLine, AdaptiveGrid.VerticesInsertionMethod.ConnectAndCut);
            Assert.Equal(3, added.Count);
            Assert.Contains(added, v => v.Point.IsAlmostEqualTo(new Vector3(2, 10)));
            Assert.Contains(added, v => v.Point.IsAlmostEqualTo(new Vector3(2, 5)));
            Assert.Contains(added, v => v.Point.IsAlmostEqualTo(new Vector3(2, 0)));
            Assert.True(grid.TryGetVertexIndex(new Vector3(2, 5), out id0));
            Assert.True(grid.TryGetVertexIndex(new Vector3(2, 0), out id1));
            v0 = grid.GetVertex(id0);
            v1 = grid.GetVertex(id1);
            Assert.Equal(4, v0.Edges.Count);
            Assert.Equal(3, v1.Edges.Count);

            //Add cut and extend.
            grid = new AdaptiveGrid();
            grid.AddFromPolygon(Polygon.Rectangle(new Vector3(0, 0), new Vector3(10, 10)),
                                new List<Vector3> { new Vector3(5, 5) });

            var toExtend = new Vector3[] { new Vector3(1, 5), new Vector3(4, 2), new Vector3(8, 6) };
            added = grid.AddVertices(toExtend, AdaptiveGrid.VerticesInsertionMethod.ConnectCutAndExtend);
            Assert.Equal(8, added.Count);
            Assert.Equal(new Vector3(0, 6), added[0].Point);
            Assert.Equal(new Vector3(1, 5), added[1].Point);
            Assert.Equal(new Vector3(5, 1), added[2].Point);
            Assert.Equal(new Vector3(2, 0), added[3].Point);
            Assert.Equal(new Vector3(4, 2), added[4].Point);
            Assert.Equal(new Vector3(5, 3), added[5].Point);
            Assert.Equal(new Vector3(7, 5), added[6].Point);
            Assert.Equal(new Vector3(10, 8), added[7].Point);
            Assert.Equal(3, added[0].Edges.Count);
            Assert.Equal(4, added[1].Edges.Count);
            Assert.Equal(3, added[2].Edges.Count);
            Assert.Equal(3, added[3].Edges.Count);
            Assert.Equal(4, added[4].Edges.Count);
            Assert.Equal(4, added[5].Edges.Count);
            Assert.Equal(4, added[6].Edges.Count);
            Assert.Equal(3, added[7].Edges.Count);
        }

        [Fact]
        public void AddVerticesWithCustomExtension()
        {
            var grid = new AdaptiveGrid();
            grid.AddFromPolygon(Polygon.Rectangle(new Vector3(0, 0), new Vector3(10, 10)),
                                new List<Vector3> { });

            //Default HintExtendDistance is 3.
            var toExtend = new Vector3[] { new Vector3(1, 3), new Vector3(1, 6) };
            var added = grid.AddVerticesWithCustomExtension(toExtend, grid.HintExtendDistance);
            Assert.Equal(2, added.Count);
            Assert.Equal(new Vector3(1, 0), added[0].Point);
            Assert.Equal(new Vector3(1, 6), added[1].Point);
            Assert.Equal(3, added[0].Edges.Count);
            Assert.Single(added[1].Edges);

            toExtend = new Vector3[] { new Vector3(5, 3), new Vector3(5, 6) };
            added = grid.AddVerticesWithCustomExtension(toExtend, 4);
            Assert.Equal(2, added.Count);
            Assert.Equal(new Vector3(5, 0), added[0].Point);
            Assert.Equal(new Vector3(5, 10), added[1].Point);
            Assert.Equal(3, added[0].Edges.Count);
            Assert.Equal(3, added[1].Edges.Count);

            toExtend = new Vector3[] { new Vector3(8, 3), new Vector3(8, 6) };
            added = grid.AddVerticesWithCustomExtension(toExtend, 2);
            Assert.Equal(2, added.Count);
            Assert.Equal(new Vector3(8, 3), added[0].Point);
            Assert.Equal(new Vector3(8, 6), added[1].Point);
            Assert.Single(added[0].Edges);
            Assert.Single(added[1].Edges);
        }

        [Fact]
        public void AddAngledVerticesWithCustomExtension()
        {
            var grid = new AdaptiveGrid();
            grid.AddFromPolygon(Polygon.Rectangle(new Vector3(0, 0), new Vector3(10, 10)),
                                new List<Vector3> { });

            var toExtend = new Vector3[] { new Vector3(1, 7), new Vector3(2, 8) };
            var added = grid.AddVerticesWithCustomExtension(toExtend, 2);
            Assert.Equal(2, added.Count);
            Assert.Equal(new Vector3(0, 6), added[0].Point);
            Assert.Equal(new Vector3(2, 8), added[1].Point);
            Assert.Equal(3, added[0].Edges.Count);
            Assert.Single(added[1].Edges);
        }

        [Fact]
        public void Add3DVerticesWithCustomExtension()
        {
            var grid = new AdaptiveGrid();
            grid.AddFromPolygon(Polygon.Rectangle(new Vector3(0, 0), new Vector3(10, 10)),
                                new List<Vector3> { new Vector3(2, 2), new Vector3(5, 5), new Vector3(8, 8) });

            var toInsert = new Vector3[] {
                new Vector3(2, 5, 0),
                new Vector3(3, 5, 0),
                new Vector3(4, 5, 1),
                new Vector3(5, 5, 1),
                new Vector3(6, 5, 0),
                new Vector3(7, 5, 0)
            };

            var verticesBefore = grid.GetVertices().Count;
            grid.AddVerticesWithCustomExtension(toInsert, 2);
            //Start point already exist and the last one is snapped.
            Assert.Equal(verticesBefore + 4, grid.GetVertices().Count);

            Assert.True(grid.TryGetVertexIndex(new Vector3(3, 5, 0), out var id, grid.Tolerance));
            var vertex = grid.GetVertex(id);
            Assert.Equal(3, vertex.Edges.Count);
            Assert.Contains(vertex.Edges, e => grid.GetVertex(e.OtherVertexId(id)).Point.IsAlmostEqualTo(new Vector3(4, 5, 1)));
            Assert.Contains(vertex.Edges, e => grid.GetVertex(e.OtherVertexId(id)).Point.IsAlmostEqualTo(new Vector3(2, 5, 0)));
            Assert.Contains(vertex.Edges, e => grid.GetVertex(e.OtherVertexId(id)).Point.IsAlmostEqualTo(new Vector3(5, 5, 0)));

            Assert.True(grid.TryGetVertexIndex(new Vector3(4, 5, 1), out id, grid.Tolerance));
            vertex = grid.GetVertex(id);
            Assert.Equal(2, vertex.Edges.Count);
            Assert.Contains(vertex.Edges, e => grid.GetVertex(e.OtherVertexId(id)).Point.IsAlmostEqualTo(new Vector3(3, 5, 0)));
            Assert.Contains(vertex.Edges, e => grid.GetVertex(e.OtherVertexId(id)).Point.IsAlmostEqualTo(new Vector3(5, 5, 1)));

            Assert.True(grid.TryGetVertexIndex(new Vector3(5, 5, 1), out id, grid.Tolerance));
            vertex = grid.GetVertex(id);
            Assert.Equal(2, vertex.Edges.Count);
            Assert.Contains(vertex.Edges, e => grid.GetVertex(e.OtherVertexId(id)).Point.IsAlmostEqualTo(new Vector3(4, 5, 1)));
            Assert.Contains(vertex.Edges, e => grid.GetVertex(e.OtherVertexId(id)).Point.IsAlmostEqualTo(new Vector3(6, 5, 0)));

            Assert.True(grid.TryGetVertexIndex(new Vector3(6, 5, 0), out id, grid.Tolerance));
            vertex = grid.GetVertex(id);
            Assert.Equal(3, vertex.Edges.Count);
            Assert.Contains(vertex.Edges, e => grid.GetVertex(e.OtherVertexId(id)).Point.IsAlmostEqualTo(new Vector3(5, 5, 1)));
            Assert.Contains(vertex.Edges, e => grid.GetVertex(e.OtherVertexId(id)).Point.IsAlmostEqualTo(new Vector3(5, 5, 0)));
            Assert.Contains(vertex.Edges, e => grid.GetVertex(e.OtherVertexId(id)).Point.IsAlmostEqualTo(new Vector3(8, 5, 0)));
        }

        [Fact]
        public void AdaptiveGridVertexGetEdgeOtherVertexId()
        {
            var grid = SampleGrid();
            var vertex = grid.GetVertex(2);
            Assert.Null(vertex.GetEdge(4));
            Assert.Null(vertex.GetEdge(2));

            var edge = vertex.GetEdge(1);
            Assert.True(edge.OtherVertexId(2) == 1);
            Assert.Throws<ArgumentException>(() => edge.OtherVertexId(3));
            var startVertex = grid.GetVertex(edge.StartId);
            Assert.True(startVertex.Point.IsAlmostEqualTo(new Vector3(0, 0)));
        }

        [Fact]
        public void AdaptiveGridClosestVertex()
        {
            var grid = SampleGrid();
            var closest = grid.ClosestVertex(new Vector3(5, 4));
            Assert.Equal(4u, closest.Id);
        }

        [Fact]
        public void AdaptiveGridClosestEdge()
        {
            var grid = SampleGrid();
            var edge = grid.ClosestEdge(new Vector3(9, 3), out var closest);
            Assert.True(edge.StartId == 3 || edge.StartId == 4);
            Assert.True(edge.EndId == 3 || edge.EndId == 4);
            Assert.Equal(new Vector3(8, 2), closest);
        }

        [Fact]
        public void AdaptiveGridCutEdge()
        {
            var grid = SampleGrid();
            var vertex = grid.GetVertex(1);
            var edge = vertex.GetEdge(4);
            var cut = grid.CutEdge(edge, new Vector3(0, 5));
            Assert.DoesNotContain(edge, vertex.Edges);
            Assert.DoesNotContain(edge, grid.GetEdges());
            Assert.Equal(2, cut.Edges.Count);
            Assert.Contains(cut.Edges, e => e.OtherVertexId(cut.Id) == 1);
            Assert.Contains(cut.Edges, e => e.OtherVertexId(cut.Id) == 4);
        }

        [Fact]
        public void AdaptiveGridEdgeGetVerticesGetLine()
        {
            var grid = SampleGrid();
            var vertexA = grid.GetVertex(1);
            var vertexB = grid.GetVertex(4);
            var edge = vertexA.GetEdge(4);
            var vertices = grid.GetVertices(edge);
            Assert.Equal(2, vertices.Count);
            Assert.Contains(vertices, v => v == vertexA);
            Assert.Contains(vertices, v => v == vertexB);

            var line = grid.GetLine(edge);
            Assert.True(line.Start.IsAlmostEqualTo(vertexA.Point) || line.End.IsAlmostEqualTo(vertexA.Point));
            Assert.True(line.Start.IsAlmostEqualTo(vertexB.Point) || line.End.IsAlmostEqualTo(vertexB.Point));
        }

        [Fact]
        public void AdaptiveGridRemoveVertex()
        {
            var grid = SampleGrid();
            var oldVertexCount = grid.GetVertices().Count;
            var oldEdgeCount = grid.GetEdges().Count;
            var vertex = grid.GetVertex(1);
            var edges = vertex.Edges.ToList();
            var otherVertices = edges.Select(e => grid.GetVertex(e.OtherVertexId(1)));
            grid.RemoveVertex(vertex);
            Assert.DoesNotContain(vertex, grid.GetVertices());
            Assert.Equal(oldVertexCount - 1, grid.GetVertices().Count);
            Assert.Equal(oldEdgeCount - 2, grid.GetEdges().Count);
            foreach (var e in edges)
            {
                Assert.DoesNotContain(e, grid.GetEdges());
                Assert.DoesNotContain(otherVertices, v => v.Edges.Contains(e));
            }
        }

        [Fact]
        public void AdaptiveGridAddEdgeNoCut()
        {
            var grid = SampleGrid();
            var v0 = grid.GetVertex(4);
            var v0ec = v0.Edges.Count;
            var v1 = grid.GetVertex(5);
            var v1ec = v1.Edges.Count;
            var oldVertexCount = grid.GetVertices().Count;
            var oldEdgeCount = grid.GetEdges().Count;
            var newEdges = grid.AddEdge(v0, v1, cut: false);
            Assert.Equal(oldVertexCount, grid.GetVertices().Count);
            Assert.Equal(oldEdgeCount + 1, grid.GetEdges().Count);
            Assert.Equal(v0ec + 1, v0.Edges.Count);
            Assert.Equal(v1ec + 1, v1.Edges.Count);
            Assert.Contains(newEdges.First(), v0.Edges);
            Assert.Contains(newEdges.First(), v1.Edges);
            Assert.True(newEdges.First().StartId == v0.Id);
            Assert.True(newEdges.First().EndId == v1.Id);

            oldEdgeCount = grid.GetEdges().Count;
            var otherEdge = newEdges.First();
            newEdges = grid.AddEdge(new Vector3(4, 3), new Vector3(6, 3), cut: false);
            Assert.Equal(oldVertexCount + 2, grid.GetVertices().Count);
            Assert.Equal(oldEdgeCount + 1, grid.GetEdges().Count);
            v0 = grid.GetVertex(newEdges.First().StartId);
            v1 = grid.GetVertex(newEdges.First().EndId);
            Assert.Equal(new Vector3(4, 3), v0.Point);
            Assert.Equal(new Vector3(6, 3), v1.Point);
            Assert.True(grid.GetLine(otherEdge).Intersects(grid.GetLine(newEdges.First()), out _));
        }

        [Fact]
        public void AdaptiveGridRemoveEdge()
        {
            var grid = SampleGrid();
            var v0 = grid.GetVertex(2);
            var v1 = grid.GetVertex(5);
            var v0ec = v0.Edges.Count;
            var oldVertexCount = grid.GetVertices().Count;
            var oldEdgeCount = grid.GetEdges().Count;
            var edge = v0.GetEdge(v1.Id);
            grid.RemoveEdge(edge);
            Assert.Equal(oldVertexCount - 1, grid.GetVertices().Count);
            Assert.Equal(oldEdgeCount - 1, grid.GetEdges().Count);

            Assert.DoesNotContain(edge, grid.GetEdges());
            Assert.DoesNotContain(v1, grid.GetVertices()); //v1 had only one edge.
            Assert.Contains(v0, grid.GetVertices()); //v0 had two edges
            Assert.Equal(v0ec - 1, v0.Edges.Count);
            Assert.DoesNotContain(edge, v0.Edges);
        }

        [Fact]
        public void AdaptiveGridAddCutEdge()
        {
            var grid = SampleGrid();

            //1. Just intersection.
            var v0 = grid.AddVertex(new Vector3(4, 1));
            var v1 = grid.AddVertex(new Vector3(6, 1));
            var edges = grid.AddEdge(v0.Id, v1.Id);
            Assert.Equal(2, edges.Count);
            var intersectionVertex = grid.GetVertex(edges.First().EndId);
            Assert.Equal(new Vector3(5, 1), intersectionVertex.Point);
            Assert.Equal(4, intersectionVertex.Edges.Count);

            //2. Multiply intersections
            v0 = grid.AddVertex(new Vector3(0, 4));
            v1 = grid.AddVertex(new Vector3(10, 4));
            edges = grid.AddEdge(v0.Id, v1.Id);
            Assert.Equal(3, edges.Count);
            Assert.True(grid.TryGetVertexIndex(new Vector3(4, 4), out var otherId));
            Assert.True(edges.First().StartId == otherId || edges.First().EndId == otherId);
            intersectionVertex = grid.GetVertex(otherId);
            Assert.Equal(4, intersectionVertex.Edges.Count);
            Assert.True(grid.TryGetVertexIndex(new Vector3(6, 4), out otherId));
            Assert.True(edges.Last().StartId == otherId || edges.Last().EndId == otherId);
            intersectionVertex = grid.GetVertex(otherId);
            Assert.Equal(4, intersectionVertex.Edges.Count);

            //3. Miss
            v0 = grid.AddVertex(new Vector3(0, 7));
            v1 = grid.AddVertex(new Vector3(10, 7));
            edges = grid.AddEdge(v0.Id, v1.Id);
            Assert.Single(edges);
            var startVertex = grid.GetVertex(edges.First().StartId);
            var endVertex = grid.GetVertex(edges.First().EndId);
            Assert.Equal(new Vector3(0, 7), startVertex.Point);
            Assert.Equal(new Vector3(10, 7), endVertex.Point);
            Assert.Single(startVertex.Edges);
            Assert.Single(endVertex.Edges);

            //4. In Plane Touch
            v0 = grid.AddVertex(new Vector3(2, 0));
            v1 = grid.AddVertex(new Vector3(2, -5));
            edges = grid.AddEdge(v0.Id, v1.Id);
            Assert.Single(edges);
            startVertex = grid.GetVertex(edges.First().StartId);
            endVertex = grid.GetVertex(edges.First().EndId);
            Assert.Equal(new Vector3(2, 0), startVertex.Point);
            Assert.Equal(3, startVertex.Edges.Count);
            Assert.Single(endVertex.Edges);

            //5. Out Plane Touch
            v0 = grid.AddVertex(new Vector3(8, 0));
            v1 = grid.AddVertex(new Vector3(8, 0, 2));
            edges = grid.AddEdge(v0.Id, v1.Id);
            Assert.Single(edges);
            startVertex = grid.GetVertex(edges.First().StartId);
            Assert.Equal(new Vector3(8, 0), startVertex.Point);
            Assert.Equal(3, startVertex.Edges.Count);
            Assert.Single(endVertex.Edges);

            //6. Inside other edge
            v0 = grid.AddVertex(new Vector3(1, 1));
            v1 = grid.AddVertex(new Vector3(3, 3));
            edges = grid.AddEdge(v0.Id, v1.Id);
            Assert.Single(edges);
            startVertex = grid.GetVertex(edges.First().StartId);
            endVertex = grid.GetVertex(edges.First().EndId);
            Assert.Equal(2, startVertex.Edges.Count);
            Assert.Equal(2, endVertex.Edges.Count);
            var otherEdge = startVertex.Edges.First(e => e.StartId != endVertex.Id && e.EndId != endVertex.Id);
            var otherVertex = grid.GetVertex(otherEdge.StartId == startVertex.Id ? otherEdge.EndId : otherEdge.StartId);
            Assert.Equal(new Vector3(0, 0), otherVertex.Point);
            otherEdge = endVertex.Edges.First(e => e.StartId != startVertex.Id && e.EndId != startVertex.Id);
            otherVertex = grid.GetVertex(otherEdge.StartId == startVertex.Id ? otherEdge.EndId : otherEdge.StartId);
            Assert.Equal(new Vector3(4, 4), otherVertex.Point);

            //7. Overlaps other edges
            v0 = grid.AddVertex(new Vector3(4, 6));
            v1 = grid.AddVertex(new Vector3(11, -1));
            edges = grid.AddEdge(v0.Id, v1.Id);
            Assert.Equal(4, edges.Count);
            Assert.True(grid.TryGetVertexIndex(new Vector3(5, 5), out otherId));
            Assert.True(edges.First().StartId == otherId || edges.First().EndId == otherId);
            endVertex = grid.GetVertex(otherId);
            startVertex = grid.GetVertex(edges.First().StartId == otherId ? edges.First().EndId : edges.First().StartId);
            Assert.Single(startVertex.Edges);
            Assert.Equal(3, endVertex.Edges.Count);
            Assert.True(grid.TryGetVertexIndex(new Vector3(6, 4), out otherId));
            Assert.Contains(endVertex.Edges, e => e.StartId == otherId || e.EndId == otherId);
            otherVertex = grid.GetVertex(otherId);
            Assert.Equal(4, otherVertex.Edges.Count);
            startVertex = grid.GetVertex(edges.Last().StartId);
            endVertex = grid.GetVertex(edges.Last().EndId);
            Assert.Equal(3, startVertex.Edges.Count);
            Assert.Single(endVertex.Edges);
            Assert.Contains(startVertex.Edges, e => e.StartId == otherId || e.EndId == otherId);
            otherVertex = grid.GetVertex(otherId);
            Assert.Equal(new Vector3(6, 4), otherVertex.Point);
        }

        [Fact]
        public void AdaptiveGridAddVertexWithAngle()
        {
            var grid = new AdaptiveGrid();

            //1. Aligned with direction. 0 vertices exist.
            var s = new ConnectVertexWithAngleStrategy(new Vector3(0, 5), new Vector3(0, 1), 45);
            var startVertex = grid.AddVertex(new Vector3(0, 0), s);
            Assert.Null(s.MiddleVertex);
            Assert.Equal(new Vector3(0, 0), startVertex.Point);
            var id00 = startVertex.Id;
            Assert.Equal(new Vector3(0, 5), s.EndVertex.Point);
            var id05 = s.EndVertex.Id;

            //2. Ortho aligned with direction, 1 vertex exist.
            s = new ConnectVertexWithAngleStrategy(new Vector3(0, 0), new Vector3(0, 1), 45);
            startVertex = grid.AddVertex(new Vector3(5, 0), s);
            Assert.Null(s.MiddleVertex);
            Assert.Equal(new Vector3(5, 0), startVertex.Point);
            Assert.Equal(id00, s.EndVertex.Id);
            var id50 = startVertex.Id;

            //3. 0 degree, 2 vertices exist.
            s = new ConnectVertexWithAngleStrategy(new Vector3(5, 0), new Vector3(0, 1), 0);
            startVertex = grid.AddVertex(new Vector3(0, 5), s);
            Assert.Equal(new Vector3(5, 5), s.MiddleVertex.Point);
            Assert.Equal(new Vector3(0, 5), startVertex.Point);
            Assert.Equal(id05, startVertex.Id);
            Assert.Equal(id50, s.EndVertex.Id);

            //4. 90 degrees, 0 vertices exist.
            s = new ConnectVertexWithAngleStrategy(new Vector3(10, 0), new Vector3(0, 1), 90);
            startVertex = grid.AddVertex(new Vector3(15, 5), s);
            Assert.Equal(new Vector3(15, 0), s.MiddleVertex.Point);

            //5. 45 degrees, 1 intersection.
            s = new ConnectVertexWithAngleStrategy(new Vector3(13, -2), new Vector3(1, 0), 45);
            startVertex = grid.AddVertex(new Vector3(10, 5), s);
            Assert.Equal(new Vector3(10, 1), s.MiddleVertex.Point);
            Assert.Equal(45.0, (s.EndVertex.Point - s.MiddleVertex.Point).AngleTo(s.MiddleVertex.Point - startVertex.Point), 3);
            Assert.Contains(s.MiddleVertex.Edges, e =>
                e.StartId != s.MiddleVertex.Id && grid.GetVertex(e.StartId).Point.IsAlmostEqualTo(new Vector3(11, 0)) ||
                e.EndId != s.MiddleVertex.Id && grid.GetVertex(e.EndId).Point.IsAlmostEqualTo(new Vector3(11, 0)));

            //5. 45 degrees, tilted direction.
            s = new ConnectVertexWithAngleStrategy(new Vector3(11, 15), new Vector3(1, 1), 45);
            startVertex = grid.AddVertex(new Vector3(10, 10), s);
            Assert.Equal(new Vector3(11, 11), s.MiddleVertex.Point);
            Assert.Equal(45.0, (s.EndVertex.Point - s.MiddleVertex.Point).AngleTo(s.MiddleVertex.Point - startVertex.Point), 3);

            //6. 1 to 2 ration (26.565 degrees)
            s = new ConnectVertexWithAngleStrategy(new Vector3(15, 5), new Vector3(0, 1), 26.565);
            startVertex = grid.AddVertex(new Vector3(20, 0), s);
            Assert.Equal(new Vector3(17.5, 0), s.MiddleVertex.Point);
            var angle = (s.EndVertex.Point - s.MiddleVertex.Point).AngleTo(s.MiddleVertex.Point - startVertex.Point);
            Assert.True(angle.ApproximatelyEquals(26.565) || angle.ApproximatelyEquals(90 - 26.565));

            //7.  1 to 2 ration (26.565 degrees) full length
            s = new ConnectVertexWithAngleStrategy(new Vector3(20, 0), new Vector3(1, 0), 26.565);
            startVertex = grid.AddVertex(new Vector3(30, 5), s);
            Assert.Null(s.MiddleVertex);
            Assert.Contains(startVertex.Edges, e => e.StartId == s.EndVertex.Id || e.EndId == s.EndVertex.Id);
        }

        [Fact]
        public void AdaptiveGridStoreAndDuplicateElevation()
        {
            AdaptiveGrid grid = new AdaptiveGrid();
            var polygon = Polygon.Rectangle(Vector3.Origin, new Vector3(10, 10));
            grid.AddFromExtrude(polygon, Vector3.ZAxis, 1, new List<Vector3>() { new Vector3(5, 5) });
            grid.AddEdge(new Vector3(0, 5, 1), new Vector3(0, 5, 2), false);
            grid.AddEdge(new Vector3(10, 5, 1), new Vector3(10, 5, 4), false);

            var plane = new Plane(new Vector3(0, 0, 1), Vector3.ZAxis);
            var snapshot = grid.SnapshotEdgesOnPlane(plane);
            Assert.Equal(12, snapshot.Count);

            grid.TryGetVertexIndex(new Vector3(5, 0, 1), out var id, grid.Tolerance);
            grid.RemoveVertex(grid.GetVertex(id));
            var edgesBefore = grid.GetEdges().Count;

            var transform = new Transform(0, 0, 2);
            grid.InsertSnapshot(snapshot, transform);
            Assert.Equal(edgesBefore + 20, grid.GetEdges().Count);

            Assert.True(grid.TryGetVertexIndex(new Vector3(0, 5, 3), out id, grid.Tolerance));
            var v = grid.GetVertex(id);
            Assert.Equal(4, v.Edges.Count);
            var neighbourPoints = v.Edges.Select(e => grid.GetVertex(e.OtherVertexId(v.Id)).Point);
            Assert.Contains(new Vector3(0, 0, 3), neighbourPoints);
            Assert.Contains(new Vector3(0, 10, 3), neighbourPoints);
            Assert.Contains(new Vector3(5, 5, 3), neighbourPoints);
            Assert.Contains(new Vector3(0, 5, 2), neighbourPoints);
            Assert.DoesNotContain(new Vector3(0, 5, 1), neighbourPoints);

            Assert.True(grid.TryGetVertexIndex(new Vector3(5, 0, 3), out id, grid.Tolerance));
            v = grid.GetVertex(id);
            Assert.Equal(3, v.Edges.Count);
            neighbourPoints = v.Edges.Select(e => grid.GetVertex(e.OtherVertexId(v.Id)).Point);
            Assert.Contains(new Vector3(0, 0, 3), neighbourPoints);
            Assert.Contains(new Vector3(10, 0, 3), neighbourPoints);
            Assert.Contains(new Vector3(5, 5, 3), neighbourPoints);
            Assert.DoesNotContain(new Vector3(5, 0, 1), neighbourPoints);

            Assert.True(grid.TryGetVertexIndex(new Vector3(10, 5, 3), out id, grid.Tolerance));
            v = grid.GetVertex(id);
            Assert.Equal(5, v.Edges.Count);
            neighbourPoints = v.Edges.Select(e => grid.GetVertex(e.OtherVertexId(v.Id)).Point);
            Assert.Contains(new Vector3(10, 0, 3), neighbourPoints);
            Assert.Contains(new Vector3(10, 10, 3), neighbourPoints);
            Assert.Contains(new Vector3(5, 5, 3), neighbourPoints);
            Assert.Contains(new Vector3(10, 5, 1), neighbourPoints);
            Assert.Contains(new Vector3(10, 5, 4), neighbourPoints);
        }

        [Fact]
        public void EdgeInfoFlagsTest()
        {
            AdaptiveGrid grid = new AdaptiveGrid();
            var polygon = Polygon.Rectangle(Vector3.Origin, new Vector3(10, 10));
            grid.AddFromPolygon(polygon, new List<Vector3>() { new Vector3(5, 5) });
            grid.AddEdge(Vector3.Origin, new Vector3(0, 0, 5));

            grid.TryGetVertexIndex(Vector3.Origin, out var id0);
            grid.TryGetVertexIndex(new Vector3(0, 0, 5), out var id1);
            grid.TryGetVertexIndex(new Vector3(0, 5), out var id2);

            var verticalEdge = grid.GetVertex(id0).Edges.First(e => e.StartId == id1 || e.EndId == id1);
            var horizontalEdge = grid.GetVertex(id0).Edges.First(e => e.StartId == id2 || e.EndId == id2);
            EdgeInfo verticalEdgeInfo = new EdgeInfo(grid, verticalEdge);
            EdgeInfo horizontalEdgeInfo = new EdgeInfo(grid, horizontalEdge);
            Assert.True(verticalEdgeInfo.HasAnyFlag(EdgeFlags.HasVerticalChange));
            Assert.False(horizontalEdgeInfo.HasAnyFlag(EdgeFlags.HasVerticalChange));

            horizontalEdgeInfo.AddFlags(EdgeFlags.UserDefinedHint2D | EdgeFlags.HasVerticalChange);
            Assert.True(horizontalEdgeInfo.HasAnyFlag(EdgeFlags.HasVerticalChange));
            Assert.True(horizontalEdgeInfo.HasAnyFlag(EdgeFlags.UserDefinedHint2D));
            Assert.False(horizontalEdgeInfo.HasAnyFlag(EdgeFlags.UserDefinedHint3D));
            Assert.True(horizontalEdgeInfo.HasAnyFlag(EdgeFlags.UserDefinedHint2D | EdgeFlags.UserDefinedHint3D));
        }

        //          (4)
        //         /   \
        //        /     \
        //       /       \
        //      /   (5)   \
        //     /     |     \
        //    /      |      \
        //  (1)-----(2)-----(3)
        //
        private AdaptiveGrid SampleGrid()
        {
            AdaptiveGrid grid = new AdaptiveGrid();
            var strip = grid.AddVertices(new Vector3[] {
                new Vector3(0, 0), //1
                new Vector3(5, 0), //2
                new Vector3(10, 0) //3
            }, AdaptiveGrid.VerticesInsertionMethod.Connect);

            grid.AddVertex(new Vector3(5, 5), new ConnectVertexStrategy(strip[0], strip[2]), cut: false); //4
            grid.AddVertex(new Vector3(5, 2), new ConnectVertexStrategy(strip[1]), cut: false); //5
            return grid;
        }

        private void WriteToModelWithRandomMaterials(AdaptiveGrid grid, [CallerMemberName] string memberName = "")
        {
            var random = new Random();
            Name = memberName;
            foreach (var edge in grid.GetEdges())
            {
                Model.AddElement(new ModelCurve(grid.GetLine(edge), material: random.NextMaterial()));
            }
        }
    }
}
